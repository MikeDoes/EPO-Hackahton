<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE ep-patent-document PUBLIC "-//EPO//EP PATENT DOCUMENT 1.5.1//EN" "ep-patent-document-v1-5-1.dtd">
<!-- This XML data has been generated under the supervision of the European Patent Office -->
<ep-patent-document id="EP18731599B1" file="EP18731599NWB1.xml" lang="en" country="EP" doc-number="3642751" kind="B1" date-publ="20211006" status="n" dtd-version="ep-patent-document-v1-5-1">
<SDOBI lang="en"><B000><eptags><B001EP>ATBECHDEDKESFRGBGRITLILUNLSEMCPTIESILTLVFIROMKCYALTRBGCZEEHUPLSK..HRIS..MTNORS..SM..................</B001EP><B003EP>*</B003EP><B005EP>J</B005EP><B007EP>BDM Ver 2.0.12 (4th of August) -  2100000/0</B007EP></eptags></B000><B100><B110>3642751</B110><B120><B121>EUROPEAN PATENT SPECIFICATION</B121></B120><B130>B1</B130><B140><date>20211006</date></B140><B190>EP</B190></B100><B200><B210>18731599.9</B210><B220><date>20180521</date></B220><B240><B241><date>20191113</date></B241></B240><B250>en</B250><B251EP>en</B251EP><B260>en</B260></B200><B300><B310>201715629114</B310><B320><date>20170621</date></B320><B330><ctry>US</ctry></B330></B300><B400><B405><date>20211006</date><bnum>202140</bnum></B405><B430><date>20200429</date><bnum>202018</bnum></B430><B450><date>20211006</date><bnum>202140</bnum></B450><B452EP><date>20210615</date></B452EP></B400><B500><B510EP><classification-ipcr sequence="1"><text>G06F  21/57        20130101AFI20181231BHEP        </text></classification-ipcr><classification-ipcr sequence="2"><text>G06F  21/64        20130101ALI20181231BHEP        </text></classification-ipcr><classification-ipcr sequence="3"><text>H04L   9/32        20060101ALI20181231BHEP        </text></classification-ipcr><classification-ipcr sequence="4"><text>H04L  29/06        20060101ALI20181231BHEP        </text></classification-ipcr></B510EP><B520EP><classifications-cpc><classification-cpc sequence="1"><text>G06F  21/57        20130101 LI20190103BHEP        </text></classification-cpc><classification-cpc sequence="2"><text>H04L   9/3236      20130101 LI20180809BHEP        </text></classification-cpc><classification-cpc sequence="3"><text>H04L   9/3234      20130101 LI20180809BHEP        </text></classification-cpc><classification-cpc sequence="4"><text>G06F  21/64        20130101 LI20180809BHEP        </text></classification-cpc><classification-cpc sequence="5"><text>H04L  63/123       20130101 LI20180809BHEP        </text></classification-cpc></classifications-cpc></B520EP><B540><B541>de</B541><B542>GEGENSEITIGE AUTHENTIFIZIERUNG MIT INTEGRITÄTSBESCHEINIGUNG</B542><B541>en</B541><B542>MUTUAL AUTHENTICATION WITH INTEGRITY ATTESTATION</B542><B541>fr</B541><B542>AUTHENTIFICATION MUTUELLE À ATTESTATION D'INTÉGRITÉ</B542></B540><B560><B561><text>US-A1- 2004 127 196</text></B561><B561><text>US-A1- 2011 179 268</text></B561><B561><text>US-A1- 2016 054 989</text></B561></B560></B500><B700><B720><B721><snm>THOM, Stefan</snm><adr><str>Microsoft Technology Licensing, LLC
One Microsoft Way</str><city>Redmond, Washington 98052-6399</city><ctry>US</ctry></adr></B721><B721><snm>STEIN, Torsten</snm><adr><str>Microsoft Technology Licensing, LLC
One Microsoft Way</str><city>Redmond, Washington 98052-6399</city><ctry>US</ctry></adr></B721></B720><B730><B731><snm>Microsoft Technology Licensing, LLC</snm><iid>101605262</iid><irf>O10816.09494</irf><adr><str>One Microsoft Way</str><city>Redmond, WA 98052-6399</city><ctry>US</ctry></adr></B731></B730><B740><B741><snm>CMS Cameron McKenna Nabarro 
Olswang LLP</snm><iid>101670164</iid><adr><str>Cannon Place 
78 Cannon Street</str><city>London EC4N 6AF</city><ctry>GB</ctry></adr></B741></B740></B700><B800><B840><ctry>AL</ctry><ctry>AT</ctry><ctry>BE</ctry><ctry>BG</ctry><ctry>CH</ctry><ctry>CY</ctry><ctry>CZ</ctry><ctry>DE</ctry><ctry>DK</ctry><ctry>EE</ctry><ctry>ES</ctry><ctry>FI</ctry><ctry>FR</ctry><ctry>GB</ctry><ctry>GR</ctry><ctry>HR</ctry><ctry>HU</ctry><ctry>IE</ctry><ctry>IS</ctry><ctry>IT</ctry><ctry>LI</ctry><ctry>LT</ctry><ctry>LU</ctry><ctry>LV</ctry><ctry>MC</ctry><ctry>MK</ctry><ctry>MT</ctry><ctry>NL</ctry><ctry>NO</ctry><ctry>PL</ctry><ctry>PT</ctry><ctry>RO</ctry><ctry>RS</ctry><ctry>SE</ctry><ctry>SI</ctry><ctry>SK</ctry><ctry>SM</ctry><ctry>TR</ctry></B840><B860><B861><dnum><anum>US2018033581</anum></dnum><date>20180521</date></B861><B862>en</B862></B860><B870><B871><dnum><pnum>WO2018236508</pnum></dnum><date>20181227</date><bnum>201852</bnum></B871></B870></B800></SDOBI>
<description id="desc" lang="en"><!-- EPO <DP n="1"> -->
<heading id="h0001"><b><u>BACKGROUND</u></b></heading>
<p id="p0001" num="0001">Consumer devices are increasingly configured with sensors, electronics, and networking capabilities to provide enhanced user experiences. Such devices utilize different software/firmware, applications, etc. to provide these enhanced experiences. Because the devices are connected to the network (e.g., via Wi-Fi, Ethernet, cellular network), cloud services push software/firmware updates to the device. Bad actors (e.g., hackers/malware) that have gained access to such devices are able to intercept such updates and falsely confirm updates to the device manufacturers or software providers. <patcit id="pcit0001" dnum="US2011179268A1"><text>US 2011/179268 A1</text></patcit> describes one or more files of an application which are obtained and configured as a virtual storage volume. An application package is generated by encrypting, using a key, the one or more files configured as a virtual storage volume. A license generation module generates a license including both a usage policy for the application and the key. A computing device, to run the application, obtains and attempts to authenticate the application package. If the application package is authenticated, then a license associated with the application package is obtained and at least part of the application package is decrypted using the key in the license. A virtual storage volume that includes the application is mounted, and the application is executed in accordance with the usage policy in the license. However, if the application is not authenticated, then the application is not executed.<br/>
<patcit id="pcit0002" dnum="US2016054989A1"><text>US 2016/054989 A1</text></patcit> describes an electronic device (such as a cellular telephone) which automatically installs and optionally personalizes a purposed application (which is sometimes referred to as an 'applet') on a secure element in the electronic device (which is sometimes referred to as 'applet creation'). In particular, when a digitally signed installation package containing the applet is received from an installing device (such as a server), the secure element verifies the digital signature of the installation package using an encryption key associated with a vendor of the secure element. Then, the secure element installs the applet. In addition, the secure element may optionally export user data from another applet installed on the secure element. Moreover, the secure element may personalize the installed applet using the user data from the other applet.<br/>
<patcit id="pcit0003" dnum="US2004127196A1"><text>US 2004/127196 A1</text></patcit> describes a system and method to securely create, distribute, install<!-- EPO <DP n="2"> --> and execute selected features of software on wireless devices combines three different types of licenses, a validation license, a digital rights management (DRM) license, and a feature license with a software application. Each of these three licenses work independent of each other, where the validation license helps prevent malicious code from executing on wireless devices, the DRM license prevents unauthorized copying of the software application and the feature license securely enables or disables specific features of the software application. The system also allows a wireless device to unwrap a DRM protected software application, to validate the software application, to enforce DRM usage rules and to execute selected features of the software application.</p>
<heading id="h0002"><b><u>SUMMARY</u></b></heading>
<p id="p0002" num="0002">According to aspects of the present invention there is provided a device, method, and storage media as defined in the accompanying claims.</p>
<p id="p0003" num="0003">In at least one implementation, a device includes a payload interface configured to receive a payload containing a sealed container, one or more provisioning code segments, and one or more policies based on the one or more provisioning code segments and corresponding to the sealed container. The device further includes a trusted computing manager configured generate one or more measurements of the one or more provisioning code segments according to the one or more policies, determine whether the generated one or more measurements satisfy the one or more policies, and unseal the sealed container responsive to the generated one or more measurements satisfying the one or more policies received in the payload. Satisfaction of the one or more policies confirms integrity of the device.</p>
<p id="p0004" num="0004">This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.</p>
<p id="p0005" num="0005">Other implementations are also described and recited herein.</p>
<heading id="h0003"><b><u>BRIEF DESCRIPTIONS OF THE DRAWINGS</u></b></heading>
<p id="p0006" num="0006">
<ul id="ul0001" list-style="none" compact="compact">
<li><figref idref="f0001">FIG. 1</figref> illustrates an example block diagram of device authentication using policies based on provisioning code.</li>
<li><figref idref="f0002">FIG. 2</figref> illustrates another example block diagram of device authentication using policies based on provisioning code.<!-- EPO <DP n="3"> --></li>
<li><figref idref="f0003">FIG. 3</figref> illustrates another example block diagram of device authentication<!-- EPO <DP n="4"> --> using policies based on provisioning code.</li>
<li><figref idref="f0004">FIG. 4</figref> illustrates another example block diagram of device authentication using policies based on provisioning code.</li>
<li><figref idref="f0005">FIG. 5</figref> illustrates example operations for device authentication using policies based on provisioning code.</li>
<li><figref idref="f0006">FIG. 6</figref> illustrates example operations for device authentication using policies based on provisioning code.</li>
<li><figref idref="f0007">FIG. 7</figref> illustrates example operations for device authentication using policies based on provisioning code.</li>
<li><figref idref="f0008">FIG. 8</figref> illustrates example operations for device authentication using policies based on provisioning code.</li>
<li><figref idref="f0009">FIG. 9</figref> illustrates an example device that may be useful in implementing the described technology.</li>
</ul></p>
<heading id="h0004"><b><u>DETAILED DESCRIPTIONS</u></b></heading>
<p id="p0007" num="0007">Consumer devices are increasingly configured with sensors, electronics, and networking capabilities to provide enhanced user experiences. Such devices utilize different software/firmware, applications, etc. to provide these enhanced experiences. Because the devices are connected to the network (e.g., via Wi-Fi, Ethernet, cellular network), cloud services push software/firmware updates to the device. The updates are provided to patch a security hole, fix a bug, or to enhance functionality. Generally, the updates are signed with a manufacturer or software provider key such that the device can that the update is received from an approved party. However, a bad actor (e.g., hacker/malware) that has control of the device may be able to falsely sign bad piece of software with the manufacturer/software provider key. Furthermore, the bad actor may send a deceptive confirmation back to the manufacturer/software provider that the pushed update was successfully installed. Furthermore, bad actors are able to detect differences between old software and new software to find the updates and exploit a new security patch, for example. Bad actors are further able to gain access to secure portions of these devices (e.g., trusted execution environment) and utilizes private keys to decrypt received encrypted payloads. These bad actors may further access private user data, user configuration data (e.g., Wi-Fi credentials), etc.</p>
<p id="p0008" num="0008">Implementations described herein include a smart device, connected device, IoT device, etc. configured with a trusted platform module (TPM) executing in a trusted<!-- EPO <DP n="5"> --> execution environment (TEE). Software/firmware updates, user data, applications, etc. are pushed to the device as a payload. The payloads contain a sealed container (e.g., the software/firmware update, user data, applications, etc.), one or more policies, and one or more provisioning code segments corresponding to the one or more policies. The one or more provisioning code segments may be one or more agent code segments, which are code segments that implement some functionality or utilize some sensor implemented in the device. The one or more provisioning code segment may also be the code segments included in the sealed payload. The one or more policies include commands and/or conditions that must be satisfied before the device is able to unseal (e.g., release the sealed container to the device) the sealed container. The one or more policies are based at least on a measurement of the one or more provisioning code segments and may be based an output of execution of the one or more provisioning code segments. The policies are checked by the TPM of the device. If the measurement of the one or more provisioning code segments do not satisfy the policy, then the device is unable to unseal the sealed container and install the updates, utilize the data, etc. In other words, if the policies are not satisfied, the device may be compromised. If the policies are satisfied, the sealed container is unsealed and the device can install the updates, utilize the data, etc.</p>
<p id="p0009" num="0009"><figref idref="f0001">FIG. 1</figref> illustrates an example block diagram 100 of device authentication using policies based on provisioning code. The block diagram 100 includes one or more provisioning services 102 (hereinafter "the provisioning service 102") that are configured to provision smart devices, such as the smart scale 124 Provisioning refers to providing customer or device specific configuration data (e.g., device setup information), software/firmware updates, customer data, customer applications, functionality data, etc. to the devices. The provisioning service 102 may be associated with a manufacturer or a device, a vendor, a stand-alone service, etc. The provisioning service 102 may have access to or manage user accounts and may manage or document devices using public keys associated with devices. The provisioning service 102 manages or documents ownership of such devices using the public key associated with the device.</p>
<p id="p0010" num="0010">In the illustrated implementation, the smart scale 124 includes firmware 114, and one or more agents 116, an operating system 122, and a trusted execution environment (TEE) 118. The agents 116 are code modules for operating one or more sensors, functionalities, etc. on the device. For example, a GPS sensor on the smart scale 124 includes agent code for operating the GPS sensor. Similarly, a temperature sensor includes<!-- EPO <DP n="6"> --> agent code for operation of the temperature sensor. In another example implementation, one or more agent code segments are used to operate a Wi-Fi transceiver. Other agent segments are utilized for different functionality, such as, for example, code for weighing the user, displaying past user data at a user interface, etc. The device includes a trusted execution environment (TEE) 118 that communicates with a trusted platform module (TPM) 120. It should be understood that there may be more than one TPM 120.</p>
<p id="p0011" num="0011">The TPM 120 may be a microcontroller, such as a discrete silicon component in a semiconductor package, an integrated component incorporated in one or more semiconductor packages, or the TPM 120 may be a firmware based TPM running in a TEE on a general-purpose system on chip (SoC). In the illustrated implementation, the TPM 120 is a firmware based TPM executed in the TEE 118. However, it should be understood that the TPM 120 may be a microcontroller executed in a trusted computing manager 126. The instructions for TEE 118 may be stored in read only memory (ROM) or write once read many memory (WORM) and is separated from the rest of the programs (e.g., the operating system 122, firmware 114, agent 116) that are executing on a CPU of the device. Accordingly, secrets like private keys needed by the TPM 120 are not accessible by other programs unless the keys are authorized to be used by other programs or certain conditions are satisfied. The TPM 120 securely stores passwords, digital keys, and certificates, that provide unique identification and authentication. The TPM 120 may include or have access to non-volatile storage that stores keys and authorization data. The TPM 120 further includes one or more platform configuration registers (PCRs) that store measurements of the software 112 (including the agents 116, the firmware 114, and/or the operating system 122). The TPM 120 may further include one or more engines for encryption and hashing. For example, the TPM 120 includes a random number generator, a hashing engine (e.g., SHA-2), a key generator, a RSA engine, etc. The TPM 120 further includes an execution engine for executing different functionalities in the TPM 120.</p>
<p id="p0012" num="0012">When the smart scale 124 is booted, the boot code that is loaded (including the operating system and the firmware 114) are measured and recorded as integrity measurements in one or more of the PCRs of the TPM 120. The measurements are generated at the trusted computing manager 126 (and may be generated by the TEE 118). These measurements can be used as evidence for how a system started and to make sure that a TPM 120 based key is used only when the correct software (e.g., the software 112) was used to boot the system. Restricting utilization of a key based on the correct boot code<!-- EPO <DP n="7"> --> starting the system is called "sealing" a key. The key seal is based on one or more policies. These policies direct the TPM 120 of what measurements to make or receive. If the measurements satisfy a policy (e.g., if a number of conditions are met), then the key is unsealed and may be used for an operation. Satisfaction of a policy is based on the measurements.</p>
<p id="p0013" num="0013">The one or more policies define a set of one or more controls or conditions that must be met before actions are authorized on a TPM 120 entity. The one or more controls or conditions can be combined using AND and OR combinations. An authorization policy digest is created by a combination of assertions (e.g., conditions). The authorization policy digest may be created outside the TPM 120 using software that emulates the policy calculations done on the TPM 120. In such implementations, the authorization policy digest may be created by the provisioning service 102 and sent with the payload 104. In other implementations, a trial policy can be created with the TPM. In a trial policy, the assertions (controls and/or conditions) pass and the authorization policy digest is created.</p>
<p id="p0014" num="0014">After the authorization policy digest is created, the one or more controls or conditions (e.g., policy commands) are sent to the TPM 120 and the TPM 120 hash-extends the commands to create a TPM policy digest. An authorization command (e.g., such as unseal the sealed container 110) is sent to the TPM 120. The TPM 120 determines whether the TPM policy digest matches the authorization policy digest. If so, the command is authorized and executed. In this example implementation, the sealed container 110 is unsealed by the authorization command. If the TPM policy digest does not match the authorization policy digest, then the authorization fails and the authorization command is not executed (e.g., the sealed container 110 is not unsealed).</p>
<p id="p0015" num="0015">It should be understood that the one or more policies 106 define commands to initiate a policy session, commands that are checked (e.g., measurements received), and the authorization command (e.g., unseal the sealed container 110). Furthermore, the one or more policies 106 may include the authorization policy digest if the authorization policy digest is created outside the TPM 120. Accordingly, the implementations described below that discuss determining whether the policies are "satisfied" include the operations described to create an authorization policy digest, process commands to create a TPM policy digest, and determine whether the digests match.</p>
<p id="p0016" num="0016">Furthermore, a command to "unseal" the sealed container 110 may be<!-- EPO <DP n="8"> --> specified by authorizing an entity within the TPM 120, such as a key, to be utilized by an entity outside the TPM (e.g., the TEE 118 and/or the trusted computing manager 126). Thus, the implementations described that discuss "unsealing" the sealed container may include steps such as migrating a decryption key outside the TPM 120.</p>
<p id="p0017" num="0017">The provisioning information (e.g., data, software/firmware updates, applications) are send to the smart scale 124 as a payload 104. The payload 104 includes one or more policies 106, one or more provisioning code segments (provisioning code 108), and a sealed container 110. The sealed container 110 contains the provisioning information prepared for the device. The provisioning code 108 may code specific to one or more agents/functionality and thus may be considered one or more agent code segments. The sealed container 110 is released to the device if the one or more policies are satisfied. Thus, the payload 104 is received by a payload interface 128 of the device, and the provisioning code 108 is loaded in the agent(s) 116. The agent code 108 is executed by the smart scale 124 and generates an output which is communicated to the TPM 120 through the trusted computing manager 126. The TPM 120 receives a number of measurements, including at least a measurement of at least the received provisioning code 108. The measurements and the generated output of the provisioning code 108 are used to determine whether the received policies 106 are satisfied. If the policies are satisfied by the measurements of the provisioning code 108 and the output of execution of the provisioning code 108, then the sealed container 110 is unsealed and released to the smart scale 124. If the sealed container 110 is unsealed, then the smart scale 124 installs any software/firmware updates, any applications, or stores any data that is included in the sealed container 110. If the policies 106 are not satisfied, then the smart scale 124 may be compromised and the sealed container 110 is not unsealed. Because the one or more policies are satisfied by the measurements and/or the output, the smart scale 124 self-attests to the integrity of the device.</p>
<p id="p0018" num="0018">In some example implementations, the provisioning code 108 is the device specific update that is included in the sealed container 110. In such implementations, the TPM 120 may measure the provisioning code (e.g., software update) in the sealed container (e.g., conduct a hash integrity check, decrypt the provisioning code, etc.) based on the one or more policies 106. In such an implementation, if the policies are satisfied, the provisioning code 108 is released outside the TPM 120, the TEE 118, and/or the trusted computing manager 126 for execution one or more processors of the smart scale<!-- EPO <DP n="9"> --> 124.</p>
<p id="p0019" num="0019">In some example implementations, the one or more polices 106 are further based on code already executable on the device (e.g., operating system/firmware not in the payload 104. In such an example implementation, the policies are based on projected measurements of the code executable on the device in addition to the provisioning code received in the payload 104.</p>
<p id="p0020" num="0020">At some point after the payload 104 is sent to the smart scale 124, the provisioning service 102 may initiate a device health attestation check. A measured boot sequence (that measures the boot code sequence stored on the PCRs of the TPM 120) may be securely sent to the provisioning service 102. The provisioning 102 checks the measured boot sequence to determine if the measured boot sequence is correct (e.g., the software is not compromised). If the measured boot sequence is correct, then it is confirmed that the device correctly unsealed the sealed container 110 and installed the data/code. If the measured boot sequence is not correct, then the provisioning service 102 may initiate corrective action with the device. Such corrective action may include, without limitation, instructing the device to wipe all software, bricking the device, or notifying the user that the device is compromised. If the user is notified of the device being compromised, the user may conduct an offline reset of the device or take the device in to a manufacturer or vendor for repairs and/or replacement.</p>
<p id="p0021" num="0021">The above described features allow the provisioning services 102 to push customized code/data to a number of devices and restrict utilization of the code/data based on satisfaction of the policies 106 sent with the payload 104. Furthermore, because the agent code 108 is sent with the payload 104, any infected device is not able to read the agent code to determine potential policy measurements before the agent code 108 is received. In other words, the agent code provides some functionality that the device is not "aware" of before the agent code 108 is received. <figref idref="f0002 f0003 f0004">FIGs. 2-4</figref> illustrate different implementations of securing the payload 104.</p>
<p id="p0022" num="0022"><figref idref="f0002">FIG. 2</figref> illustrates another example block diagram 200 of device authentication using policies based on provisioning code. The block diagram 200 includes one or more provisioning services 202 (hereinafter "the provisioning service 202") that are configured to provision smart devices, such as the device 206. Provisioning refers to providing tailored configuration data (e.g., device setup information), software/firmware updates, user data, user applications, functionality data, etc. to the devices. The<!-- EPO <DP n="10"> --> provisioning service 202 may be associated with a manufacturer or a device, a vendor, a stand-alone service, etc. The provisioning service 202 may have access to or manage user accounts and may manage or document ownership of devices using public keys associated with devices.</p>
<p id="p0023" num="0023">The block diagram 200 further includes a device 206, which may be a smart device, internet of things (IoT) device, connected device, etc. In one example implementation, the device 206 is a smart scale. The device 206 includes software 220, which may include firmware, operating system code, agent code, etc. The device further includes a trusted platform module (TPM) 224 that executes in a trusted execution environment (TEE) 222. The TPM 224 securely stores passwords, digital keys, and certificates, that provide unique identification and authentication. The TPM 224 may include or have access to non-volatile storage that stores keys and authorization data. The TPM 224 further includes one or more platform configuration registers (PCRs) that store measurements of the software 220 (including agent code segments and firmware). The TPM 224 may further include one or more engines for encryption and hashing. For example, the TPM 224 includes a random number generator, a SHA-1 hashing engine, a key generator, a RSA engine, etc. The TPM 224 further includes an execution engine for executing different functionalities in the TPM 224.</p>
<p id="p0024" num="0024">The provisioning service 202 transmit a payload 204 to the device 206. The payload includes a sealed container 212 that includes data 214 and/or code 216 configured for the device 206. The data 214 may be user data, configuration data, etc., and the code 216 may include software/firmware updates, user applications, etc. The sealed container 212 is protected by one or more policies 210. The one or more policies 210 and the sealed container 212 are further part of an integrity protected container 208. They payload 204 further includes one or more agent code segments 218 that are outside the integrity protected container 208 of the payload 204.</p>
<p id="p0025" num="0025">The payload 204 is transmitted to the device 206 and the agent code is installed in the software 220. The integrity protected container 208 is processed by the trusted platform module 224 in the trusted execution environment 222. The integrity protected container 208 is protected by a hash algorithm, such as SHA-2. As such, the payload 204 includes a hash value that is encrypted using a public key that is associated with a private key stored in the trusted platform module. Thus, the trusted platform module decrypts the hash value, hashes the integrity protected container 208 (which<!-- EPO <DP n="11"> --> includes the one or more policies 210 and the sealed container 212) to determine a second hash value. If the hash value and the second hash value match, then the integrity protected container 208 has integrity. In other words, the integrity protected container 208 has not been altered during transmission from the provisioning service 202 to the device 206.</p>
<p id="p0026" num="0026">The trusted platform module 224 then takes measurements of the one or more agent code segments 218. Furthermore, the one or more agent code segments 218 are executed, which generates an output. The trusted platform module 224 receives the output and measurements and stores them in the one or more platform configuration registers (PCRs) of the trusted platform module 224. The trusted platform module 224 determines whether the one or more policies 210 are satisfied by the values stored in the one or more PCRs of the trusted platform module 224. If the one or more policies 210 are satisfied, then the sealed container 212 is unsealed and released to the device 206. If the one or more policies 210 are not satisfied, the trusted platform module 224 is unable to unseal the sealed container 212. Accordingly, the data 214 is not stored and/or the code 216 is not installed.</p>
<p id="p0027" num="0027"><figref idref="f0003">FIG. 3</figref> illustrates another example block diagram 300 of device authentication using policies based on provisioning code. The block diagram 300 includes one or more provisioning services 302 (hereinafter "the provisioning service 302") that are configured to provision smart devices, such as the device 306. Provisioning refers to providing tailored configuration data (e.g., device setup information), software/firmware updates, user data, user applications, functionality data, etc. to the devices. The provisioning service 302 may be associated with a manufacturer or a device, a vendor, a stand-alone service, etc. The provisioning service 302 may have access to or manage user accounts and may manage or document devices using public keys associated with devices.</p>
<p id="p0028" num="0028">The block diagram 300 further includes a device 306, which may be a smart device, internet of things (IoT) device, connected device, etc. In one example implementation, the device 306 is a smart scale. The device 306 includes software 320, which may include firmware, operating system code, agent code, etc. The device further includes a trusted platform module (TPM) 324 that executes in a trusted execution environment (TEE) 322. The TPM 324 securely stores passwords, digital keys, and certificates, that provide unique identification and authentication. The TPM 324 may include or have access to non-volatile storage that stores keys and authorization data. The TPM 324 further includes one or more platform configuration registers (PCRs) that store<!-- EPO <DP n="12"> --> measurements of the software 320 (including agents and firmware). The TPM 324 may further include one or more engines for encryption and hashing. For example, the TPM 324 includes a random number generator, a SHA-1 hashing engine, a key generator, a RSA engine, etc. The TPM 324 further includes an execution engine for executing different functionalities in the TPM 324.</p>
<p id="p0029" num="0029">The provisioning service 302 transmit a payload 304 to the device 306. The payload 304 includes one or more policies 308 and an encrypted payload 310. In the payload 304, the one or more policies 308 are outside the encrypted payload 310. The encrypted payload 310 includes a sealed container 312 and one or more agent code segments 318. The sealed container 312 includes data 314 and/or code 316 configured for the device 306. The data 314 may be user data, configuration data, etc., and the code 316 may include software/firmware updates, user applications, etc. The sealed container 312 is protected by the one or more policies 308.</p>
<p id="p0030" num="0030">The payload 304 is transmitted to the device 306 and the one or more policies 308 are delivered to the TPM 324. In some implementations, the encrypted payload 310 is encrypted with a public key associated with a private key known by the TPM 324. In some other implementations, the encrypted payload 310 is encrypted with a symmetric key, which itself is encrypted by a public key associated with a private key known by the TPM 324. The TPM 324 utilizes the known private key to decrypt the encrypted payload 310 (or decrypt the symmetric key, which is then used to decrypt the encrypted payload 310). The one or more agent code segments 318 are then released to the software 320.</p>
<p id="p0031" num="0031">The trusted platform module 324 then takes measurements of the one or more agent code segments 318. Furthermore, the one or more agent code segments 318 are executed, which generates an output. The trusted platform module 324 receives the output and measurements and stores them in the one or more platform configuration registers (PCRs) of the trusted platform module 324. The trusted platform module 324 determines whether the one or more policies 308 are satisfied by the values stored in the one or more PCRs of the trusted platform module 324. If the one or more policies 308 are satisfied, then the sealed container 312 is unsealed and released to the device 306. If the one or more policies 308 are not satisfied, the trusted platform module 324 is unable to unseal the sealed container 312. Accordingly, the data 314 is not stored and/or the code 316 is not installed.<!-- EPO <DP n="13"> --></p>
<p id="p0032" num="0032"><figref idref="f0004">FIG. 4</figref> illustrates another example block diagram of device authentication using policies based on provisioning code. The block diagram 400 includes one or more provisioning services 402 (hereinafter "the provisioning service 402") that are configured to provision smart devices, such as the device 406. Provisioning refers to providing tailored configuration data (e.g., device setup information), software/firmware updates, user data, user applications, functionality data, etc. to the devices. The provisioning service 402 may be associated with a manufacturer or a device, a vendor, a stand-alone service, etc. The provisioning service 402 may have access to or manage user accounts and may manage or document devices using public keys associated with devices.</p>
<p id="p0033" num="0033">The block diagram 400 further includes a device 406, which may be a smart device, internet of things (IoT) device, connected device, etc. In one example implementation, the device 406 is a smart scale. The device 406 includes software 420, which may include firmware, operating system code, agent code, etc. The device further includes a trusted platform module (TPM) 424 that executes in a trusted execution environment (TEE) 422. The TPM 424 securely stores passwords, digital keys, and certificates, that provide unique identification and authentication. The TPM 424 may include or have access to non-volatile storage that stores keys and authorization data. The TPM 424 further includes one or more platform configuration registers (PCRs) that store measurements of the software 420 (including agents and firmware). The TPM 424 may further include one or more engines for encryption and hashing. For example, the TPM 424 includes a random number generator, a SHA-1 hashing engine, a key generator, a RSA engine, etc. The TPM 424 further includes an execution engine for executing different functionalities in the TPM 424.</p>
<p id="p0034" num="0034">The provisioning service 402 transmit a payload 404 to the device 406. The payload 404 includes an encrypted payload 408 that includes one or more active policies 410 and a sealed container 412. The sealed container includes data 414 and/or code 416 configured for the device 406. The data 414 may be user data, configuration data, etc., and the code 416 may include software/firmware updates, user applications, etc. The TPM 424 decrypts the encrypted payload 408 using a private key stored in the TPM 424 (or an asymmetric key decrypted using the private key). The one or more active policies are executed by the device 406. If the one or more active policies are executed correctly then the TPM unseals the sealed container 412 and the data 414 and/or code are released to the device 406.<!-- EPO <DP n="14"> --></p>
<p id="p0035" num="0035"><figref idref="f0005">FIG. 5</figref> illustrates example operations 500 for device authentication using policies based on provisioning code. A receiving operation 502 receives a payload containing a sealed container, one or more policies, and one or more agent code segments corresponding to the one or more policies. The one or more policies and the sealed container are integrity protected. Accordingly, the payload contains an encrypted hash value. The hash value is encrypted using a public key associated with a private key stored on the device. A decrypting operation 504 decrypts the encrypted hash value. A hashing operation 506 hashes the one or more policies and the sealed container to generate another hash value (a new hash value). A determining operation 508 determines whether the one or more policies and the sealed container have integrity. In other words, the determining operation 508 determines whether the one or more policies and the sealed container have been altered by comparing the decrypted hash value to the generated another hash value. If the one or more policies and the sealed container have been altered (e.g., the one or more policies and the sealed container do not have integrity), then the process continues to a waiting operation 518 that waits for additional instructions. Additional instructions may be received from a provisioning service to lock down or wipe the device.</p>
<p id="p0036" num="0036">If the one or more policies and the sealed container are not altered (e.g., the one or more policies and the sealed container have integrity/the hash values match), then an executing operation 510 executes the one or more agent code segments to generate an output. A measuring operation 512 measures the one or more agent code segments based on the one or more policies. The generated output and the measurement of the one or more agent code segments may be stored in one or more platform configuration registers (PCRs) of a trusted platform module (TPM) of the device. A determining operation 514 determines whether the one or more policies are satisfied by the measurement and the output. If the policies are not satisfied, then the sealed container is not unsealed and the waiting operation 518 waits for additional instructions. The device may be compromised and the device does not receive any data/code in the sealed container. If the policies are satisfied, the trusted platform module unseals (in an unsealing operation 516) the sealed container (e.g., using a key), and the data/code in the sealed container is released to the device. In other words, the device is not compromised.</p>
<p id="p0037" num="0037"><figref idref="f0006">FIG. 6</figref> illustrates example operations 600 for device authentication using policies based on provisioning code. A receiving operation 602 receives a payload containing a sealed container, one or more policies, and one or more agent code segments<!-- EPO <DP n="15"> --> corresponding to the one or more policies. The sealed container and the one or more agent code segments are encrypted. In some implementations, the sealed container and the one or more agent code segments are encrypted with a public key associated with a private key known by the trusted platform module (TPM) of the device. In some other implementations, the sealed container and the one or more agent code segments are encrypted with a symmetric key, which itself is encrypted by a public key associated with a private key known by the TPM. The TPM utilizes the known private key in a decrypting operation 604 that decrypts the encrypted sealed container and the one or more agent code segments (or decrypt the symmetric key, which is then used to decrypt the sealed container and the one or more agent code segments). An executing operation 606 executes the one or more agent code segments to generate an output. A measuring operation 608 measures the one or more agent code segments based on the one or more policies. A determining operation 610 determines whether the one or more policies are satisfied by the measurement and the output. If the policies are not satisfied, then the sealed container is not unsealed and a waiting operation 614 waits for additional instructions. The device may be compromised and the device does not receive any data/code in the sealed container. If the policies are satisfied, the trusted platform module unseals (in an unsealing operation 612) the sealed container (e.g., using a key), and the data/code in the sealed container is released to the device. In other words, the device is not compromised.</p>
<p id="p0038" num="0038"><figref idref="f0007">FIG. 7</figref> illustrates example operations 700 for device authentication using policies based on provisioning code. Specifically, <figref idref="f0007">FIG. 7</figref> illustrates the operations from the perspective of a provisioning service. A receiving operation 702 receives a communication from a device with a public device identification. A locating operation 704 locates a data, and/or software or firmware updates for the device using the public device ID. The public device ID may be documented in an ownership record that is connected to a customer account. The data and/or software or firmware updates may be specific to the device and or the customer with the device. Thus, the provisioning service utilizes the ownership record and the connected customer account/profile to generate the data and/or software or firmware updates. The data and/or software or firmware updates may be pre-prepared by the provisioning service and/or generated after the communication is received in the receiving operation 702. Furthermore, the data and/or software or firmware updates may be prepared for the device without receiving a communication in the receiving operation 702.<!-- EPO <DP n="16"> --></p>
<p id="p0039" num="0039">An identifying operation 706 identifies one or more agent code segments for policies. These agent code segments may be based on the type of device, functionality of the device, etc. A generating operation 708 generates one or more policies based on the one or more agent code segments. The generating operation 708 may include generating an authorization digest by simulating a TPM of the device. The generating operation 708 may further include generating commands for the policies, an authorization command, and/or combining (e.g., generating a hash chain) of the commands using AND and/or OR operations. A preparing operation 710 prepares a sealed container with the data and/or software or firmware updates using the one or more policies and the one or more agent code segments. The preparing operation 710 generating an authorization digest by simulating a TPM of the device. The preparing operation 710 may further include generating commands for the policies, an authorization command, and/or combining (e.g., generating a hash chain) of the commands using AND and/or OR operations.</p>
<p id="p0040" num="0040">A securing operation 712 secures the sealed container, the one or more policies, and the one or more agent code segments as a payload. The securing operation 712 may include encrypting (e.g., using the device's public key) one or more of the policies, agent code segments, and the sealed container. The securing operation 712 may further include hashing one of the payload portions to generate a hash value, and encrypting the hash value. A transmitting operation 714 transmits the secured payload to the device. The provision service may subsequently request a device attestation from the device. The device may send a measured boot sequence to the provisioning service. If the measured boot sequence does not satisfy an expected boot sequence, then the provisioning service may take corrective action with the device.</p>
<p id="p0041" num="0041"><figref idref="f0008">FIG. 8</figref> illustrates example operations for device authentication using policies based on provisioning code. A receiving operation receives a payload containing a sealed container, one or more provisioning cod segments, and one or more policies. A generating operation 804 generates one or more measurements of the one or more provisioning code segments based on the one or more policies. The generating operation may be performed by a trusted computing manager and/or a trusted executing operation. A determining operation 806 determines whether the one or more policies are satisfied by the generated measurement. If the policies are satisfied by the generated measurement, an unsealing operation 808 unseals the sealed container to release the code and/or data to the device. If the policies are not satisfied, a waiting operation 810 waits for additional instructions. The<!-- EPO <DP n="17"> --> additional instructions may include a device attestation check by an attestation service (e.g., determines whether the code/and or data is installed), or another device/service. The device or user may receive a notification indicating the device has been compromised and corrective action should be taken.</p>
<p id="p0042" num="0042">In some example implementations, the one or more provisioning code segments are the code segments included in the sealed container. In such an implementation, the policies may indicate certain operations to perform on the provisioning code segments (e.g., hash, decrypt, etc.). If the operations are performed by the device (e.g., a trusted platform module, trusted execution environment, and/or a trusted computing manager), then the policies are satisfied and the provisioning code is released to execute on the device.</p>
<p id="p0043" num="0043"><figref idref="f0009">FIG. 9</figref> illustrates an example system (labeled as a processing system 900) that may be useful in implementing the described technology. The processing system 900 may be a client device, such as a laptop, mobile device, desktop, tablet, or a server/cloud device. The processing system 900 includes one or more processor(s) 902, and a memory 904. The memory 904 generally includes both volatile memory (e.g., RAM) and non-volatile memory (e.g., flash memory). An operating system 910 resides in the memory 904 and is executed by the processor 902. The memory 904 includes a read only memory (ROM) 914, which may be a write once, read many (WORM) memory.</p>
<p id="p0044" num="0044">One or more application programs 912 modules or segments, such as user applications 942, agent code 944, a trusted execution environment 946, and a trusted platform module 948, a trusted computing manager (not shown) are loaded in the memory 904 and/or storage 920 and executed by the processor 902. Firmware, one or more agents, a payload interface, and a policy manager (not shown) may also be loaded in the memory 904 and executed by the processor 902. The trusted execution environment 946 is stored in the ROM 914 (or WORM) and executed by the processor 902. Data, such as user data, digests, measurements, keys, passwords, root secrets, etc. may be stored in the memory 904 or storage 920 and may be retrievable by the processor 902 for use in the by the user applications 942, the agent code 944, the trusted execution environment 946, the trusted platform module 948, etc. The storage 920 may be local to the processing system 900 or may be remote and communicatively connected to the processing system 900 and may include another server. The storage 920 may store resources that are requestable by client devices (not shown).<!-- EPO <DP n="18"> --></p>
<p id="p0045" num="0045">The processing system 900 includes a power supply 916, which is powered by one or more batteries or other power sources and which provides power to other components of the processing system 900. The power supply 916 may also be connected to an external power source that overrides or recharges the built-in batteries or other power sources.</p>
<p id="p0046" num="0046">The processing system 900 may include one or more communication transceivers 930 which may be connected to one or more antenna(s) 932 to provide network connectivity (e.g., mobile phone network, Wi-Fi®, Bluetooth®, etc.) to one or more other servers and/or client devices (e.g., mobile devices, desktop computers, or laptop computers). The processing system 900 may further include a network adapter 936, which is a type of communication device. The processing system 900 may use the network adapter 936 and any other types of communication devices for establishing connections over a wide-area network (WAN) or local-area network (LAN). It should be appreciated that the network connections shown are exemplary and that other communications devices and means for establishing a communications link between the processing system 900 and other devices may be used.</p>
<p id="p0047" num="0047">The processing system 900 may include one or more input devices 934 such that a user may enter commands and information (e.g., a keyboard or mouse). These and other input devices may be coupled to the server by one or more interfaces 938, such as a serial port interface, parallel port, universal serial bus (USB), etc. The processing system 900 may further include a display 922, such as a touch screen display.</p>
<p id="p0048" num="0048">The processing system 900 may include a variety of tangible processor-readable storage media and intangible processor-readable communication signals. Tangible processor-readable storage can be embodied by any available media that can be accessed by the processing system 900 and includes both volatile and nonvolatile storage media, removable and non-removable storage media. Tangible processor-readable storage media excludes intangible communications signals and includes volatile and nonvolatile, removable and non-removable storage media implemented in any method or technology for storage of information, such as processor-readable instructions, data structures, program modules or other data. Tangible processor-readable storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CDROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other<!-- EPO <DP n="19"> --> tangible medium which can be used to store the desired information and which can be accessed by the processing system 900. In contrast to tangible processor-readable storage media, intangible processor-readable communication signals may embody computer-readable instructions, data structures, program modules or other data resident in a modulated data signal, such as a carrier wave or other signal transport mechanism. The term "modulated data signal" means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, intangible communication signals include signals traveling through wired media, such as a wired network or direct-wired connection, and wireless media, such as acoustic, RF, infrared, and other wireless media.<!-- EPO <DP n="20"> --></p>
<p id="p0049" num="0049">Some embodiments may comprise an article of manufacture. An article of manufacture may comprise a tangible storage medium to store logic. Examples of a storage medium may include one or more types of processor-readable storage media<!-- EPO <DP n="21"> --> capable of storing electronic data, including volatile memory or non-volatile memory, removable or non-removable memory, erasable or non-erasable memory, writeable or rewriteable memory, and so forth. Examples of the logic may include various software elements, such as software components, programs, applications, computer programs, application programs, system programs, machine programs, operating system software, middleware, firmware, software modules, routines, subroutines, operation segments, methods, procedures, software interfaces, application program interfaces (API), instruction sets, computing code, computer code, code segments, computer code segments, words, values, symbols, or any combination thereof. In one embodiment, for example, an article of manufacture may store executable computer program instructions that, when executed by a computer, cause the computer to perform methods and/or operations in accordance with the described embodiments. The executable computer program instructions may include any suitable type of code, such as source code, compiled code, interpreted code, executable code, static code, dynamic code, and the like. The executable computer program instructions may be implemented according to a predefined computer language, manner or syntax, for instructing a computer to perform a certain operation segment. The instructions may be implemented using any suitable high-level, low-level, object-oriented, visual, compiled and/or interpreted programming language.</p>
<p id="p0050" num="0050">The implementations described herein are implemented as logical steps in one or more computer systems. The logical operations may be implemented (1) as a sequence of processor-implemented steps executing in one or more computer systems and (2) as interconnected machine or circuit modules within one or more computer systems. The implementation is a matter of choice, dependent on the performance requirements of the computer system being utilized. Accordingly, the logical operations making up the implementations described herein are referred to variously as operations, steps, objects, or modules. Furthermore, it should be understood that logical operations may be performed in any order, unless explicitly claimed otherwise or a specific order is inherently necessitated by the claim language.</p>
</description>
<claims id="claims01" lang="en"><!-- EPO <DP n="22"> -->
<claim id="c-en-01-0001" num="0001">
<claim-text>A device (124) comprising:
<claim-text>one or more processors (902);</claim-text>
<claim-text>a payload interface (128) executable by the one or more processors (902) to receive a payload (104) containing a sealed container (110), one or more provisioning code segments (108) outside the sealed container (110), and one or more policies (106) located outside the sealed container (110), the one or more policies (106) being based on the one or more provisioning code segments (108) and corresponding to the sealed container (110); and</claim-text>
<claim-text>a trusted computing manager (126) executable by the one or more processors (902) to:
<claim-text>generate (804) one or more measurements of the one or more provisioning code segments (108) according to the one or more policies (106), to determine (806) whether the generated one or more measurements satisfy the one or more policies (106) based on the one or more measurements and an output of execution of the one or more provisioning code segments (108), wherein the execution of the one or more provisioning code segments located outside the sealed container by the device (124) generates the output; and</claim-text>
<claim-text>unseal (808), at a trusted platform module (TPM) (120) of the trusted computing manager (126), the sealed container (110) responsive to determining that the generated one or more measurements and the output of the execution satisfy the one or more policies (106) received in the payload (104), satisfaction of the one or more policies (106) confirming integrity of the device (124).</claim-text></claim-text></claim-text></claim>
<claim id="c-en-01-0002" num="0002">
<claim-text>The device (124) of claim 1 wherein the sealed container (110) and the one or more policies (106) are protected by a hash value and hash algorithm, the hash value being encrypted using a public key associated with a private key stored in the trusted platform module (TPM) (120) of the device (124), the trusted computing manager (126) further executable to decrypt the hash value using the private key stored on the TPM (120) and associated with the public key used to encrypt the hash value, hash the one or more policies (106) and the sealed container (110) to generate a new hash value; compare the hash value the new hash value to determine integrity of the sealed container (110) and the one or more policies (106).</claim-text></claim>
<claim id="c-en-01-0003" num="0003">
<claim-text>The device (124) of claim 1 wherein the sealed container (110) and the one or more provisioning code segments are encrypted using a public key associated with a private key stored in the trusted platform module (TPM) (120), the trusted computing manager (126) further executable to decrypt the sealed container (110) and the one or more provisioning code segments using the private key stored in the TPM (120).</claim-text></claim>
<claim id="c-en-01-0004" num="0004">
<claim-text>The device (124) of claim 1 wherein the one or more provisioning code segments (108) are active policies (410) executable by the device (124) to satisfy the one or more policies (106).</claim-text></claim>
<claim id="c-en-01-0005" num="0005">
<claim-text>The device (124) of claim 1 wherein the trusted computing manager includes a firmware based trusted platform module (TPM) (120) executed in a trusted execution environment (TEE) (322) of the device (124).</claim-text></claim>
<claim id="c-en-01-0006" num="0006">
<claim-text>The device (124) of claim 1 wherein the one or more policies (106) are further based on one or more projected measurements of code executable on the device (124), the code executable on device (124) stored on the device (124) prior to receiving the payload (104).</claim-text></claim>
<claim id="c-en-01-0007" num="0007">
<claim-text>A method (880) of confirming integrity of a device (124) comprising:<!-- EPO <DP n="23"> -->
<claim-text>receiving (802), at the device (124), a payload (104) containing a sealed container (110), one or more provisioning code segments (108) located outside the sealed container (110), and one or more policies (106) located outside the sealed container (110), the one or more policies (106) being based on the one or more provisioning code segments (108) and corresponding to the sealed container (110);</claim-text>
<claim-text>generating (804), at the device (124), one or more measurements of the one or more provisioning code segments (108) based on the one or more policies (106);</claim-text>
<claim-text>executing the one or more provisioning code segments (108) located outside the sealed container (110) by the device (124) to generate an output; and</claim-text>
<claim-text>unsealing (808), at a trusted platform module (TPM) (120) of a trusted computing manager (126) of the device (124), the sealed container (110) for the device (124) responsive to determining (806) that the generated one or more measurements and the generated output satisfy the one or more policies (106), satisfaction of the one or more policies (106) confirming integrity of the device (124).</claim-text></claim-text></claim>
<claim id="c-en-01-0008" num="0008">
<claim-text>The method (800) of claim 7 wherein the sealed container (110) and the one or more policies (106) are protected by a hash value and hash algorithm, the hash value being encrypted using a public key associated with a private key stored in the trusted platform module (TPM) (120) of the device (124), method (800) further comprising:
<claim-text>decrypting (504) the hash value using the private key stored on the TPM (120) and associated with the public key used to encrypt the hash value;</claim-text>
<claim-text>hashing (506) the one or more policies (106) and the sealed container (110) to generate a new hash value; and</claim-text>
<claim-text>comparing (508) the hash value with the new hash value to determine integrity of the sealed container (110) and the one or more policies (106).</claim-text></claim-text></claim>
<claim id="c-en-01-0009" num="0009">
<claim-text>The method (800) of claim 7, wherein the sealed container (110) and the one or more provisioning code segments (108) are encrypted using a public key associated with a private key stored in the trusted platform module (TPM) (120) of the device (124), the method (800) further comprising:<br/>
decrypting (604) the sealed container (110) and the one or more provisioning code segments (108) using the private key stored in the TPM (120).</claim-text></claim>
<claim id="c-en-01-0010" num="0010">
<claim-text>The method (800) of claim 8 wherein the one or more provisioning code segments (108) are active policies (410) executable by the device (124) to satisfy the one or more policies (106).</claim-text></claim>
<claim id="c-en-01-0011" num="0011">
<claim-text>The method (800) of claim 7 wherein the device (124) includes a firmware based platform module (TPM) (120) executed in a trusted execution environment (322) of the device (124).</claim-text></claim>
<claim id="c-en-01-0012" num="0012">
<claim-text>The method (800) of claim 7 wherein the one or more policies (106) are further based on one or more projected measurements of code executable on the device (124), the code executable on device (124) stored on the device prior to receiving the payload (104).</claim-text></claim>
<claim id="c-en-01-0013" num="0013">
<claim-text>One or more tangible processor-readable storage media (904) embodied with instructions for executing on one or more processors (902) and circuits of a device (124) a process (800) comprising:
<claim-text>receiving (802) a payload (104) containing a sealed container (110), one or more provisioning code segments (108) located outside the sealed container (110), and one or more policies (106) located outside the sealed contained, the one or more policies (106) being based on the one or more provisioning code segments (108) and corresponding to the sealed container (110);<!-- EPO <DP n="24"> --></claim-text>
<claim-text>generating (804) one or more measurements of the one or more provisioning code segments (108) based on the one or more policies (106);</claim-text>
<claim-text>executing the one or more provisioning code segments (108) located outside the sealed container (110) by the device (124) to generate an output; and</claim-text>
<claim-text>unsealing (808), at a trusted platform module (TPM) (120) of a trusted computing manager (126) of the device (124), the sealed container (110) for the device (124) responsive to determining (806) by the TPM (120) that the generated one or more measurements satisfy the one or more policies (106) based on an output of execution by the one or more provisioning code segments (108), satisfaction of the one or more policies (106) confirming integrity of the device (124).</claim-text></claim-text></claim>
<claim id="c-en-01-0014" num="0014">
<claim-text>The one or more tangible processor-readable storage media (904) of claim 13 wherein the sealed container (110) and the one or more policies (1060) are protected by a hash value and hash algorithm, the hash value being encrypted using a public key associated with a private key stored in the trusted platform module (TPM) (120) of the device, the process further comprising:
<claim-text>decrypting (504) the hash value using the private key stored on the TPM (120) and associated with the public key used to encrypt the hash value;</claim-text>
<claim-text>hashing (506) the one or more policies (106) and the sealed container (110) to generate a new hash value; and</claim-text>
<claim-text>comparing (508) the hash value with the new hash value to determine integrity of the sealed container (110) and the one or more policies (106).</claim-text></claim-text></claim>
<claim id="c-en-01-0015" num="0015">
<claim-text>The one or more tangible processor-readable storage media (904) of claim 13. wherein the sealed container (110) and the one or more provisioning code segments (108) are encrypted using a public key associated with a private key stored in the trusted platform module (TPM) (120) of the device (124), the process further comprising:<br/>
decrypting (604) the sealed container (110) and the one or more provisioning code segments (108) using the private key stored in the TPM (120).</claim-text></claim>
</claims>
<claims id="claims02" lang="de"><!-- EPO <DP n="25"> -->
<claim id="c-de-01-0001" num="0001">
<claim-text>Vorrichtung (124), umfassend:
<claim-text>einen oder mehrere Prozessoren (902);</claim-text>
<claim-text>eine Nutzlastschnittstelle (128), die durch den einen oder die mehreren Prozessoren (902) ausführbar ist, um eine Nutzlast (104) zu empfangen, die einen verplombten Container (110), ein oder mehrere Provisioning-Code-Segmente (108) außerhalb des verplombten Containers (110) und eine oder mehrere sich außerhalb des verplombten Containers (110) befindende Richtlinien (106) enthält, wobei die eine oder die mehreren Richtlinien (106) auf dem einen oder den mehreren Provisioning-Code-Segmenten (108) basieren und mit dem verplombten Container (110) übereinstimmen; und</claim-text>
<claim-text>einen Trusted-Computing-Manager (126), der von dem einen oder den mehreren Prozessoren (902) ausführbar ist, um:<br/>
eine oder mehrere Messungen des einen oder der mehreren Provisioning-Code-Segmente (108) gemäß der einen oder den mehreren Richtlinien (106) zu generieren (804), um basierend auf der einen oder den mehreren Messungen und einer Ausgabe einer Ausführung des einen oder der mehreren Provisioning-Code-Segmente (108) zu bestimmen (806), ob die eine oder die mehreren generierten Messungen die eine oder die mehreren Richtlinien (106) erfüllen, wobei die Ausführung des einen oder der mehreren sich außerhalb des verplombten Containers befindenden Provisioning-Code-Segmente durch die Vorrichtung (124) die Ausgabe generiert; und den verplombten Container (110) als Reaktion auf ein Bestimmen, dass die eine oder die mehreren generierten Messungen und die Ausgabe der Ausführung die eine oder die mehreren in der Nutzlast (104) empfangenen Richtlinien (106) erfüllen, an einem Trusted-Plattform-Modul (TPM) (120) des Trusted-Computing-Managers (126) zu öffnen (808), wobei eine Erfüllung der einen oder der mehreren Richtlinien (106) eine Integrität der Vorrichtung (124) bestätigt.</claim-text></claim-text></claim>
<claim id="c-de-01-0002" num="0002">
<claim-text>Vorrichtung (124) nach Anspruch 1, wobei der verplombte Container (110) und die eine oder die mehreren Richtlinien (106) durch einen Hash-Wert und einen Hash-Algorithmus geschützt sind, wobei der Hash-Wert unter Verwendung eines öffentlichen Schlüssels, der mit einem privaten Schlüssel verbunden ist, der in dem Trusted-Plattform-Modul<!-- EPO <DP n="26"> --> (TPM) (120) der Vorrichtung (124) gespeichert ist, verschlüsselt ist, wobei der Trusted-Computing-Manager (126) weiter ausführbar ist, um den Hash-Wert unter Verwendung des privaten Schlüssels, der auf dem TPM (120) gespeichert ist und mit dem öffentlichen Schlüssel verbunden ist, der verwendet wird, um den Hash-Wert zu verschlüsseln, zu entschlüsseln, die eine oder die mehreren Richtlinien (106) und den verplombten Container (110) zu hashen, um einen neuen Hash-Wert zu generieren; den Hash-Wert mit dem neuen Hash-Wert zu vergleichen, um eine Integrität des verplombten Containers (110) und der einen oder der mehreren Richtlinien (106) zu bestimmen.</claim-text></claim>
<claim id="c-de-01-0003" num="0003">
<claim-text>Vorrichtung (124) nach Anspruch 1, wobei der verplombte Container (110) und das eine oder die mehreren Provisioning-Code-Segmente unter Verwendung eines öffentlichen Schlüssels, der mit einem in dem Trusted-Plattform-Modul (TPM) (120) gespeicherten privaten Schlüssel verbunden ist, verschlüsselt werden, wobei der Trusted-Computing-Manager (126) weiter ausführbar ist, um den verplombten Container (110) und das eine oder die mehreren Provisioning-Code-Segmente unter Verwendung des in dem TPM (120) gespeicherten privaten Schlüssels zu entschlüsseln.</claim-text></claim>
<claim id="c-de-01-0004" num="0004">
<claim-text>Vorrichtung (124) nach Anspruch 1, wobei das eine oder die mehreren Provisioning-Code-Segmente (108) aktive Richtlinien (410) sind, die von der Vorrichtung (124) ausführbar sind, um die eine oder die mehreren Richtlinien (106) zu erfüllen.</claim-text></claim>
<claim id="c-de-01-0005" num="0005">
<claim-text>Vorrichtung (124) nach Anspruch 1, wobei der Trusted-Computing-Manager ein Firmware-basiertes Trusted-Plattform-Modul (TPM) (120) einschließt, das in einer Trusted-Execution-Umgebung (TEE) (322) der Vorrichtung (124) ausgeführt wird.</claim-text></claim>
<claim id="c-de-01-0006" num="0006">
<claim-text>Vorrichtung (124) nach Anspruch 1, wobei die eine oder die mehreren Richtlinien (106) weiter auf einer oder mehreren geplanten Messungen von auf der Vorrichtung (124) ausführbarem Code basieren, wobei der auf der Vorrichtung (124) ausführbare Code vor dem Empfangen der Nutzlast (104) auf der Vorrichtung (124) gespeichert wird.<!-- EPO <DP n="27"> --></claim-text></claim>
<claim id="c-de-01-0007" num="0007">
<claim-text>Verfahren (880) zum Bestätigen einer Integrität einer Vorrichtung (124), umfassend:
<claim-text>Empfangen (802), an der Vorrichtung (124), einer Nutzlast (104), die einen verplombten Container (110), ein oder mehrere sich außerhalb des verplombten Containers (110) befindende Provisioning-Code-Segmente (108) und eine oder mehrere sich außerhalb des verplombten Containers (110) befindende Richtlinien (106) enthält, wobei die eine oder die mehreren Richtlinien (106) auf dem einen oder den mehreren Provisioning-Code-Segmenten (108) basieren und mit dem verplombten Container (110) übereinstimmen;</claim-text>
<claim-text>Generieren (804), an der Vorrichtung (124), einer oder mehrerer Messungen des einen oder der mehreren Provisioning-Code-Segmente (108) basierend auf der einen oder den mehreren Richtlinien (106);</claim-text>
<claim-text>Ausführen des einen oder der mehreren sich außerhalb des verplombten Containers (110) befindenden Provisioning-Code-Segmente (108) durch die Vorrichtung (124), um eine Ausgabe zu generieren; und</claim-text>
<claim-text>Öffnen (808), an einem Trusted-Plattform-Modul (TPM) (120) eines Trusted-Computing-Managers (126) der Vorrichtung (124), des verplombten Containers (110) für die Vorrichtung (124) als Reaktion auf ein Bestimmen (806), dass die eine oder die mehreren generierten Messungen und die generierte Ausgabe die eine oder die mehreren Richtlinien (106) erfüllen, wobei die Erfüllung der einen oder der mehreren Richtlinien (106) eine Integrität der Vorrichtung (124) bestätigt.</claim-text></claim-text></claim>
<claim id="c-de-01-0008" num="0008">
<claim-text>Verfahren (800) nach Anspruch 7, wobei der verplombte Container (110) und die eine oder die mehreren Richtlinien (106) durch einen Hash-Wert und einen Hash-Algorithmus geschützt werden, wobei der Hash-Wert unter Verwendung eines öffentlichen Schlüssels, der mit einem privaten Schlüssel verbunden ist, der in dem Trusted-Plattform-Modul (TPM) (120) der Vorrichtung (124) gespeichert ist, verschlüsselt wird, wobei das Verfahren (800) weiter umfasst:
<claim-text>Entschlüsseln (504) des Hash-Werts unter Verwendung des privaten Schlüssels, der auf dem TPM (120) gespeichert ist und mit dem öffentlichen Schlüssel, der verwendet wird, um den Hash-Wert zu verschlüsseln, verbunden ist;</claim-text>
<claim-text>Hashen (506) der einen oder der mehreren Richtlinien (106) und des verplombten Containers (110), um einen neuen Hash-Wert zu generieren; und<!-- EPO <DP n="28"> --></claim-text>
<claim-text>Vergleichen (508) des Hash-Werts mit dem neuen Hash-Wert, um eine Integrität des verplombten Containers (110) und der einen oder der mehreren Richtlinien (106) zu bestimmen.</claim-text></claim-text></claim>
<claim id="c-de-01-0009" num="0009">
<claim-text>Verfahren (800) nach Anspruch 7, wobei der verplombte Container (110) und das eine oder die mehreren Provisioning-Code-Segmente (108) unter Verwendung eines öffentlichen Schlüssels, der mit einem in dem Trusted-Plattform-Modul (TPM) (120) der Vorrichtung (124) gespeicherten privaten Schlüssel verbunden ist, verschlüsselt werden, wobei das Verfahren (800) weiter umfasst:<br/>
Entschlüsseln (604) des verplombten Containers (110) und des einen oder der mehreren Provisioning-Code-Segmente (108) unter Verwendung des in dem TPM (120) gespeicherten privaten Schlüssels.</claim-text></claim>
<claim id="c-de-01-0010" num="0010">
<claim-text>Verfahren (800) nach Anspruch 8, wobei das eine oder die mehreren Provisioning-Code-Segmente (108) aktive Richtlinien (410) sind, die von der Vorrichtung (124) ausführbar sind, um die eine oder die mehreren Richtlinien (106) zu erfüllen.</claim-text></claim>
<claim id="c-de-01-0011" num="0011">
<claim-text>Verfahren (800) nach Anspruch 7, wobei die Vorrichtung (124) ein Firmware-basiertes Plattform-Modul (TPM) (120) einschließt, das in einer Trusted-Execution-Umgebung (322) der Vorrichtung (124) ausgeführt wird.</claim-text></claim>
<claim id="c-de-01-0012" num="0012">
<claim-text>Verfahren (800) nach Anspruch 7, wobei die eine oder die mehreren Richtlinien (106) weiter auf einer oder mehreren geplanten Messungen von auf der Vorrichtung (124) ausführbarem Code basieren, wobei der auf der Vorrichtung (124) ausführbare Code vor dem Empfangen der Nutzlast (104) auf der Vorrichtung gespeichert wird.</claim-text></claim>
<claim id="c-de-01-0013" num="0013">
<claim-text>Ein oder mehrere materielle prozessorlesbare Speichermedien (904), enthaltend Anweisungen zum Ausführen, auf einem oder mehreren Prozessoren (902) und Schaltkreisen einer Vorrichtung (124), eines Prozesses (800), umfassend:
<claim-text>Empfangen (802) einer Nutzlast (104), die einen verplombten Container (110), ein oder mehrere sich außerhalb des verplombten Containers (110) befindende Provisioning-Code-Segmente (108) und eine oder mehrere sich außerhalb des verplombten Containers<!-- EPO <DP n="29"> --> befindende Richtlinien (106) enthält, wobei die eine oder die mehreren Richtlinien (106) auf dem einen oder den mehreren Provisioning-Code-Segmenten (108) basieren und mit dem verplombten Container (110) übereinstimmen;</claim-text>
<claim-text>Generieren (804) einer oder mehrerer Messungen des einen oder der mehreren Provisioning-Code-Segmente (108) basierend auf der einen oder den mehreren Richtlinien (106);</claim-text>
<claim-text>Ausführen des einen oder der mehreren sich außerhalb des verplombten Containers (110) befindenden Provisioning-Code-Segmente (108) durch die Vorrichtung (124), um eine Ausgabe zu generieren; und</claim-text>
<claim-text>Öffnen (808), an einem Trusted-Plattform-Modul (TPM) (120) eines Trusted-Computing-Managers (126) der Vorrichtung (124), des verplombten Containers (110) für die Vorrichtung (124) als Reaktion auf ein Bestimmen (806) durch das TPM (120), dass die eine oder die mehreren generierten Messungen die eine oder die mehreren Richtlinien (106) erfüllen, basierend auf einer Ausgabe einer Ausführung durch das eine oder die mehreren Provisioning-Code-Segmente (108), wobei die Erfüllung der einen oder der mehreren Richtlinien (106) eine Integrität der Vorrichtung (124) bestätigt.</claim-text></claim-text></claim>
<claim id="c-de-01-0014" num="0014">
<claim-text>Das eine oder die mehreren materiellen prozessorlesbaren Speichermedien (904) nach Anspruch 13, wobei der verplombte Container (110) und die eine oder die mehreren Richtlinien (1060) durch einen Hash-Wert und einen Hash-Algorithmus geschützt sind, wobei der Hash-Wert unter Verwendung eines öffentlichen Schlüssels, der mit einem privaten Schlüssel verbunden ist, der in dem Trusted-Plattform-Modul (TPM) (120) der Vorrichtung gespeichert ist, verschlüsselt ist, wobei der Prozess weiter umfasst:
<claim-text>Entschlüsseln (504) des Hash-Werts unter Verwendung des privaten Schlüssels, der auf dem TPM (120) gespeichert ist und mit dem öffentlichen Schlüssel, der verwendet wird, um den Hash-Wert zu verschlüsseln, verbunden ist;</claim-text>
<claim-text>Hashen (506) der einen oder der mehreren Richtlinien (106) und des verplombten Containers (110), um einen neuen Hash-Wert zu generieren; und</claim-text>
<claim-text>Vergleichen (508) des Hash-Werts mit dem neuen Hash-Wert, um eine Integrität des verplombten Containers (110) und der einen oder der mehreren Richtlinien (106) zu bestimmen.</claim-text><!-- EPO <DP n="30"> --></claim-text></claim>
<claim id="c-de-01-0015" num="0015">
<claim-text>Das eine oder die mehreren materiellen prozessorlesbaren Speichermedien (904) nach Anspruch 13, wobei der verplombte Container (110) und das eine oder die mehreren Provisioning-Code-Segmente (108) unter Verwendung eines öffentlichen Schlüssels, der mit einem privaten Schlüssel verbunden ist, der in dem Trusted-Plattform-Modul (TPM) (120) der Vorrichtung (124) gespeichert ist, verschlüsselt werden, wobei der Prozess weiter umfasst:<br/>
Entschlüsseln (604) des verplombten Containers (110) und des einen oder der mehreren Provisioning-Code-Segmente (108) unter Verwendung des in dem TPM (120) gespeicherten privaten Schlüssels.</claim-text></claim>
</claims>
<claims id="claims03" lang="fr"><!-- EPO <DP n="31"> -->
<claim id="c-fr-01-0001" num="0001">
<claim-text>Dispositif (124) comprenant :
<claim-text>un ou plusieurs processeurs (902) ;</claim-text>
<claim-text>une interface de charge utile (128) pouvant être exécutée par les un ou plusieurs processeurs (902) pour recevoir une charge utile (104) contenant un récipient scellé (110), un ou plusieurs segments de code d'approvisionnement (108) à l'extérieur du récipient scellé (110) et une ou plusieurs politiques (106) situées à l'extérieur du récipient scellé (110), les une ou plusieurs politiques (106) étant basées sur les un ou plusieurs segments de code d'approvisionnement (108) et correspondant au récipient scellé (110) ; et</claim-text>
<claim-text>un gestionnaire informatique de confiance (126) pouvant être exécuté par les un ou plusieurs processeurs (902) :<br/>
pour générer (804) une ou plusieurs mesures des un ou plusieurs segments de code d'approvisionnement (108) selon les une ou plusieurs politiques (106), pour déterminer (806) si les une ou plusieurs mesures générées satisfont les une ou plusieurs politiques (106) sur la base des une ou plusieurs mesures et d'une sortie d'exécution des un ou plusieurs segments de code d'approvisionnement (108), dans lequel l'exécution des un ou plusieurs segments de code d'approvisionnement situés à l'extérieur du récipient scellé par le dispositif (124) génère la sortie; et pour desceller (808), au niveau d'un module de plate-forme de confiance (TPM) (120) du gestionnaire informatique de confiance (126), le récipient scellé (110) à la suite de la détermination que les une ou plusieurs mesures générées et la sortie d'exécution satisfont les une ou plusieurs politiques (106) reçues dans la charge utile (106), la satisfaction des une ou plusieurs politiques (106) confirmant l'intégrité du dispositif (124).</claim-text></claim-text></claim>
<claim id="c-fr-01-0002" num="0002">
<claim-text>Dispositif (124) selon la revendication 1, dans lequel le récipient scellé (110) et les une ou plusieurs politiques (106) sont protégés par une valeur de hachage et un algorithme de hachage, la valeur de hachage étant cryptée à l'aide d'une clé publique associée à une clé privée stockée dans le module de plate-forme de confiance (TPM) (120) du dispositif (124), le gestionnaire informatique de confiance (126) pouvant en outre être exécuté pour décrypter la valeur de hachage à l'aide de la clé privée stockée sur le module TPM (120) et associée à la clé publique utilisée pour crypter la valeur de hachage, les une<!-- EPO <DP n="32"> --> ou plusieurs politiques (106) et le récipient scellé (110) pour générer une nouvelle valeur de hachage ; pour comparer la valeur de hachage avec la nouvelle valeur de hachage pour déterminer l'intégrité du récipient scellé (110) et des une ou plusieurs politiques (106).</claim-text></claim>
<claim id="c-fr-01-0003" num="0003">
<claim-text>Dispositif (124) selon la revendication 1, dans lequel le récipient scellé (110) et les un ou plusieurs segments de code d'approvisionnement sont cryptés à l'aide d'une clé publique associée à une clé privée stockée dans le module de plate-forme de confiance (TPM) (120), le gestionnaire informatique de confiance (126) pouvant en outre être exécuté pour décrypter le récipient scellé (110) et les un ou plusieurs segments de code d'approvisionnement à l'aide de la clé privée stockée dans le module TPM (120).</claim-text></claim>
<claim id="c-fr-01-0004" num="0004">
<claim-text>Dispositif (124) selon la revendication 1, dans lequel les un ou plusieurs segments de code d'approvisionnement (108) sont des politiques actives (410) pouvant être exécutées par le dispositif (124) pour satisfaire les une ou plusieurs politiques (106).</claim-text></claim>
<claim id="c-fr-01-0005" num="0005">
<claim-text>Dispositif (124) selon la revendication 1, dans lequel le gestionnaire informatique de confiance inclut un module de plate-forme de confiance faisant appel à un micrologiciel (TPM) (120) exécuté dans un environnement d'exécution de confiance (TEE) (322) du dispositif (124).</claim-text></claim>
<claim id="c-fr-01-0006" num="0006">
<claim-text>Dispositif (124) selon la revendication 1, dans lequel les une ou plusieurs politiques (106) sont en outre basées sur une ou plusieurs mesures projetées d'un code pouvant être exécuté sur le dispositif (124), le code pouvant être exécuté sur le dispositif (124) étant stocké sur le dispositif (124) avant de recevoir la charge utile (104).</claim-text></claim>
<claim id="c-fr-01-0007" num="0007">
<claim-text>Procédé (880) de confirmation de l'intégrité d'un dispositif (124) comprenant :
<claim-text>la réception (802), au niveau du dispositif (124), d'une charge utile (104) contenant un récipient scellé (110), un ou plusieurs segments de code d'approvisionnement (108) situés à l'extérieur du récipient scellé (110) et une ou plusieurs politiques (106) situées à l'extérieur du récipient scellé (110), les une ou plusieurs politiques (106) étant basées sur les un ou plusieurs segments de code d'approvisionnement (108) et correspondant au récipient scellé (110) ;<!-- EPO <DP n="33"> --></claim-text>
<claim-text>la génération (804), au niveau du dispositif (124), d'une ou de plusieurs mesures des un ou plusieurs segments de code d'approvisionnement (108) sur la base des une ou plusieurs politiques (106) ;</claim-text>
<claim-text>l'exécution des un ou plusieurs segments de code d'approvisionnement (108) situés à l'extérieur du récipient scellé (110) par le dispositif (124) pour générer une sortie ; et</claim-text>
<claim-text>le descellement (808), au niveau d'un module de plate-forme de confiance (TPM) (120) d'un gestionnaire informatique de confiance (126) du dispositif (124), du récipient scellé (110) pour le dispositif (124) à la suite de la détermination (806) que les une ou plusieurs mesures générées et la sortie générée satisfont les une ou plusieurs politiques (106), la satisfaction des une ou plusieurs politiques (106) confirmant l'intégrité du dispositif (124).</claim-text></claim-text></claim>
<claim id="c-fr-01-0008" num="0008">
<claim-text>Procédé (800) selon la revendication 7, dans lequel le récipient scellé (110) et les une ou plusieurs politiques (106) sont protégés par une valeur de hachage et un algorithme de hachage, la valeur de hachage étant cryptée à l'aide d'une clé publique associée à une clé privée stockée dans le module de plate-forme de confiance (TPM) (120) du dispositif (124), le procédé (800) comprenant en outre :
<claim-text>le décryptage (504) de la valeur de hachage à l'aide de la clé privée stockée sur le module TPM (120) et associée à la clé publique utilisée pour crypter la valeur de hachage ;</claim-text>
<claim-text>le hachage (506) des une ou plusieurs politiques (106) et du récipient scellé (110) pour générer une nouvelle valeur de hachage ; et</claim-text>
<claim-text>la comparaison (508) de la valeur de hachage avec la nouvelle valeur de hachage pour déterminer l'intégrité du récipient scellé (110) et des une ou plusieurs politiques (106).</claim-text></claim-text></claim>
<claim id="c-fr-01-0009" num="0009">
<claim-text>Procédé (800) selon la revendication 7, dans lequel le récipient scellé (110) et les un ou plusieurs segments de code d'approvisionnement (108) sont cryptés à l'aide d'une clé publique associée à une clé privée stockée dans le module de plate-forme de confiance (TPM) (120) du dispositif (124), le procédé (800) comprenant en outre :<br/>
le décryptage (604) du récipient scellé (110) et des un ou plusieurs segments de code d'approvisionnement (108) à l'aide de la clé privée stockée dans le module TPM (120).<!-- EPO <DP n="34"> --></claim-text></claim>
<claim id="c-fr-01-0010" num="0010">
<claim-text>Procédé (800) selon la revendication 8, dans lequel les un ou plusieurs segments de code d'approvisionnement (108) sont des politiques actives (410) pouvant être exécutées par le dispositif (124) pour satisfaire les une ou plusieurs politiques (106).</claim-text></claim>
<claim id="c-fr-01-0011" num="0011">
<claim-text>Procédé (800) selon la revendication 7, dans lequel le dispositif (124) inclut un module de plate-forme de confiance faisant appel à un micrologiciel (TPM) (120) exécuté dans un environnement d'exécution de confiance (322) du dispositif (124).</claim-text></claim>
<claim id="c-fr-01-0012" num="0012">
<claim-text>Procédé (800) selon la revendication 7, dans lequel les une ou plusieurs politiques (106) sont en outre basées sur une ou plusieurs mesures projetées d'un code pouvant être exécuté sur le dispositif (124), le code pouvant être exécuté sur le dispositif (124) étant stocké sur le dispositif avant de recevoir la charge utile (104).</claim-text></claim>
<claim id="c-fr-01-0013" num="0013">
<claim-text>Un ou plusieurs supports de stockage tangibles lisibles par un processeur (904) intégrés avec des instructions pour une exécution sur un ou plusieurs processeurs (902) et des circuits d'un dispositif (124), d'un processus (800) comprenant :
<claim-text>la réception (802) d'une charge utile (104) contenant un récipient scellé (110), un ou plusieurs segments de code d'approvisionnement (108) situés à l'extérieur du récipient scellé (110) et une ou plusieurs politiques (106) situées à l'extérieur du récipient scellé, les une ou plusieurs politiques (106) étant basées sur les un ou plusieurs segments de code d'approvisionnement (108) et correspondant au récipient scellé (110) ;</claim-text>
<claim-text>la génération (804) d'une ou de plusieurs mesures des un ou plusieurs segments de code d'approvisionnement (108) sur la base des une ou plusieurs politiques (106) ;</claim-text>
<claim-text>l'exécution des un ou plusieurs segments de code d'approvisionnement (108) situés à l'extérieur du récipient scellé (110) par le dispositif (124) pour générer une sortie ; et</claim-text>
<claim-text>le descellement (808), au niveau d'un module de plate-forme de confiance (TPM) (120) d'un gestionnaire informatique de confiance (126) du dispositif (124), du récipient scellé (110) pour le dispositif (124) à la suite de la détermination (806) par le module TPM (120) que les une ou plusieurs mesures générées satisfont les une ou plusieurs politiques (106) sur la base d'une sortie d'exécution par les un ou plusieurs segments de code d'approvisionnement (108), la satisfaction des une ou plusieurs politiques (106) confirmant l'intégrité du dispositif (124).</claim-text><!-- EPO <DP n="35"> --></claim-text></claim>
<claim id="c-fr-01-0014" num="0014">
<claim-text>Un ou plusieurs supports de stockage tangibles lisibles par un processeur (904) selon la revendication 13, dans lequel le récipient scellé (110) et les une ou plusieurs politiques (1060) sont protégés par une valeur de hachage et un algorithme de hachage, la valeur de hachage étant cryptée à l'aide d'une clé publique associée à une clé privée stockée dans le module de plate-forme de confiance (TPM) (120) du dispositif, le processus comprenant en outre :
<claim-text>le décryptage (504) de la valeur de hachage à l'aide de la clé privée stockée sur le module TPM (120) et associée à la clé publique utilisée pour crypter la valeur de hachage ;</claim-text>
<claim-text>le hachage (506) des une ou plusieurs politiques (106) et du récipient scellé (110) pour générer une nouvelle valeur de hachage ; et</claim-text>
<claim-text>la comparaison (508) de la valeur de hachage avec la nouvelle valeur de hachage pour déterminer l'intégrité du récipient scellé (110) et des une ou plusieurs politiques (106).</claim-text></claim-text></claim>
<claim id="c-fr-01-0015" num="0015">
<claim-text>Un ou plusieurs supports de stockage tangibles lisibles par un processeur (904) selon la revendication 13, dans lequel le récipient scellé (110) et les un ou plusieurs segments de code d'approvisionnement (108) sont cryptés à l'aide d'une clé publique associée à une clé privée stockée dans le module de plate-forme de confiance (TPM) (120) du dispositif (124), le processus comprenant en outre :
<claim-text>le décryptage (604) du récipient scellé (110) et des un ou plusieurs segments de code d'approvisionnement (108) à l'aide de la clé privée stockée dans le module TPM (120).</claim-text></claim-text></claim>
</claims>
<drawings id="draw" lang="en"><!-- EPO <DP n="36"> -->
<figure id="f0001" num="1"><img id="if0001" file="imgf0001.tif" wi="147" he="233" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="37"> -->
<figure id="f0002" num="2"><img id="if0002" file="imgf0002.tif" wi="139" he="233" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="38"> -->
<figure id="f0003" num="3"><img id="if0003" file="imgf0003.tif" wi="140" he="233" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="39"> -->
<figure id="f0004" num="4"><img id="if0004" file="imgf0004.tif" wi="153" he="233" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="40"> -->
<figure id="f0005" num="5"><img id="if0005" file="imgf0005.tif" wi="151" he="233" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="41"> -->
<figure id="f0006" num="6"><img id="if0006" file="imgf0006.tif" wi="154" he="233" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="42"> -->
<figure id="f0007" num="7"><img id="if0007" file="imgf0007.tif" wi="152" he="233" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="43"> -->
<figure id="f0008" num="8"><img id="if0008" file="imgf0008.tif" wi="154" he="233" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="44"> -->
<figure id="f0009" num="9"><img id="if0009" file="imgf0009.tif" wi="150" he="227" img-content="drawing" img-format="tif"/></figure>
</drawings>
<ep-reference-list id="ref-list">
<heading id="ref-h0001"><b>REFERENCES CITED IN THE DESCRIPTION</b></heading>
<p id="ref-p0001" num=""><i>This list of references cited by the applicant is for the reader's convenience only. It does not form part of the European patent document. Even though great care has been taken in compiling the references, errors or omissions cannot be excluded and the EPO disclaims all liability in this regard.</i></p>
<heading id="ref-h0002"><b>Patent documents cited in the description</b></heading>
<p id="ref-p0002" num="">
<ul id="ref-ul0001" list-style="bullet">
<li><patcit id="ref-pcit0001" dnum="US2011179268A1"><document-id><country>US</country><doc-number>2011179268</doc-number><kind>A1</kind></document-id></patcit><crossref idref="pcit0001">[0001]</crossref></li>
<li><patcit id="ref-pcit0002" dnum="US2016054989A1"><document-id><country>US</country><doc-number>2016054989</doc-number><kind>A1</kind></document-id></patcit><crossref idref="pcit0002">[0001]</crossref></li>
<li><patcit id="ref-pcit0003" dnum="US2004127196A1"><document-id><country>US</country><doc-number>2004127196</doc-number><kind>A1</kind></document-id></patcit><crossref idref="pcit0003">[0001]</crossref></li>
</ul></p>
</ep-reference-list>
</ep-patent-document>
