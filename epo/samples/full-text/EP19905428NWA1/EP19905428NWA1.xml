<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE ep-patent-document PUBLIC "-//EPO//EP PATENT DOCUMENT 1.5.1//EN" "ep-patent-document-v1-5-1.dtd">
<!-- This XML data has been generated under the supervision of the European Patent Office -->
<ep-patent-document id="EP19905428A1" file="EP19905428NWA1.xml" lang="en" country="EP" doc-number="3889870" kind="A1" date-publ="20211006" status="n" dtd-version="ep-patent-document-v1-5-1">
<SDOBI lang="en"><B000><eptags><B001EP>ATBECHDEDKESFRGBGRITLILUNLSEMCPTIESILTLVFIROMKCYALTRBGCZEEHUPLSKBAHRIS..MTNORSMESMMAKHTNMD..........</B001EP><B005EP>J</B005EP><B007EP>BDM Ver 2.0.12 (4th of August) -  1100000/0</B007EP></eptags></B000><B100><B110>3889870</B110><B120><B121>EUROPEAN PATENT APPLICATION</B121><B121EP>published in accordance with Art. 153(4) EPC</B121EP></B120><B130>A1</B130><B140><date>20211006</date></B140><B190>EP</B190></B100><B200><B210>19905428.9</B210><B220><date>20191120</date></B220><B240><B241><date>20210701</date></B241></B240><B250>zh</B250><B251EP>en</B251EP><B260>en</B260></B200><B300><B310>201811638611</B310><B320><date>20181229</date></B320><B330><ctry>CN</ctry></B330></B300><B400><B405><date>20211006</date><bnum>202140</bnum></B405><B430><date>20211006</date><bnum>202140</bnum></B430></B400><B500><B510EP><classification-ipcr sequence="1"><text>G06Q  20/40        20120101AFI20200703BHEP        </text></classification-ipcr></B510EP><B520EP><classifications-cpc><classification-cpc sequence="1"><text>G06Q  20/40        20130101 LI20200725BCEP        </text></classification-cpc><classification-cpc sequence="2"><text>H04L  29/08        20130101 LI20200725BCEP        </text></classification-cpc></classifications-cpc></B520EP><B540><B541>de</B541><B542>HINTERGRUNDARCHITEKTURVERFAHREN UND -SYSTEM ZUR AGGREGATIONSBEZAHLUNG, COMPUTERVORRICHTUNG UND SPEICHERMEDIUM</B542><B541>en</B541><B542>BACKGROUND ARCHITECTURE METHOD AND SYSTEM FOR AGGREGATION PAYMENT, COMPUTER DEVICE, AND STORAGE MEDIUM</B542><B541>fr</B541><B542>PROCÉDÉ ET SYSTÈME D'ARCHITECTURE D'ARRIÈRE-PLAN POUR PAIEMENT AVEC AGRÉGATION, DISPOSITIF INFORMATIQUE, ET SUPPORT DE STOCKAGE</B542></B540><B590><B598>1</B598></B590></B500><B700><B710><B711><snm>BIGO TECHNOLOGY PTE. LTD.</snm><iid>101885875</iid><irf>P599190EPPC/SY</irf><adr><str>15-31A, 30 Mapletree Business City 
Pasir Panjang Road</str><city>117440 Singapore</city><ctry>SG</ctry></adr></B711></B710><B720><B721><snm>HOU, Juncheng</snm><adr><str>5-13F, West Tower, Building C, 
No. 274 Xingtai Road, Shiqiao Street,
Panyu District</str><city>Guangzhou, Guangdong 511402</city><ctry>CN</ctry></adr></B721><B721><snm>YANG, Kaixing</snm><adr><str>5-13F, West Tower, Building C, 
No. 274 Xingtai Road, Shiqiao Street,
Panyu District</str><city>Guangzhou, Guangdong 511402</city><ctry>CN</ctry></adr></B721></B720><B740><B741><snm>Yang, Shu</snm><iid>101700162</iid><adr><str>Withers &amp; Rogers LLP 
2 London Bridge</str><city>London SE1 9RA</city><ctry>GB</ctry></adr></B741></B740></B700><B800><B840><ctry>AL</ctry><ctry>AT</ctry><ctry>BE</ctry><ctry>BG</ctry><ctry>CH</ctry><ctry>CY</ctry><ctry>CZ</ctry><ctry>DE</ctry><ctry>DK</ctry><ctry>EE</ctry><ctry>ES</ctry><ctry>FI</ctry><ctry>FR</ctry><ctry>GB</ctry><ctry>GR</ctry><ctry>HR</ctry><ctry>HU</ctry><ctry>IE</ctry><ctry>IS</ctry><ctry>IT</ctry><ctry>LI</ctry><ctry>LT</ctry><ctry>LU</ctry><ctry>LV</ctry><ctry>MC</ctry><ctry>MK</ctry><ctry>MT</ctry><ctry>NL</ctry><ctry>NO</ctry><ctry>PL</ctry><ctry>PT</ctry><ctry>RO</ctry><ctry>RS</ctry><ctry>SE</ctry><ctry>SI</ctry><ctry>SK</ctry><ctry>SM</ctry><ctry>TR</ctry></B840><B844EP><B845EP><ctry>BA</ctry></B845EP><B845EP><ctry>ME</ctry></B845EP></B844EP><B848EP><B849EP><ctry>KH</ctry></B849EP><B849EP><ctry>MA</ctry></B849EP><B849EP><ctry>MD</ctry></B849EP><B849EP><ctry>TN</ctry></B849EP></B848EP><B860><B861><dnum><anum>CN2019119788</anum></dnum><date>20191120</date></B861><B862>zh</B862></B860><B870><B871><dnum><pnum>WO2020134738</pnum></dnum><date>20200702</date><bnum>202027</bnum></B871></B870></B800></SDOBI>
<abstract id="abst" lang="en">
<p id="pa01" num="0001">A backend architecture method and system for aggregate payment, a computer device, and a storage medium are disclosed. The method includes: acquiring transaction information from a client, wherein the transaction information includes location information of the client; assigning, based on the location information, the transaction information to a transaction node that has jurisdiction over the location information, wherein the transaction node is a transaction center within a specified region in a distributed transaction system; matching, according to the transaction node, a channel gateway in a channel docking layer that pre-establishes a connection relationship with the transaction node, and sending a transaction request in the transaction information to a transaction object over a selected channel gateway such that the transaction object processes the transaction request; and acquiring a processing result from the transaction object, and transmitting information of the processing result to the client. According to the present disclosure, transaction data is processed by distributed transaction nodes, such that data processing for payment is faster. In addition, transaction centers deployed in a distributed fashion are independent of each other, thereby achieving strong data isolation, low node coupling, and strong system expandability.<img id="iaf01" file="imgaf001.tif" wi="78" he="77" img-content="drawing" img-format="tif"/></p>
</abstract>
<description id="desc" lang="en"><!-- EPO <DP n="1"> -->
<heading id="h0001"><b>TECHNICAL FIELD</b></heading>
<p id="p0001" num="0001">The present disclosure relates to the technical field of computer application, and in particular, relates to a backend architecture method and system for aggregate payment, a computer device, and a storage medium.</p>
<heading id="h0002"><b>BACKGROUND</b></heading>
<p id="p0002" num="0002">With the rapid development of the Internet of things and the Mobile Internet, the electronic payment industry has also been developing rapidly in recent years. Domestically, banks, UnionPay and other clearinghouses, third-party payment companies, and the like provide different types of mobile payment services implemented with different technologies. Moreover, due to the objective demand, the electronic payment technology has been applied in various fields. However, under this context, no unified standard and interface are provided for services from various parties, such that it is difficult to achieve compatibility between various payment tools and platforms. Globally, each country has its own channel providers and access control rules. For merchants with global businesses, the access cost and access efficiency are also greatly affected.</p>
<p id="p0003" num="0003">Only a few third-party payment channels are used in China. Generally, more than 90% of domestic online payment transactions can be covered by accessing WeChat or Alipay for merchants. Therefore, when accessing payment channels, most merchants are directly connected to third-party channels. However, payment processes over various payment channels (such as WeChat and Alipay) differ in detail, such that a plurality of sets of payment processes generally need to be supported at the backend. The domestic Internet industry is on the way to going abroad. There are many different payment channels with different processes overseas. If merchants directly connect to third-party payment channels using the conventional method, the merchants need to handle the complex task of maintaining the plurality of sets of payment processes.</p>
<heading id="h0003"><b>SUMMARY</b></heading>
<p id="p0004" num="0004">The present disclosure provides a backend architecture method and system for aggregate payment, a computer device, and a storage medium, to solve at least one of the aforementioned technical defects. The present disclosure can achieve high isolation, low node coupling, fast access, and high practicability and flexibility in a third-party payment process.</p>
<p id="p0005" num="0005">To achieve the above objective, the present disclosure provides a backend architecture method for aggregate payment. The method includes: acquiring transaction information from a client, wherein the transaction information includes location information of the client; assigning, based on the location information, the transaction information to a transaction node that has jurisdiction over the location information, wherein the transaction node is a transaction center<!-- EPO <DP n="2"> --> within a specified region in a distributed transaction system; matching, according to the transaction node, a channel gateway in a channel docking layer that pre-establishes a connection relationship with the transaction node, and sending a transaction request in the transaction information to a transaction object over a selected channel gateway such that the transaction object processes the transaction request; and acquiring a processing result from the transaction object, and transmitting information of the processing result to the client.</p>
<p id="p0006" num="0006">According to another aspect, the present disclosure provides a backend architecture system for aggregate payment. The system includes: an access frontend, configured to acquire transaction information from a client, wherein the transaction information includes location information of the client; a relay server, configured to assign, based on the location information, the transaction information to a transaction node that has jurisdiction over the location information, wherein the transaction node is a transaction center within a specified region in a distributed transaction system; and a transaction node, configured to match, according to the transaction node, a channel gateway in a channel docking layer that pre-establishes a connection relationship with the transaction node, send a transaction request in the transaction information to a transaction object over a selected channel gateway such that the transaction object processes the transaction request, acquire a processing result from the transaction object, and transmit information of the processing result to the client.</p>
<p id="p0007" num="0007">According to another aspect, the present disclosure provides a computer device. The computer device includes a memory and a processor. The memory stores at least one computer-readable instruction. The processor, when executing at least one computer-readable instruction, is caused to perform the backend architecture method for aggregate payment as described above.</p>
<p id="p0008" num="0008">According to another aspect, the present disclosure provides a storage medium storing at least one computer-readable instruction. The least one computer-readable instruction, when executed by one or more processors, causes the one or more processors to perform the backend architecture method for aggregate payment as described above.</p>
<p id="p0009" num="0009">The present disclosure achieves the following beneficial effects.</p>
<p id="p0010" num="0010">Based on the location information of the client in the transaction information, distributed processing is performed, such that data processing for payment is faster. Moreover, transaction centers deployed in a distributed fashion are independent of each other and use unified communication interfaces to connect with transaction objects, which shield differences in details of the payment processes of different channels, and provide a universal and unified payment access process for the clients. Therefore, to use all payment channels supported by the payment architecture, a merchant on the client side only needs to maintain one set of processes for interacting with the aggregate payment architecture, thus achieving strong data isolation, low node coupling, strong anti-attack capability, and low service coupling between clients. The aggregate payment architecture is more suitable for distributed deployment, and has high system availability and strong disaster tolerance. The unified scheduling interface makes the system highly expandable and reduces impact of functional iteration on online services.</p>
<heading id="h0004"><b>BRIEF DESCRIPTION OF THE DRAWINGS</b></heading>
<p id="p0011" num="0011">The foregoing and/or additional aspects of the present disclosure and advantages of the present disclosure<!-- EPO <DP n="3"> --> can become apparent and readily understandable from the following descriptions of the embodiments with reference to the accompanying drawings.
<ul id="ul0001" list-style="none" compact="compact">
<li><figref idref="f0001">FIG. 1</figref> is a flowchart of a backend architecture method for aggregate payment according to the present disclosure;</li>
<li><figref idref="f0002">FIG. 2</figref> is a flowchart of a method for authenticating transaction information according to the present disclosure;</li>
<li><figref idref="f0003">FIG. 3</figref> is a flowchart of a method for assigning transaction information to a transaction node according to the present disclosure;</li>
<li><figref idref="f0004">FIG. 4</figref> is a flowchart of a transaction requesting method of a transaction node according to the present disclosure;</li>
<li><figref idref="f0004">FIG. 5</figref> is a flowchart of a retry method of an asynchronous task queue according to the present disclosure;</li>
<li><figref idref="f0005">FIG. 6</figref> is an overall flowchart of aggregate payment according to the present disclosure;</li>
<li><figref idref="f0006">FIG. 7</figref> is a schematic diagram of a multilayer structure of aggregate payment according to the present disclosure;</li>
<li><figref idref="f0007">FIG. 8</figref> is a flowchart of receiving information by modules of aggregate payment according to the present disclosure; and</li>
<li><figref idref="f0008">FIG. 9</figref> is a block diagram of a basic structure of a computer device according to the present disclosure.</li>
</ul></p>
<heading id="h0005"><b>DETAILED DESCRIPTION</b></heading>
<p id="p0012" num="0012">Specifically, referring to <figref idref="f0001">FIG. 1</figref>, a backend architecture method for aggregate payment is provided in the present disclosure. Aggregate payment is relative to third-party payment. Unlike third-party payment, aggregate payment does not lie between merchants and banks, but serves as a channel between merchants and third-party payers. Aggregate payment does not involve settlement or transfer of funds, but merely performs the control of information flows and data flows in the payment link, and aggregates payment methods provided by different third-party payment institutions, to provide merchants with a unified interface for payment and settlement. Aggregate payment reduces the access difficulty and cost for merchants, improves the speed and efficiency of operation, and achieves better flexibility and convenience.</p>
<p id="p0013" num="0013">In the present disclosure, the backend architecture method for aggregate payment includes the following processes:</p>
<p id="p0014" num="0014">In S1000, transaction information from a client is acquired, wherein the transaction information includes location information of the client.</p>
<p id="p0015" num="0015">The client is actually a merchant terminal. There are a plurality of clients, and the clients are capable of sending request instructions at the same time for analysis. A request instruction is a related data message that records identity information of a client and request content. The data message is a field combination in an agreed format to facilitate information interaction. In order to distinguish different clients, the data message includes merchant number information that characterizes the identity of the client and service number information that characterizes a service type<!-- EPO <DP n="4"> --> of the request, and thus the identity information of the client sending the request and the request content can be confirmed.</p>
<p id="p0016" num="0016">The transaction information is related information that is sent by the client and that the client requests to be processed by a third party. The transaction information includes location information of the client.</p>
<p id="p0017" num="0017">In another embodiment, the transaction information further includes location information of a transaction object to which the transaction information is directed. In the present disclosure, the transaction object is a third party information requested by the transaction client to perform transaction processing, and the location information of the transaction object herein refers to location information of the third party. It may be understood that the third party is a payment platform. There are many payment platforms, such as famous banks, WeChat, Alipay and other financial platforms. These third-party platforms have corresponding server location information. The location information includes nationality and a specific region. By acquiring the location information of the transaction object, server location information of the transaction object can be acquired.</p>
<p id="p0018" num="0018">In S2000, the transaction information is assigned, based on the location information, to a transaction node that has jurisdiction over the location information, wherein the transaction node is a transaction center within a specified region in a distributed transaction system.</p>
<p id="p0019" num="0019">The transaction node is a core processing layer performing service processing. Creation of service orders and service processing logics are achieved at the core processing layer. In one embodiment, when the location information is the location information of the client, the transaction node is a transaction center within a specified region in the distributed transaction system. Since the clients may be distributed in various locations around the world, for quick responses to payment requests, a transaction node may be configured in any place around the world. Based on the acquired location information of the client, a transaction node having jurisdiction over the location information is selected for processing.</p>
<p id="p0020" num="0020">In another embodiment, the location information is the location information of the transaction object to which the transaction information is directed, i.e., the location information of the third-party transaction platform. The third-party transaction platform may be deployed at various locations around the world, and the aggregate payment clients of the present disclosure may also be distributed around the world. Therefore, in order to achieve rapid response to the payment request, a plurality of transaction nodes can be configured based on regional locations of the third-party transaction platform. The transaction nodes are independent and isolated from each other. When one of the transaction nodes is abnormal, normal service processing of other transaction nodes is not affected. Further, each transaction node has its own jurisdiction. A new request instruction can be assigned to a transaction node having corresponding jurisdiction for processing, by identifying location information of a transaction object and a service type that correspond to the new request instruction. However, in order to further improve the disaster tolerance of service processing, whether the corresponding transaction node is in an available state when the request instruction is assigned to the corresponding transaction node is determined. When the transaction node is determined to be in an unavailable state, the request instruction is assigned to another available transaction node to ensure the normal processing of the request instruction of the transaction information.</p>
<p id="p0021" num="0021">In S3000, a channel gateway is matched, according to the transaction node, in a channel docking layer that<!-- EPO <DP n="5"> --> pre-establishes a connection relationship with the transaction node, and a transaction request in the transaction information is sent to a transaction object over the selected channel gateway such that the transaction object processes the transaction request.</p>
<p id="p0022" num="0022">Once the transaction information is assigned to the transaction node, a channel gateway is matched, according to information of the transaction node, in a channel docking layer that has established a connection relationship with the transaction node. A plurality of different channel gateways are stored in the channel docking layer, and different channel gateways are connected to and communicate with different third-party transaction objects.</p>
<p id="p0023" num="0023">The channel gateways are connected to and communicate with transaction nodes by scheduling interfaces. In the present disclosure, the channel gateways can achieve the logic for interacting with the third-party transaction objects, and interaction details between different channels are shielded from an upstream node. In the present disclosure, the scheduling interfaces of the channel gateways are unified, to maintain a consistent transaction process that does not change due to changes of channel objects. Further, each channel in the channel gateway layer is logically independent and does not manipulate order data. Changes in one channel have little impact on other channels and the main process, such that fast access and iteration can be achieved. The unified scheduling interface also facilitate access to a new channel. The new channel can be accessed by simply building a corresponding channel gateway node. Specific differences and details of the interaction with a third-party transaction object are concealed in the channel gateway.</p>
<p id="p0024" num="0024">In the service process of payment, the channel gateways are application interfaces connecting to different third-party payment platforms. Different third-party payment platforms require different channel gateways, thus forming a channel gateway connection library, i.e., the channel docking layer. By identifying transaction objects in request instructions, different channel gateways can be matched from the channel gateway connection library for service processing.</p>
<p id="p0025" num="0025">In an embodiment, each channel gateway interacts with a third-party channel using a unified scheduling interface, interaction details between different channels are shielded from an upstream node, and the connection of each channel forms an independent sub-module. Therefore, when relevant service processing needs to be performed, a corresponding interface can be called directly. When a new channel is accessed, it is only necessary to build a channel gateway node that provides a standard and unified interface. Specific differences and details of docking with the third party are concealed in the channel gateway. In this way, an upper core service layer can call a unified interface and maintain a consistent transaction process that does not change with changes in channels; and further, each channel in the channel gateway is logically independent and does not manipulate order data. Changes in one channel have little impact on other channels and the main process, thereby achieving rapid access and iteration.</p>
<p id="p0026" num="0026">In S4000, a processing result from the transaction object is acquired, and information of the processing result is transmitted to the client.</p>
<p id="p0027" num="0027">In the present disclosure, when the transaction request in the transaction information is sent to the corresponding transaction object such that the transaction object processes the transaction request by calling the corresponding communication interface, the transaction result returned by the transaction object is acquired, and information of the transaction result is sent back to the client.<!-- EPO <DP n="6"> --></p>
<p id="p0028" num="0028">In the present disclosure, the data reception and assignment in processes S1000 and S2000 are performed in a service access layer. The service access layer includes an access frontend and a relay server. The access frontend receives the transaction information from the client, converts the transaction information into a protocol format recognizable by the backend, and completes tasks such as identity verification, authorization control, and traffic isolation. Afterwards, the relay server performs load balancing and task assignment, and sends, based on a distribution policy, the request information in the transaction information to a specified transaction node for processing. Transaction information monitoring and result information collection are performed by a payment node by calling a communication interface, wherein the payment node belongs to the core service layer. The channel gateways and the unified scheduling interfaces belong to the channel docking layer. The core service layer mainly includes a payment center, payment notification and asynchronous retry, payment monitoring, and the like. The payment center completes the management and recording of payment orders, and calls services of the channel gateways in the next layer. The asynchronous retry is responsible for the replay of asynchronous tasks to ensure the completion of orders. The payment monitoring is responsible for the monitoring and statistics of payment orders. The payment notification is responsible for asynchronous notification to the client in response to the order being completed. The channel docking layer is mainly responsible for connection with services provided by the third-party objects. The connection of each channel forms an independent sub-module, which facilitates channel management and rapid iteration.</p>
<p id="p0029" num="0029">In the present disclosure, distributed processing is performed based on the location information of the transaction object in the transaction information, such that data processing for payment is faster. Moreover, transaction centers deployed in a distributed fashion are independent of each other and use unified communication interfaces to connect with transaction objects, to shield differences in details of the payment processes in different channels. Therefore, a universal and unified payment access process is provided for the clients. To use all payment channels supported by the payment architecture, a merchant on the client side only needs to maintain one set of processes for interacting with the aggregate payment architecture, thus achieving strong data isolation, low node coupling, strong anti-attack capability, and low service coupling between clients. The aggregate payment architecture is more suitable for distributed deployment, and has high system availability and strong disaster tolerance. The unified scheduling interface makes the system highly expandable and reduces the impact of the functional iteration on online services.</p>
<p id="p0030" num="0030">In an embodiment, referring to <figref idref="f0002">FIG. 2</figref>, in response to acquiring transaction information from a client and before assigning, based on the location information, the transaction information to a transaction node that has jurisdiction over the location information, the method further includes the following processes.</p>
<p id="p0031" num="0031">In S1100, verification information of the transaction information is verified, wherein the verification information is set using an encryption communication protocol.</p>
<p id="p0032" num="0032">In the present disclosure, the transaction information initiated by the client is provided with verification information using an encryption communication protocol, to ensure that the communication is not tampered with by a third party. In response to receiving the transaction information, the access frontend verifies the verification information. During data interaction, the client and the access frontend adopt a uniform information verification method, such as encrypting data using a public key and a private key. In response to receiving the data, the access frontend decrypts the<!-- EPO <DP n="7"> --> data on the basis of the rule predetermined by the client and the access frontend, thereby ensuring that the data is not easily tampered with in the process of data interaction between the client and the access frontend, and making data transmission more secure.</p>
<p id="p0033" num="0033">Further, as the forefront of service reception, the access frontend can further perform digital signature verification on message data of the received transaction information to ensure that the message of the request is from an authorized merchant and is not tampered with or forged. Then, only the transaction information passing the signature verification can be forwarded subsequently. Upon detecting that the acquired transaction data is tampered with or the acquired transaction data is in other abnormal conditions, the access frontend does not perform subsequent processing, and transmits the detected result information to the client to indicate that the currently transmitted data is not secure.</p>
<p id="p0034" num="0034">In S 1200, identity information of the client sending the transaction information and a service type are acquired by parsing the transaction information that is successfully verified.</p>
<p id="p0035" num="0035">When the signature of the transaction data is verified by the access frontend, data of the current transaction information is considered to be secure. Therefore, the transaction information can be parsed to obtain the identity information of the client sending the transaction information as well as the service type. In this embodiment, the identity information of the client can be extracted from an IP address at which the transaction information is sent and from related fields in the header of a data frame in the information, while the service type can be acquired from a text data frame characterizing content among the transmitted data frame.</p>
<p id="p0036" num="0036">In S1300, matching is performed in an identity authority list based on the parsed identity information and the service type for authentication.</p>
<p id="p0037" num="0037">When the identity information of the client and the service type are parsed out, the client is authenticated based on the information. In the present disclosure, the authentication is mainly for identifying whether the client has the related authority to perform the related requested service. Therefore, in the present disclosure, an identity authority list is also stored in the access frontend. The identity authority list lists identity information and corresponding authority of one or more service types of all qualified clients. The identity information and the service type are one-by-one corresponded in the identity authority list, and therefore whether the client has the authority to initiate a data processing request of the service type is determined.</p>
<p id="p0038" num="0038">Further, when it is determined that the client does not have the relevant authority by authentication, exception information indicating authentication failure is sent to the client as a reminder. For example, in an embodiment, by parsing the transaction information from a client A, it is known that the service types that client A intends to process include service types B and C. In the identity authority list, the service types that can be processed by the client A include the service type C, excluding the service type B. Therefore, requests related to the service type C can be processed subsequently. For the service type B, exception information is sent to the client A to indicate that the client has no authority to process the service type B.</p>
<p id="p0039" num="0039">Further, a rule for determining whether the authentication succeeds or not can also be preset by the access frontend. For example, as described in the above embodiment, the client A has authority for one of the service type B and the service type C, but has no authority for the other service types. In this case, two rules can be set. One is that as<!-- EPO <DP n="8"> --> long as any one of the service types meets the authority requirement, subsequent operations for the service are allowed to be performed. The other is that as long as the request of any one of the service types does not meet the authority requirement, none of the requests in the transaction information is responded to, and exception information is sent to the client such that the client can modify the transaction information. The specific rule may be set according to the actual situation.</p>
<p id="p0040" num="0040">In S1400, the transaction information passing the authentication is assigned to the transaction node.</p>
<p id="p0041" num="0041">When the transaction information passes the authentication using a predetermined rule, the relay server can assign the transaction information to the corresponding transaction node based on the identified location information.</p>
<p id="p0042" num="0042">In response to receiving the transaction information, the relay server provides a forwarding service for the transaction information, wherein a forwarding rule may be determined by analyzing the specific content of the transaction information, thereby ensuring that a same payment request message can be processed at a same node.</p>
<p id="p0043" num="0043">Further, in an embodiment, referring to <figref idref="f0003">FIG. 3</figref>, the process of assigning, based on the location information, the transaction information to the transaction node that has jurisdiction over the location information includes the following sub-processes.</p>
<p id="p0044" num="0044">In S2100, an assignment rule is matched in an assignment list based on a service type of the transaction information, such that requests for a same service type from a same client are processed by a same transaction node.</p>
<p id="p0045" num="0045">The assignment list is a mapping table between relevant information and corresponding assignment rules, wherein the relevant information includes identity information of clients sending the transaction information, and service types, and the like. The relay server assigns the transaction information based on the identified service type and location information of the transaction object.</p>
<p id="p0046" num="0046">The transaction object is a third-party payment platform that is identified based on the transaction information and needs to perform service processing, such as a bank end, a WeChat end, or an Alipay end. In an embodiment, the location information is location information of the client. Thus, when the service type is acquired, the transaction information is assigned to a transaction node with jurisdiction based on the location information of the client, such that the transaction information can be processed.</p>
<p id="p0047" num="0047">In another embodiment, the location information is location information of the service type of the transaction. For example, location information of the WeChat end and Alipay end disclosed above is China since WeChat and Alipay are both domestic payment platforms in China. Some of the bank ends may be in foreign countries. For example, Standard Chartered Bank, Citibank, and the like are foreign payment platforms. Transaction nodes are deployed based on server locations of these payment platforms. For example, transaction information, of which payment objects are the five largest domestic banks: Industrial and Commercial Bank of China, Agricultural Bank of China, Bank of China, China Construction Bank, and Bank of Communications, is set to be processed by a transaction node A. Transaction information corresponding to other domestic banks is set to be processed by a transaction node B. Transaction information corresponding to foreign banks is set to be processed by a transaction node C. Transaction information corresponding to non-bank third-party payment platforms, such as WeChat and Alipay, is set to be processed by a transaction node D. Thus, when the transaction object and the corresponding location information is parsed out from<!-- EPO <DP n="9"> --> the transaction information sent by the client, the transaction information can be assigned based on the location information.</p>
<p id="p0048" num="0048">Further, the above classification is not completely limited. Since the transaction nodes are independent of each other, in order to ensure the normal processing of each piece of transaction information, the transaction information is assigned to nodes based on the transaction objects. In response to a problem occurring in one of the transaction nodes, the transaction information that should be processed by the problematic transaction node can be transferred to other transaction node according to a rule, such that the transaction information can be processed in time. The other transaction node to which the transaction information is transferred according to the rule herein may be a transaction node that processes the same type of transaction information as the original transaction node, or a transaction node configured with the same and available channel gateway.</p>
<p id="p0049" num="0049">Further, by identifying the service type and the identity information of the client, whether a plurality of pieces of transaction information belong to a same service is determined. In response to determining that the plurality of pieces of transaction information belong to the same service, all transaction information belonging to the same service is grouped into one transaction node for transaction processing.</p>
<p id="p0050" num="0050">Further, the relay server routes the transaction information to the corresponding transaction node by hashing (HASH). Hashing can transform an arbitrary-length input into a fixed-length output by using a hashing algorithm, wherein a value of the output is a hash value. In the present disclosure, hashing refers to routing the data message of the transaction information to the corresponding transaction node based on a specific hashing algorithm or rule. In this way, the security of the data during the matching process is ensured.</p>
<p id="p0051" num="0051">In S2200, information of a usage state of a mapped transaction node is acquired according to the assignment rule.</p>
<p id="p0052" num="0052">When a corresponding transaction node is matched by process S2100, the transaction information is not directly assigned to the transaction node. Instead, the information of the usage state of the transaction node is acquired first. The information of the usage state is a current traffic ratio and operation parameters of the transaction node. By acquiring the traffic ratio, whether traffic ratio of the current transaction node exceeds a rating value is determined. When the traffic ratio exceeds the rating value, the current transaction node is oversaturated, which may affect the speed of transaction data processing. By identifying the operation parameters, whether the current transaction node is running normally and is available or not is determined. When the operation parameters are abnormal, the current transaction node is not available and the transaction data needs to be transferred.</p>
<p id="p0053" num="0053">In S2300, whether the usage state of the transaction node meets a first predetermined condition is determined.</p>
<p id="p0054" num="0054">The first predetermined condition is a standard reference condition set based on the usage state information. For example, when the detected usage state is the traffic ratio of the transaction node, the first predetermined condition is set as that the traffic ratio of the transaction node is not higher than 85%. When the detected traffic ratio of the current transaction node is 80%, the usage state of the current transaction node meets the first predetermined condition. Otherwise, it is defined that the current transaction node does not meet the preset condition.</p>
<p id="p0055" num="0055">The description above is only one example of the usage state and the first predetermined condition in the<!-- EPO <DP n="10"> --> present disclosure, and the usage state may be determined in other fashions in the present disclosure.</p>
<p id="p0056" num="0056">In S2400, the transaction information is assigned to the transaction node in response to the usage state of the transaction node meeting the first predetermined condition.</p>
<p id="p0057" num="0057">When it is determined that the transaction node meets the first preset condition, the transaction information is assigned to the corresponding transaction node based on the identified location information.</p>
<p id="p0058" num="0058">In S2500, the assignment rule is re-matched to re-determine the transaction node in response to the usage state of the transaction node not meeting the first predetermined condition.</p>
<p id="p0059" num="0059">When it is determined that the current usage state of the transaction node does not meet the first predetermined condition, the matching assignment rule is re-matched. The re-match of the assignment rule herein is performed in the same fashion as transferring the transaction information to other transaction node according to a rule in process S2100. The re-matched transaction node may be a transaction node that processes the same type of transaction information as the original transaction node, or a transaction node configured with the same and available channel gateway.</p>
<p id="p0060" num="0060">The way of identifying the usage state is in fact a traffic cutting method, which is implemented by the relay server. Since all types of transaction information messages are routed through the relay server to the corresponding nodes for processing, the configuration of a forwarding rule can be modified at the relay server to achieve traffic cutting of services.</p>
<p id="p0061" num="0061">In response to receiving the transmitted transaction information, the transaction center processes the transaction information. In an embodiment, referring to <figref idref="f0004">FIG. 4</figref>, the method for processing the transaction request by the transaction object includes following sub-processes.</p>
<p id="p0062" num="0062">In S3100, a unique order number is created based on the transaction request.</p>
<p id="p0063" num="0063">In response to acquiring the transaction information, the transaction center needs to advise a unique order number for the transaction information, to facilitate data processing and data monitoring. Since the identity information of the client, the service type, and the location information of the service object is identified in the foregoing service access layer, an order number can be generated based on the information and the service type according to a rule. Since the client with the same identity information may request the same service object to process a plurality of requests of a same service type, for differentiation, each transaction request in the transaction information may be matched with a unique order number according to a rule to facilitate data traceback.</p>
<p id="p0064" num="0064">In an embodiment, unique order numbers may be automatically generated based on a timeline. For example, starting with 0001, order numbers of transaction requests of transaction information received subsequently are 0002, 0003, and the like in order. Transaction information received at the same time may be randomly sequenced and order numbers may be sequenced for differentiation.</p>
<p id="p0065" num="0065">In another embodiment, the order number can be generated by embedding the identity information of the client, the service type and the transaction object information. For example, the order number is composed of the initials or ID that characterizes the identity information of the client, a serial number of the service type, a serial number of the transaction object, and a sequence number that is set based on the timeline. Orders with same client identity information, same service type, and same transaction object information can be distinguished according to the order number, thereby<!-- EPO <DP n="11"> --> facilitating data query and traceback.</p>
<p id="p0066" num="0066">Further, in order to ensure the security of the order number, a randomly generated check code can be embedded into the order number to improve the security of the order.</p>
<p id="p0067" num="0067">Further, when the order is generated, the order number and the relevant data parsed out from the transaction information are stored in a database for retrieval at any time.</p>
<p id="p0068" num="0068">In S3200, the transaction request corresponding to the order number is processed in the transaction object by calling a communication interface.</p>
<p id="p0069" num="0069">A plurality of channel gateways are deployed in the transaction node. The scheduling interface between the transaction nodes and channel gateways is unified. Different channel gateways are docked to processing servers of different transaction objects. The channel gateway and the scheduling interface form a communication interface. When the order number is generated for the transaction information, a processing procedure of the corresponding transaction information can be acquired by monitoring the order number. The transaction center sends, through the communication interface, the transaction request in the transaction information to the server of the transaction object such that the transaction object processes the transaction request, and at the same time receives process information, such as a time point at which the transaction information is sent to the server of the transaction object, a process state of the transaction processing, a final result state, a total time spent, and the like.</p>
<p id="p0070" num="0070">In S3300, processing data of the transaction request is written into an asynchronous task queue for buffering.</p>
<p id="p0071" num="0071">In an embodiment, the transaction center writes the relevant processing data of the transaction acquired from the communication interface into the asynchronous task queue for buffering. A plurality of different work nodes are configured in a queue in the asynchronous task queue according to the processes of data processing. In response to receiving relevant data of each step, the information data is stored to a corresponding node, and therefore the current process and state of the processing can be determined.</p>
<p id="p0072" num="0072">In S3400, a retry is performed in response to an exception of a task in the asynchronous task queue during processing.</p>
<p id="p0073" num="0073">In an embodiment, when an exception occurs in any link in the asynchronous queue, the asynchronous task queue automatically sends information to the transaction node to prompt the transaction node to retry the link. Referring to <figref idref="f0004">FIG. 5</figref>, the process of retry includes the following sub-processes.</p>
<p id="p0074" num="0074">In S3410, a retry count is acquired.</p>
<p id="p0075" num="0075">In an embodiment, in order to save time and control the speed of processing, a maximum count value is set, which is called a second threshold. Therefore, when entering a retry, each time a sequential retry operation is performed, the current count is recorded and compared with the second threshold.</p>
<p id="p0076" num="0076">When the exception is resolved by a retry or retries within the second threshold, subsequent tasks in the asynchronous task queue is sequentially executed.</p>
<p id="p0077" num="0077">In S3420, the asynchronous task queue is deleted in response to the retry count reaching a second threshold, and exception information is fed back to the client.</p>
<p id="p0078" num="0078">When the retry count reaches the second threshold and the exception is still not resolved, information is sent<!-- EPO <DP n="12"> --> to the transaction node such that the transaction node does not send any more retry tasks to request retries. At the same time, the asynchronous task queue is deleted, and the exception information is fed back to the client. The feedback information is also stored in the database.</p>
<p id="p0079" num="0079">In S3500, the buffered asynchronous task is deleted upon completion of all the tasks in the asynchronous task queue.</p>
<p id="p0080" num="0080">When the data exception is resolved upon a retry or retries, other tasks in the asynchronous task queue are performed until all tasks are completed. Upon completion of all the tasks in the asynchronous task queue, the current transaction information is completely processed. Then, the buffered asynchronous task queue is deleted, to release the data space.</p>
<p id="p0081" num="0081">The foregoing method of the present disclosure forms an aggregate payment system. In a complete payment transaction request, as shown in <figref idref="f0005">FIG. 6</figref>, the client sends transaction information with a payment request to the aggregate payment system; the aggregate payment system communicates with a third-party transaction object through a communication interface; the third-party transaction object returns ordering data to the aggregate payment system; the aggregate payment system extracts a payment link based on the ordering data and sends the payment link to the client. The client accesses the payment link to complete payment. In response to acquiring a payment result, the third-party transaction object returns the callback payment result to the aggregate payment system. The aggregate payment system generates a payment result notification according to its own rule, and returns the notification to the client to indicate the payment result.</p>
<p id="p0082" num="0082">In an embodiment, as shown in <figref idref="f0006">FIG. 7</figref>, the aggregate payment system includes a service access layer, a core service layer, and a channel docking layer. The service access layer includes an access frontend and a relay server. The core service layer includes a transaction node. The transaction node includes a database for storing data, an asynchronous module for buffering an asynchronous task queue and performing retries, a payment notifying module for sending relevant data acquired in the transaction node to the client, and a payment monitoring module for monitoring data processing of the entire transaction node. The transaction node is connected, through a unified scheduling interface, to each channel gateway in the channel docking layer, so as to connect to different transaction payment platforms for transaction processing according to different third-party transaction objects.</p>
<p id="p0083" num="0083">Specifically, the backend architecture system for aggregate payment in the present disclosure includes following functions and module relationships:
<ul id="ul0002" list-style="none" compact="compact">
<li>an access frontend, configured to acquire transaction information from a client, wherein the transaction information includes location information of a transaction object to which the transaction information is directed;</li>
<li>a relay server, configured to assign, based on the location information, the transaction information to a transaction node that has jurisdiction over the location information, wherein the transaction node is a transaction center within a specified region in a distributed transaction system; and</li>
<li>a transaction node, configured to send, based on a communication interface pre-established between the transaction node and the transaction object, a transaction request in the transaction information to the transaction object such that the transaction object processes the transaction request, acquire a processing result from the transaction object,<!-- EPO <DP n="13"> --> and transmit information of the processing result to the client.</li>
</ul></p>
<p id="p0084" num="0084">Optionally, the access frontend further includes:
<ul id="ul0003" list-style="none" compact="compact">
<li>a verifying module, configured to verify verification information of the transaction information, wherein the verification information is set using an encryption communication protocol;</li>
<li>a data parsing module, configured to acquire identity information of the client sending the transaction information and a service type by parsing the transaction information that is successfully verified;</li>
<li>an authenticating module, configured to match in an identity authority list based on the parsed identity information and the service type for authentication; and assign the transaction node to the transaction information that passing the authentication.</li>
</ul></p>
<p id="p0085" num="0085">Optionally, the access frontend further includes:
<ul id="ul0004" list-style="none" compact="compact">
<li>a traffic recognizing module, configured to acquire a traffic value of transaction information passing the authentication in a first predetermined time period; and</li>
<li>a selecting module, configured to allow assignment of transaction information of which the traffic value is less than or equal to a first predetermined threshold.</li>
</ul></p>
<p id="p0086" num="0086">Optionally, the relay server includes:
<ul id="ul0005" list-style="none" compact="compact">
<li>an assignment rule matching module, configured to match, based on a service type of the transaction information, an assignment rule in an assignment list, such that requests for a same service type from a same client are processed by a same transaction node;</li>
<li>a state acquiring module, configured to acquire, according to the assignment rule, information of a usage state of a mapped transaction node;</li>
<li>a determining module, configured to determine whether the usage state of the transaction node meets a first predetermined condition; and</li>
<li>an assigning module, configured to assign the transaction information to the transaction node in response to the usage state of the transaction node meeting the first predetermined condition.</li>
</ul></p>
<p id="p0087" num="0087">Optionally, the relay server further includes a re-matching module, configured to re-match the assignment rule to re-determine the transaction node in response to the usage state of the transaction node not meeting the first predetermined condition.</p>
<p id="p0088" num="0088">Optionally, the transaction node includes:
<ul id="ul0006" list-style="none" compact="compact">
<li>an order generating module, configured to create a unique order number based on the transaction request;</li>
<li>an calling module, configured to process, in the transaction object, the transaction request corresponding to the order number by calling a communication interface;</li>
<li>an asynchronous module, configured to write processing data of the transaction request into an asynchronous task queue for buffering; and perform a retry in response to an exception of a task in the asynchronous task queue during processing; and</li>
<li>a first deleting module, configured to delete the buffered asynchronous task queue in response to all tasks in the asynchronous task queue being completed.</li>
</ul><!-- EPO <DP n="14"> --></p>
<p id="p0089" num="0089">Optionally, the transaction node further includes:
<ul id="ul0007" list-style="none" compact="compact">
<li>a retry counting module, configured to acquire a retry count; and</li>
<li>a second deleting module, configured to delete the asynchronous task queue in response to the retry count reaching a second threshold, and feed back exception information to the client.</li>
</ul></p>
<p id="p0090" num="0090">In an embodiment, as shown in <figref idref="f0007">FIG. 8</figref>, the specific working processes of the modules disclosed above are as follows: the client sends transaction information; the access frontend receives the transaction information, and sends the transaction information to the relay server upon authentication and traffic control; the relay server assigns the transaction information to a corresponding transaction node according to an assignment rule; in response to receiving the related transaction information, the transaction node creates an order number, and stores the related data in a database; at the same time, the transaction node calls a communication interface of a related channel gateway according to relevant information about the transaction object analyzed above; the channel gateway communicates with the third-party transaction object; the transaction object returns ordering data; the channel gateway receives the ordering data and transmits the ordering data to the transaction node; the transaction node extracts a payment link from the ordering data and sends the payment link to the client; the client accesses the payment link to perform a transaction payment directly; in response to determining that the transaction succeeds, the transaction object sends an order callback notification to the access frontend; when the access frontend authenticates relevant data, the relay server assigns, according to an assignment rule, the relevant data to the original transaction node; and the transaction node identifies the validity of the callback notification, and in response to the callback notification being identified as valid, the transaction node instructs the payment notifying module to generate a payment result notification, and constructs a data message to directly return the payment result notification to the corresponding client, to indicate the payment result.</p>
<p id="p0091" num="0091"><figref idref="f0008">FIG. 9</figref> shows a block diagram of a basic structure of a computer device according to an embodiment of the present disclosure.</p>
<p id="p0092" num="0092">The computer device includes a processor, a non-transitory storage medium, a memory, and a network interface, wherein the processor, the non-transitory storage medium, the memory, and the network interface are connected via a system bus. The non-transitory storage medium of the computer device stores an operating system, a database, and at least one computer-readable instruction. The database stores a control information sequence. The at least one computer-readable instruction, when executed by the processor, cause the processor to perform a backend architecture method for aggregate payment. The processor of the computer device is configured to provide computing and control capabilities, to support running of the entire computer device. The memory of the computer device may store at least one computer-readable instruction. The at least one computer-readable instruction, when executed by the processor, cause the processor to perform a backend architecture method for aggregate payment. The network interface of the computer device is configured to connect and communicate with a terminal.</p>
<p id="p0093" num="0093">The computer device receives status information of a prompt behavior from an associated client, i.e., whether the associated terminal turns on the prompt function and whether the user turns off the prompt task. By verifying whether the above task conditions are achieved, the computer device sends a corresponding predetermined instruction to the associated terminal such that the associated terminal can perform a corresponding operation according to the<!-- EPO <DP n="15"> --> predetermined instruction, thereby achieving effective supervision over the associated terminal. At the same time, when the status of the prompt information is different from a predetermined status instruction, the server side controls the associated terminal to continuously ring, to prevent the prompt task of the associated terminal from being automatically terminated after being executed for a period of time.</p>
<p id="p0094" num="0094">The present disclosure further provides a storage medium storing at least one computer-readable instruction. The at least one computer-readable instruction, when executed by one or more processors, causes the one or more processors to perform the backend architecture method for aggregate payment described in any of the foregoing embodiments.</p>
</description>
<claims id="claims01" lang="en"><!-- EPO <DP n="16"> -->
<claim id="c-en-0001" num="0001">
<claim-text>A backend architecture method for aggregate payment, comprising:
<claim-text>acquiring transaction information from a client, wherein the transaction information comprises location information of the client;</claim-text>
<claim-text>assigning, based on the location information, the transaction information to a transaction node that has jurisdiction over the location information, wherein the transaction node is a transaction center within a specified region in a distributed transaction system;</claim-text>
<claim-text>matching, according to the transaction node, a channel gateway in a channel docking layer that pre-establishes a connection relationship with the transaction node, and sending a transaction request in the transaction information to a transaction object over a selected channel gateway such that the transaction object processes the transaction request; and</claim-text>
<claim-text>acquiring a processing result from the transaction object, and transmitting information of the processing result to the client.</claim-text></claim-text></claim>
<claim id="c-en-0002" num="0002">
<claim-text>The method according to claim 1, wherein before assigning, based on the location information, the transaction information to the transaction node that has jurisdiction over the location information, the method further comprises:
<claim-text>verifying verification information of the transaction information, wherein the verification information is set using an encryption communication protocol;</claim-text>
<claim-text>acquiring identity information of the client sending the transaction information and a service type by parsing the transaction information that is successfully verified;</claim-text>
<claim-text>matching in an identity authority list based on the parsed identity information and the service type for authentication; and</claim-text>
<claim-text>assigning the transaction node to the transaction information passing the authentication.</claim-text></claim-text></claim>
<claim id="c-en-0003" num="0003">
<claim-text>The method according to claim 2, wherein before the process of assigning the transaction node to the transaction information that passing the authentication, the method further comprises:
<claim-text>acquiring a traffic value of transaction information passing the authentication in a first predetermined time period; and</claim-text>
<claim-text>allowing assignment of transaction information of which the traffic value is less than or equal to a first predetermined threshold.</claim-text></claim-text></claim>
<claim id="c-en-0004" num="0004">
<claim-text>The method according to claim 2, wherein assigning, based on the location information, the transaction information to the transaction node that has jurisdiction over the location information comprises:
<claim-text>matching, based on the service type of the transaction information, an assignment rule in an assignment list, such that requests for a same service type from a same client are processed by a same transaction node;<!-- EPO <DP n="17"> --></claim-text>
<claim-text>acquiring, according to the assignment rule, information of a usage state of a mapped transaction node;</claim-text>
<claim-text>determining whether the usage state of the transaction node meets a first predetermined condition; and</claim-text>
<claim-text>assigning the transaction information to the transaction node in response to the usage state of the transaction node meeting the first predetermined condition.</claim-text></claim-text></claim>
<claim id="c-en-0005" num="0005">
<claim-text>The method according to claim 4, wherein in response to the usage state of the transaction node not meeting the first predetermined condition, the assignment rule is re-matched to re-determine the transaction node.</claim-text></claim>
<claim id="c-en-0006" num="0006">
<claim-text>The method according to claim 1, wherein processing the transaction request by the transaction object comprises:
<claim-text>creating a unique order number based on the transaction request;</claim-text>
<claim-text>processing, in the transaction object, the transaction request corresponding to the order number by calling a communication interface;</claim-text>
<claim-text>writing processing data of the transaction request into an asynchronous task queue for buffering;</claim-text>
<claim-text>performing a retry in response to an exception of a task in the asynchronous task queue during processing; and</claim-text>
<claim-text>deleting the buffered asynchronous task queue in response to all tasks in the asynchronous task queue being completed.</claim-text></claim-text></claim>
<claim id="c-en-0007" num="0007">
<claim-text>The method according to claim 6, further comprising:
<claim-text>acquiring a retry count; and</claim-text>
<claim-text>deleting the asynchronous task queue in response to the retry count reaching a second threshold, and feeding back exception information to the client.</claim-text></claim-text></claim>
<claim id="c-en-0008" num="0008">
<claim-text>A backend architecture system for aggregate payment, comprising:
<claim-text>an access frontend, configured to acquire transaction information from a client, wherein the transaction information comprises location information of the client;</claim-text>
<claim-text>a relay server, configured to assign, based on the location information, the transaction information to a transaction node that has jurisdiction over the location information, wherein the transaction node is a transaction center within a specified region in a distributed transaction system; and</claim-text>
<claim-text>a transaction node, configured to match, according to the transaction node, a channel gateway in a channel docking layer that pre-establishes a connection relationship with the transaction node, send a transaction request in the transaction information to a transaction object over a selected channel gateway such that the transaction object processes the transaction request, acquire a processing result from the transaction object, and transmit information of the processing result to the client.</claim-text></claim-text></claim>
<claim id="c-en-0009" num="0009">
<claim-text>A computer device, comprising a memory and a processor, wherein the memory stores at least one computer-readable instruction, wherein the at least one computer-readable instruction, when executed by the processor, causes the<!-- EPO <DP n="18"> --> processor to perform the backend architecture method for aggregate payment as defined in any one of claims 1 to 7.</claim-text></claim>
<claim id="c-en-0010" num="0010">
<claim-text>A storage medium storing at least one computer-readable instruction, wherein the at least one computer-readable instruction, when executed by one or more processors, causes the one or more processors to perform the backend architecture method for aggregate payment as defined in any one of claims 1 to 7.</claim-text></claim>
</claims>
<drawings id="draw" lang="en"><!-- EPO <DP n="19"> -->
<figure id="f0001" num="1"><img id="if0001" file="imgf0001.tif" wi="133" he="123" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="20"> -->
<figure id="f0002" num="2"><img id="if0002" file="imgf0002.tif" wi="134" he="120" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="21"> -->
<figure id="f0003" num="3"><img id="if0003" file="imgf0003.tif" wi="124" he="127" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="22"> -->
<figure id="f0004" num="4,5"><img id="if0004" file="imgf0004.tif" wi="125" he="210" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="23"> -->
<figure id="f0005" num="6"><img id="if0005" file="imgf0005.tif" wi="142" he="142" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="24"> -->
<figure id="f0006" num="7"><img id="if0006" file="imgf0006.tif" wi="165" he="108" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="25"> -->
<figure id="f0007" num="8"><img id="if0007" file="imgf0007.tif" wi="163" he="145" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="26"> -->
<figure id="f0008" num="9"><img id="if0008" file="imgf0008.tif" wi="84" he="78" img-content="drawing" img-format="tif"/></figure>
</drawings>
<search-report-data id="srep" lang="en" srep-office="EP" date-produced=""><doc-page id="srep0001" file="srep0001.tif" wi="165" he="233" type="tif"/><doc-page id="srep0002" file="srep0002.tif" wi="165" he="233" type="tif"/></search-report-data>
</ep-patent-document>
