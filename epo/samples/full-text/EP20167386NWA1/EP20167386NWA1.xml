<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE ep-patent-document PUBLIC "-//EPO//EP PATENT DOCUMENT 1.5.1//EN" "ep-patent-document-v1-5-1.dtd">
<!-- This XML data has been generated under the supervision of the European Patent Office -->
<ep-patent-document id="EP20167386A1" file="EP20167386NWA1.xml" lang="en" country="EP" doc-number="3890235" kind="A1" date-publ="20211006" status="n" dtd-version="ep-patent-document-v1-5-1">
<SDOBI lang="en"><B000><eptags><B001EP>ATBECHDEDKESFRGBGRITLILUNLSEMCPTIESILTLVFIROMKCYALTRBGCZEEHUPLSKBAHRIS..MTNORSMESMMAKHTNMD..........</B001EP><B005EP>J</B005EP><B007EP>BDM Ver 2.0.12 (4th of August) -  1100000/0</B007EP></eptags></B000><B100><B110>3890235</B110><B120><B121>EUROPEAN PATENT APPLICATION</B121></B120><B130>A1</B130><B140><date>20211006</date></B140><B190>EP</B190></B100><B200><B210>20167386.0</B210><B220><date>20200331</date></B220><B250>en</B250><B251EP>en</B251EP><B260>en</B260></B200><B400><B405><date>20211006</date><bnum>202140</bnum></B405><B430><date>20211006</date><bnum>202140</bnum></B430></B400><B500><B510EP><classification-ipcr sequence="1"><text>H04L   9/08        20060101AFI20200908BHEP        </text></classification-ipcr><classification-ipcr sequence="2"><text>H04L   9/30        20060101ALI20200908BHEP        </text></classification-ipcr><classification-ipcr sequence="3"><text>H04L   9/32        20060101ALI20200908BHEP        </text></classification-ipcr></B510EP><B520EP><classifications-cpc><classification-cpc sequence="1"><text>H04L   9/085       20130101 FI20200831BHEP        </text></classification-cpc><classification-cpc sequence="2"><text>H04L   9/3218      20130101 LI20200831BHEP        </text></classification-cpc><classification-cpc sequence="3"><text>H04L   9/3013      20130101 LI20200831BHEP        </text></classification-cpc><classification-cpc sequence="4"><text>H04L2209/46        20130101 LA20200831BHEP        </text></classification-cpc></classifications-cpc></B520EP><B540><B541>de</B541><B542>VERFAHREN ZUR SCHWELLENWERTPASSWORTVERSTÄRKTEN VERSCHLÜSSELUNG UND ENTSCHLÜSSELUNG</B542><B541>en</B541><B542>METHODS FOR THRESHOLD PASSWORD-HARDENED ENCRYPTION AND DECRYPTION</B542><B541>fr</B541><B542>PROCÉDÉS DE CHIFFREMENT ET DE DÉCHIFFREMENT À SEUIL RENFORCÉS PAR MOT DE PASSE</B542></B540><B590><B598>1</B598></B590></B500><B700><B710><B711><snm>Friedrich-Alexander-Universität Erlangen-Nürnberg</snm><iid>100125789</iid><irf>F55556EP GS</irf><adr><str>Schlossplatz 4</str><city>91054 Erlangen</city><ctry>DE</ctry></adr></B711></B710><B720><B721><snm>Lai, Russell W. F.</snm><adr><str>Goethestr. 10</str><city>90409 Nürnberg</city><ctry>DE</ctry></adr></B721><B721><snm>Schröder, Dominique</snm><adr><str>Steinstr. 7</str><city>90419 Nürnberg</city><ctry>DE</ctry></adr></B721><B721><snm>Egger, Christoph</snm><adr><str>Paul-Gossen-Str. 34</str><city>91052 Erlangen</city><ctry>DE</ctry></adr></B721><B721><snm>Brost, Julian</snm><adr><str>Egerländer Str. 10</str><city>91074 Herzogenaurach</city><ctry>DE</ctry></adr></B721></B720><B740><B741><snm>2s-ip Schramm Schneider Bertagnoll 
Patent- und Rechtsanwälte Part mbB</snm><iid>101266765</iid><adr><str>Postfach 86 02 67</str><city>81629 München</city><ctry>DE</ctry></adr></B741></B740></B700><B800><B840><ctry>AL</ctry><ctry>AT</ctry><ctry>BE</ctry><ctry>BG</ctry><ctry>CH</ctry><ctry>CY</ctry><ctry>CZ</ctry><ctry>DE</ctry><ctry>DK</ctry><ctry>EE</ctry><ctry>ES</ctry><ctry>FI</ctry><ctry>FR</ctry><ctry>GB</ctry><ctry>GR</ctry><ctry>HR</ctry><ctry>HU</ctry><ctry>IE</ctry><ctry>IS</ctry><ctry>IT</ctry><ctry>LI</ctry><ctry>LT</ctry><ctry>LU</ctry><ctry>LV</ctry><ctry>MC</ctry><ctry>MK</ctry><ctry>MT</ctry><ctry>NL</ctry><ctry>NO</ctry><ctry>PL</ctry><ctry>PT</ctry><ctry>RO</ctry><ctry>RS</ctry><ctry>SE</ctry><ctry>SI</ctry><ctry>SK</ctry><ctry>SM</ctry><ctry>TR</ctry></B840><B844EP><B845EP><ctry>BA</ctry></B845EP><B845EP><ctry>ME</ctry></B845EP></B844EP><B848EP><B849EP><ctry>KH</ctry></B849EP><B849EP><ctry>MA</ctry></B849EP><B849EP><ctry>MD</ctry></B849EP><B849EP><ctry>TN</ctry></B849EP></B848EP></B800></SDOBI>
<abstract id="abst" lang="en">
<p id="pa01" num="0001">Computer-implemented method for encrypting data by a server in cooperation with a predetermined number of rate limiters,<br/>
the method comprising:<br/>
receiving, by the server, from the user, a user identification (un), and a password to be encrypted,<br/>
creating, by the server, a secret message, the secret message being a key suitable for use with a symmetric key encryption/decryption scheme,<br/>
generating, by the server in cooperation with a subset of a size which is equal to or greater than a threshold, on the basis of a predetermined interactive cryptographic encryption protocol, a ciphertext which encrypts the user password, and the secret message using the respective secret keys of the rate limiters of the subset,<br/>
the threshold being smaller than or equal to the number of rate limiters, and<br/>
the interactive cryptographic protocol being adapted such that the server needs only to interact with a subset of the predetermined size of the number of rate limiters for decryption of the ciphertext to recover the secret message,<br/>
<br/>
storing, by the server, the ciphertext, in association with the user identification; and deleting the secret message and the password.
<img id="iaf01" file="imgaf001.tif" wi="122" he="58" img-content="drawing" img-format="tif"/></p>
</abstract>
<description id="desc" lang="en"><!-- EPO <DP n="1"> -->
<p id="p0001" num="0001">The present invention relates to encrypting and decrypting data, and more particularly to computer-implemented methods for encrypting and decrypting user data by a server in cooperation with a set of rate-limiters.</p>
<heading id="h0001"><b>Background of the invention</b></heading>
<p id="p0002" num="0002">An increasing amount of sensitive information is collected, processed, and made accessible by online services. In the classic authenticate-then-decrypt mechanism, an end-user is first authenticated by means of a password, followed by the retrieval of the user data, which is typically encrypted under a static server secret key, or sometimes even stored in plain. This classic approach is proven to be ineffective to prevent data breaches, especially against insider attackers that have full control of (the server hosting) the database. Not only can the attacker guess the passwords of individual users using offline brute-force attacks, it can also directly learn the master key and hence all user data. Lai et al. [LER<sup>+</sup>18] introduced password-hardened encryption (PHE) to strengthen the security of the authenticate-then-decrypt mechanism. Inherited from the notion of password-hardening [LESC17], PHE involves an external party in addition to the server, known as the rate-limiter, who only assists in the computation obliviously. PHE allows the server to derive a data key that depends on the password of the user, the server key, and the rate-limiter key, while the rate-limiter remains oblivious to the password and the data key.</p>
<p id="p0003" num="0003">Thus, the core idea is to introduce an external crypto service, the rate-limiter, that supports the encryption and decryption of data on the server without getting access to them. Since interaction with the rate-limiter is needed, offline brute-force attacks are no longer possible, and online attacks can be rate-limited.</p>
<p id="p0004" num="0004">Intuitively, the security of PHE states that, neither the server nor the rate-limiter alone should learn anything about the encoded password and the data key without cooperating with each other. To recover the data key, a corrupt party must communicate with the other party, who rate-limits decryption attempts. Finally, PHE supports key-rotation, which allows to rotate the keys of the server and rate-limiter with succinct communication. Thereafter, the server can locally update all ciphertexts without further interaction with the rate-limiter or end users. This property of key-rotation is demanded by the payment card industry data security standard (PCI DSS) [PCI16].<!-- EPO <DP n="2"> --></p>
<p id="p0005" num="0005">While PHE significantly improves security, it also introduces availability and trust issues due to the introduction of an external rate-limiter. If the rate-limiter is unreachable, e.g., due to network failure or malicious attacks, the data would become unavailable to the end users as the server cannot provide decryption service alone. Even worse, if the rate-limiter key is lost, then all user data is effectively lost permanently. These potential issues may discourage service providers from deploying PHE, as they may not want to ultimately depend on third parties for emergency access to their data. The naïve solution of duplicating the rate-limiter into multiple instances increases availability, but at a cost of security. If any one of the instances of the rate-limiter is corrupt, any benefit brought by PHE would be nullified.</p>
<heading id="h0002"><b>Summary of invention</b></heading>
<p id="p0006" num="0006">Therefore, the object of the present invention is to provide methods for encrypting and for decrypting user data which at least alleviate the drawbacks mentioned above.</p>
<p id="p0007" num="0007">This object is solved by the method according to the independent claims. Advantageous embodiments are defined in the respective dependent claims.</p>
<p id="p0008" num="0008">Thus, the invention provides a computer-implemented method for encrypting data by a server in cooperation with a predetermined number of rate-limiters,<br/>
the predetermined number being greater than 1,<br/>
each of the rate-limiters being a respective processing unit different from each other and from the server, and having a respective secret key, sk<sub>1</sub>, ... , sk<i><sub>t</sub></i>, ... , sk<i><sub>m</sub></i>,<br/>
the server having a predetermined secret key, sk<sub>0</sub>,<br/>
the method comprising:
<ul id="ul0001" list-style="none">
<li>receiving, by the server, from the user, a user identification, un, a password, pw, to be encrypted,</li>
<li>creating, by the server, a secret message, <i>M</i>,</li>
<li>the secret message, <i>M</i>, being a key suitable for use with a predetermined symmetric key encryption scheme,</li>
<li>generating, by the server in cooperation with a subset, P, of a size <i>t'</i>, which is equal to or<!-- EPO <DP n="3"> --> greater than a predetermined threshold, <i>t</i>, out of the predetermined number, <i>m</i>, of rate-limiters, on the basis of a predetermined interactive cryptographic encryption protocol, a ciphertext, <i>C</i>, which encrypts the user password, pw, and the secret message, <i>M</i>, using their respective secret keys of the rate-limiters of the subset,</li>
<li>the threshold, <i>t</i>, being smaller than or equal to the predetermined number, <i>m</i>, of rate-limiters, and</li>
<li>the predetermined interactive cryptographic protocol being adapted such that the server needs only to interact with a subset, P, of the predetermined size, t, of the predetermined number, <i>m</i>, of rate-limiters for decryption of the ciphertext to recover the secret message, storing, by the server, the ciphertext, <i>C</i>, in association with the user identification, un, and</li>
<li>deleting the secret message, <i>M</i>, and the password, pw.</li>
</ul></p>
<p id="p0009" num="0009">Advantageous embodiments of the invention include the the following features.</p>
<p id="p0010" num="0010">The method may further comprise:
<ul id="ul0002" list-style="none">
<li>generating, by the server, a server nonce, <i>n</i><sub>0</sub>, on the basis of a predetermined random process,</li>
<li>receiving, by the server, a predetermined number of rate-limiter nonces, <i>n</i><sub>1</sub>, ... , <i>n<sub>i</sub></i>,... , <i>n<sub>m</sub></i>, each rate-limiter nonce, <i>n<sub>i</sub></i>, created by a respective rate-limiter on a basis of a random operation,</li>
<li>making known the nonces to the predetermined number, m, of rate-limiters, using the nonces for generating the ciphertext, <i>C</i>.</li>
</ul></p>
<p id="p0011" num="0011">Hereby, the ciphertext, <i>C</i>, may be a tuple, <i>C</i><sub>0</sub><i>, C</i><sub>1</sub>, encrypted with a predetermined symmetric encryption key which is a part of the server secret key,<br/>
the tuple being computed as <maths id="math0001" num=""><math display="block"><mrow><msub><mi>C</mi><mn>0</mn></msub><mo>=</mo><msub><mi>H</mi><mn>0</mn></msub><mfenced separators=","><mi>pw</mi><mi>n</mi></mfenced><mo>⋅</mo><msub><mi>H</mi><mn>0</mn></msub><msup><mfenced><mi>n</mi></mfenced><mrow><msub><mrow><mover><mi>s</mi><mrow><mo>‾</mo></mrow></mover></mrow><mn>0</mn></msub></mrow></msup></mrow></math><img id="ib0001" file="imgb0001.tif" wi="47" he="7" img-content="math" img-format="tif"/></maths> <maths id="math0002" num=""><math display="block"><mrow><msub><mi>C</mi><mn>1</mn></msub><mo>=</mo><msub><mi>H</mi><mn>1</mn></msub><mfenced separators=","><mi>pw</mi><mi>n</mi></mfenced><mo>⋅</mo><msub><mi>H</mi><mn>1</mn></msub><msup><mfenced><mi>n</mi></mfenced><mrow><msub><mrow><mover><mi>s</mi><mrow><mo>‾</mo></mrow></mover></mrow><mn>0</mn></msub></mrow></msup><mo>⋅</mo><mi>M</mi></mrow></math><img id="ib0002" file="imgb0002.tif" wi="55" he="7" img-content="math" img-format="tif"/></maths><!-- EPO <DP n="4"> --> wherein: <i>H</i><sub>0</sub>, <i>H</i><sub>1</sub> representing independent Hash functions,
<ul id="ul0003" list-style="none">
<li><i><o ostyle="single">s</o></i><sub>0</sub> is part of a conceptual rate-limiter key which is secret-shared to the predetermined number of rate-limiters on the basis of a predetermined linear secret sharing scheme with a reconstruction threshold equal to the subset wherein for a given subset of rate-limiters, there exists a public linear combination such that <maths id="math0003" num=""><math display="inline"><mrow><msub><mrow><mover><mi>s</mi><mrow><mo>‾</mo></mrow></mover></mrow><mn>0</mn></msub><mo>=</mo><mrow><mstyle displaystyle="false"><mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>t</mi></munderover></mrow></mstyle><msub><mi>λ</mi><mi>j</mi></msub><msub><mi>s</mi><mrow><msub><mi>i</mi><mi>j</mi></msub></mrow></msub></mrow></mrow></math><img id="ib0003" file="imgb0003.tif" wi="30" he="8" img-content="math" img-format="tif" inline="yes"/></maths> holds,<br/>
with</li>
<li><i>t</i> denoting the number of rate-limiters of the subset; <i>λ</i> being a predetermined security parameter.</li>
</ul></p>
<p id="p0012" num="0012">Hereby, for any subset of the number of rate-limiters <i>H</i><sub>0</sub>, <i>H</i><sub>1</sub> may be expressed as <maths id="math0004" num=""><math display="block"><mrow><msub><mi>H</mi><mn>0</mn></msub><msup><mfenced><mi>n</mi></mfenced><mrow><msub><mrow><mover><mi>s</mi><mrow><mo>‾</mo></mrow></mover></mrow><mn>0</mn></msub></mrow></msup><mo>=</mo><msub><mi>H</mi><mn>0</mn></msub><msup><mfenced><mi>n</mi></mfenced><mrow><mstyle displaystyle="false"><mrow><munder><mrow><mo>∑</mo></mrow><mrow><mi>i</mi><mo>∈</mo><mi>P</mi></mrow></munder><msub><mi>λ</mi><mrow><mi>P</mi><mo>,</mo><mi>i</mi></mrow></msub><msub><mi>s</mi><mi>i</mi></msub></mrow></mstyle></mrow></msup></mrow></math><img id="ib0004" file="imgb0004.tif" wi="49" he="7" img-content="math" img-format="tif"/></maths> <maths id="math0005" num=""><math display="block"><mrow><msub><mi>H</mi><mn>1</mn></msub><msup><mrow><mfenced><mi>n</mi></mfenced></mrow><mrow><msub><mrow><mover><mi>s</mi><mrow><mo>‾</mo></mrow></mover></mrow><mn>0</mn></msub></mrow></msup><mo>=</mo><msub><mi>H</mi><mn>1</mn></msub><mfenced><mi>n</mi></mfenced><mstyle displaystyle="false"><mrow><munder><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><mi>P</mi></mrow></munder><mrow><msub><mi>λ</mi><mrow><mi>P</mi><mo>,</mo><mi>i</mi></mrow></msub><msub><mi>s</mi><mi>i</mi></msub></mrow></mrow></mstyle><mn>.</mn></mrow></math><img id="ib0005" file="imgb0005.tif" wi="51" he="7" img-content="math" img-format="tif"/></maths></p>
<p id="p0013" num="0013">The method may further comprise:
<ul id="ul0004" list-style="none">
<li>receiving, by the server, from the user, along with receiving the user identification, un, and the oasswird, pw, useer data, ud, to be encrypted,</li>
<li>encrypting, by the server, the user data, ud, by applying the predetermined symmetric key encryption scheme using the secret message, <i>M</i>, as encryption key, and storing, by the server, the encrypted user data, ud.</li>
</ul></p>
<p id="p0014" num="0014">According to the invention further provided is a computer-implemented method for decrypting user data, ud, by a server, in cooperation with a predetermined number of rate-limiters, the user data, ud, being encrypted by the method as decribed above, the decrypting method comprising:
<ul id="ul0005" list-style="none">
<li>Receiving, by the server, from the user a user identification, un, and the password, pw,</li>
<li>retrieving, by the server, the ciphertext, C, and the encrypted user data stored in association with the uder identification, un,</li>
<li>recovering the secret message, <i>M</i>, by decrypting, by the server with its secret key, sk<sub>0</sub>, in cooperation with a subset, P, of a size, <i>t'</i>, which is equal to or greater than the<!-- EPO <DP n="5"> --> predetermined threshold, <i>t</i>, out of the predetermined number, <i>m</i>, of rate-limiters with their respective secret keys, sk<i><sub>i</sub></i>, the ciphertext, <i>C</i>, and</li>
<li>deleting, by the server, the secret message, M, and the user password, pw.</li>
</ul></p>
<p id="p0015" num="0015">The decryption method may further comprise:
<ul id="ul0006" list-style="none">
<li>Sending, by the server, the secret to the subset <i>P'</i> of rate-limiters, computing, by the server, the value <i>Y</i><sub>0,0</sub> := <i>C</i><sub>0</sub> ·<i>H</i><sub>0</sub>(pw, <i>n</i>)<sup>-1</sup>,</li>
<li>initiating the <i>i</i>-th rate-limiter of the subset of rate-limiters to compute the value <i>Y</i><sub><i>i</i>,0</sub> := <i>H</i><sub>0</sub>(<i>n</i>)<i><sup>s<sub2>i</sub2></sup>,</i></li>
<li>checking if <maths id="math0006" num=""><math display="inline"><mrow><msub><mi>Y</mi><mrow><mn>0</mn><mo>,</mo><mn>0</mn></mrow></msub><mo>=</mo><mrow><mstyle displaystyle="false"><mrow><munder><mo>∏</mo><mrow><mi>i</mi><mo>∈</mo><mi>P</mi></mrow></munder></mrow></mstyle><mrow><msubsup><mi>Y</mi><mrow><mi>i</mi><mo>,</mo><mn>0</mn></mrow><mrow><msub><mi>λ</mi><mrow><mi>P</mi><mo>,</mo><mi>i</mi></mrow></msub></mrow></msubsup></mrow></mrow></mrow></math><img id="ib0006" file="imgb0006.tif" wi="33" he="9" img-content="math" img-format="tif" inline="yes"/></maths> for some t-subset <i>P</i> of <i>[m]</i> by the server and the subset <i>P</i> of rate-limiters performing the steps of:
<ul id="ul0007" list-style="none" compact="compact">
<li>step a) computing the encryption of the value <maths id="math0007" num=""><math display="block"><mrow><mi>Z</mi><mo>:</mo><mo>=</mo><msubsup><mi>Y</mi><mrow><mn>0</mn><mo>,</mo><mn>0</mn></mrow><mrow><mo>−</mo><mn>1</mn></mrow></msubsup><mrow><mstyle displaystyle="false"><mrow><munder><mo>∏</mo><mrow><mi>i</mi><mo>∈</mo><mi>P</mi></mrow></munder></mrow></mstyle><mrow><msubsup><mi>Y</mi><mrow><mi>i</mi><mo>,</mo><mn>0</mn></mrow><mrow><msub><mi>λ</mi><mrow><mi>P</mi><mo>,</mo><mi>i</mi></mrow></msub></mrow></msubsup></mrow></mrow></mrow></math><img id="ib0007" file="imgb0007.tif" wi="38" he="8" img-content="math" img-format="tif"/></maths> with the <i>K</i> being a public key, and <i>K</i> = <i>K</i><sub>0</sub> · <i><o ostyle="single">K</o></i><sub>0</sub>, and a corresponding secret key being secret-shared among the server and the subset of rate-limiters,</li>
<li>step b) computing an encryption of the values encryption of <i>Z<sup>r̃</sup></i> and <i>Z<sup>r̃</sup><sup>'</sup></i>· <i>H</i><sub>1</sub>(<i>n</i>)<sup><o ostyle="rightarrow"><i>s</i></o>0</sup> for random <i>r̃</i> and <i>r̃'</i>, respectively,</li>
<li>step c) checking whether <i>Z<sup>r̃</sup></i> = <i>I</i>, and if so, obtaining <i>H</i><sub>1</sub>(<i>n</i>)<sup><o ostyle="rightarrow"><i>s</i></o>0</sup> by decrypting the ciphertext <i>C</i></li>
</ul></li>
<li><i>I</i> being an identity element,</li>
<li>and recovering the message <i>M</i> therefrom.</li>
</ul></p>
<p id="p0016" num="0016">Hereby, each rate-limiter may associate a counter with the user identification, and may increment the counter if the verification step fails due to a received incorrect password, may abort the current decryption session, and may block further receiving user identification and password for a predetermined time of at least the user to which a the counter is associated.</p>
<p id="p0017" num="0017">As analternative, each rate-limiter may implement a counter, and may increment the counter if the verification step fails due to a received incorrect password, un, may abort<!-- EPO <DP n="6"> --> the current decryption session, and may blocking further receiving user identification and password for a predetermined time.</p>
<p id="p0018" num="0018">The encryption method may further comprise:<br/>
Running, by the server, prior to creating the secret message, <i>M</i>, a setup algorithm comprising:
<ul id="ul0008" list-style="none">
<li>defining the threshold, and the number m, of rate-limiters, generating the server secret key, sk<sub>0</sub>,and</li>
<li>generating for each rate-limiter of the predetermined number, m, of rate-limiters the respective secret key, sk<i><sub>i</sub></i>, such that from each secret key, sk<sub>0</sub>,..., <i>sk<sub>m</sub></i>, the size, <i>t</i>, of the subset, P, of rate-limiters, and the predetermined number, <i>m</i>, of rate limiters can be derived.</li>
</ul></p>
<p id="p0019" num="0019">Hereby, the setup algorithm may further comprise:
<ul id="ul0009" list-style="none">
<li>Running a group generation algorithm which maps the security parameter to the description of a cyclic group of prime order q with generator G, each of the the secret keys has the format</li>
<li>sk<i><sub>i</sub></i> having the format (<i>s<sub>i</sub></i>, <i>k<sub>i</sub></i>, <i>S</i><sub>0</sub>, <i>K</i><sub>0</sub>, <maths id="math0008" num=""><math display="inline"><mrow><msubsup><mfenced open="{" close="}" separators=","><msub><mrow><mover><mi>S</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi></msub><msub><mrow><mover><mi>K</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi></msub></mfenced><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msubsup></mrow></math><img id="ib0008" file="imgb0008.tif" wi="22" he="8" img-content="math" img-format="tif" inline="yes"/></maths>) where <i>s</i><sub>0</sub> is a secret key for a symmetric key encryption scheme SKE and satisfiyng the following properties: <maths id="math0009" num=""><math display="block"><mrow><msup><mi>G</mi><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow></msup><mo>=</mo><mrow><mstyle displaystyle="false"><mrow><munderover><mo>∏</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></munderover></mrow></mstyle><mrow><msubsup><mrow><mover><mi>S</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi><mrow><msup><mi>i</mi><mi>j</mi></msup></mrow></msubsup></mrow></mrow><mo>,</mo><mspace width="1em"/><mi mathvariant="italic">i</mi><mo>∈</mo><mfenced open="[" close="]"><mi>m</mi></mfenced></mrow></math><img id="ib0009" file="imgb0009.tif" wi="45" he="8" img-content="math" img-format="tif"/></maths> <maths id="math0010" num=""><math display="block"><mrow><msup><mi>G</mi><mrow><msub><mi>k</mi><mi>i</mi></msub></mrow></msup><mo>=</mo><mrow><mo>{</mo><mtable columnalign="left" width="auto"><mtr><mtd><msub><mi>K</mi><mn>0</mn></msub></mtd><mtd><mi>i</mi><mo>=</mo><mn>0</mn></mtd></mtr><mtr><mtd><mrow><mstyle displaystyle="false"><mrow><munderover><mo>∏</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></munderover></mrow></mstyle><msubsup><mrow><mover><mi>K</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi><mrow><msup><mi>i</mi><mi>j</mi></msup></mrow></msubsup></mrow></mtd><mtd><mi>i</mi><mo>∈</mo><mfenced open="[" close="]"><mi>m</mi></mfenced><mn>.</mn></mtd></mtr></mtable></mrow></mrow></math><img id="ib0010" file="imgb0010.tif" wi="52" he="18" img-content="math" img-format="tif"/></maths></li>
</ul></p>
<p id="p0020" num="0020">Hereby, verifying the validity of the secret keys may be performed by applying the following scheme:
<ul id="ul0010" list-style="none" compact="compact">
<li>if <i>i</i> = 0 then return (<i>G</i><sup><i>k</i><sub2>0</sub2></sup> = <i>K</i><sub>0</sub>)</li>
<li>else return <maths id="math0011" num=""><math display="inline"><mfenced separators=""><msup><mi>G</mi><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow></msup><mo>=</mo><mrow><mstyle displaystyle="false"><mrow><munderover><mrow><mo>∏</mo></mrow><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></munderover></mrow></mstyle><msubsup><mrow><mover><mi>S</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi><mrow><msup><mi>i</mi><mi>j</mi></msup></mrow></msubsup><mo>∧</mo><msup><mi>G</mi><mrow><msub><mi>k</mi><mi>i</mi></msub></mrow></msup><mo>=</mo><mrow><mstyle displaystyle="false"><mrow><munderover><mrow><mo>∏</mo></mrow><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></munderover></mrow></mstyle><mrow><msubsup><mrow><mover><mi>K</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi><mrow><msup><mi>i</mi><mi>j</mi></msup></mrow></msubsup></mrow></mrow></mrow></mfenced></math><img id="ib0011" file="imgb0011.tif" wi="64" he="9" img-content="math" img-format="tif" inline="yes"/></maths></li>
</ul></p>
<p id="p0021" num="0021">The methods described above may further comprise:
<ul id="ul0011" list-style="none" compact="compact">
<li>Initiated by the server at least one rate-limiter out of the predetermined number of rate-limiters<!-- EPO <DP n="7"> --> to perform, a rotation of the secret keys according to a predetermined key rotation protocol, and</li>
<li>performing, by the server, an algorithm for updating the ciphertext to an updated ciphertext with keys produced in the key rotation protocol.</li>
</ul></p>
<p id="p0022" num="0022">Herein, the key rotation protocol may comprise:
<ul id="ul0012" list-style="none" compact="compact">
<li>Initiating a rate-limiter of the predetermined number of rate-limiters to request at least a part of the predetermined number of rate-limiters to perform a respective key rotation, and</li>
<li>receiving confirmation of the requested rate-limiters about key rotation.</li>
</ul></p>
<p id="p0023" num="0023">The key rotation protocol may further comprise:
<ul id="ul0013" list-style="none" compact="compact">
<li>Requesting, by the server or initiating a rate-limiter of the predeter-mined number of rate-limiters, a part of the predetermined number of rate-limiters to perform a respective key rotation, to obtain updated secret keys,</li>
<li>deriving an update token for updating the ciphertext.</li>
</ul></p>
<p id="p0024" num="0024">In particular, the key rotation may comprise:<br/>
Updating <maths id="math0012" num=""><math display="block"><mrow><msub><mi>sk</mi><mi>i</mi></msub><mo>=</mo><mfenced separators=",,,,"><msub><mi>s</mi><mi>i</mi></msub><msub><mi>k</mi><mi>i</mi></msub><msub><mi>S</mi><mn>0</mn></msub><msub><mi>K</mi><mn>0</mn></msub><msubsup><mfenced open="{" close="}" separators=","><msub><mrow><mover><mi>S</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi></msub><msub><mrow><mover><mi>K</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi></msub></mfenced><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msubsup></mfenced></mrow></math><img id="ib0012" file="imgb0012.tif" wi="60" he="8" img-content="math" img-format="tif"/></maths> to <maths id="math0013" num=""><math display="block"><mrow><msubsup><mi>sk</mi><mi>i</mi><mi>ʹ</mi></msubsup><mo>=</mo><mfenced separators=",,,,"><msubsup><mi>s</mi><mi>i</mi><mi>ʹ</mi></msubsup><msubsup><mi>k</mi><mi>i</mi><mi>ʹ</mi></msubsup><msubsup><mi>S</mi><mn>0</mn><mi>ʹ</mi></msubsup><msubsup><mi>K</mi><mn>0</mn><mi>ʹ</mi></msubsup><msubsup><mfenced open="{" close="}" separators=","><msubsup><mrow><mover><mi>S</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi><mi>ʹ</mi></msubsup><msubsup><mrow><mover><mi>K</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi><mi>ʹ</mi></msubsup></mfenced><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msubsup></mfenced></mrow></math><img id="ib0013" file="imgb0013.tif" wi="60" he="8" img-content="math" img-format="tif"/></maths> where <maths id="math0014" num=""><math display="inline"><mrow><msubsup><mi>s</mi><mn>0</mn><mi>ʹ</mi></msubsup></mrow></math><img id="ib0014" file="imgb0014.tif" wi="6" he="7" img-content="math" img-format="tif" inline="yes"/></maths> is a new secret encryption secret key for SKE, and the following properties hold:
<tables id="tabl0001" num="0001">
<table frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colnum="1" colname="col1" colwidth="33mm"/>
<colspec colnum="2" colname="col2" colwidth="37mm"/>
<tbody>
<row>
<entry align="right"/>
<entry align="center"><maths id="math0015" num=""><math display="block"><mrow><msubsup><mi>K</mi><mn>0</mn><mi>ʹ</mi></msubsup><mo>=</mo><msubsup><mi>K</mi><mn>0</mn><mi>γ</mi></msubsup><mo>=</mo><msup><mi>G</mi><mrow><msubsup><mi>k</mi><mn>0</mn><mi>ʹ</mi></msubsup></mrow></msup></mrow></math><img id="ib0015" file="imgb0015.tif" wi="30" he="7" img-content="math" img-format="tif"/></maths></entry></row>
<row>
<entry align="right"><maths id="math0016" num=""><math display="block"><mrow><mo>∀</mo><mi>j</mi><mo>∈</mo><mfenced open="[" close="]" separators=""><mn>0</mn><mo>,</mo><mi>t</mi><mo>−</mo><mn>1</mn></mfenced></mrow></math><img id="ib0016" file="imgb0016.tif" wi="27" he="7" img-content="math" img-format="tif"/></maths></entry>
<entry align="center"><maths id="math0017" num=""><math display="block"><mrow><msubsup><mrow><mover><mi>S</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi><mi>ʹ</mi></msubsup><mo>=</mo><msub><mrow><mover><mi>S</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi></msub><msup><mi>G</mi><mrow><msub><mrow><mover><mi>β</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi></msub></mrow></msup></mrow></math><img id="ib0017" file="imgb0017.tif" wi="23" he="8" img-content="math" img-format="tif"/></maths></entry></row>
<row>
<entry align="right"><maths id="math0018" num=""><math display="block"><mrow><mo>∀</mo><mi>j</mi><mo>∈</mo><mfenced open="[" close="]" separators=""><mn>0</mn><mo>,</mo><mi>t</mi><mo>−</mo><mn>1</mn></mfenced></mrow></math><img id="ib0018" file="imgb0018.tif" wi="27" he="7" img-content="math" img-format="tif"/></maths></entry>
<entry align="center"><maths id="math0019" num=""><math display="block"><mrow><msubsup><mrow><mover><mi>K</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi><mi>ʹ</mi></msubsup><mo>=</mo><msubsup><mrow><mover><mi>K</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi><mi>γ</mi></msubsup><msup><mi>G</mi><mrow><msub><mrow><mover><mi>δ</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi></msub></mrow></msup></mrow></math><img id="ib0019" file="imgb0019.tif" wi="24" he="8" img-content="math" img-format="tif"/></maths></entry></row>
<row>
<entry align="right"><maths id="math0020" num=""><math display="block"><mrow><mo>∀</mo><mi>i</mi><mo>∈</mo><mfenced open="[" close="]"><mi>m</mi></mfenced></mrow></math><img id="ib0020" file="imgb0020.tif" wi="18" he="7" img-content="math" img-format="tif"/></maths></entry>
<entry align="center"><maths id="math0021" num=""><math display="block"><mrow><msup><mi>G</mi><mrow><msubsup><mi>s</mi><mi>i</mi><mi>ʹ</mi></msubsup></mrow></msup><mo>=</mo><mrow><mstyle displaystyle="false"><mrow><munderover><mo>∏</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mi>t</mi></munderover></mrow></mstyle><mrow><mover><mi>S</mi><mrow><mo>‾</mo></mrow></mover><msubsup><mi>ʹ</mi><mi>j</mi><mrow><msup><mi>i</mi><mi>j</mi></msup></mrow></msubsup></mrow></mrow></mrow></math><img id="ib0021" file="imgb0021.tif" wi="29" he="8" img-content="math" img-format="tif"/></maths></entry></row>
<row>
<entry align="right"><maths id="math0022" num=""><math display="block"><mrow><mo>∀</mo><mi>i</mi><mo>∈</mo><mfenced open="[" close="]"><mi>m</mi></mfenced></mrow></math><img id="ib0022" file="imgb0022.tif" wi="18" he="7" img-content="math" img-format="tif"/></maths></entry>
<entry align="center"><maths id="math0023" num=""><math display="block"><mrow><msup><mi>G</mi><mrow><msubsup><mi>k</mi><mi>i</mi><mi>ʹ</mi></msubsup></mrow></msup><mo>=</mo><msubsup><mrow><mstyle displaystyle="false"><mrow><munderover><mo>∏</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mi>t</mi></munderover></mrow></mstyle><mrow><mover><mi>K</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>ʹ</mi></mrow><mi>j</mi><mrow><msup><mi>i</mi><mi>j</mi></msup></mrow></msubsup></mrow></math><img id="ib0023" file="imgb0023.tif" wi="30" he="9" img-content="math" img-format="tif"/></maths></entry></row></tbody></tgroup>
</table>
</tables>
for<br/>
<!-- EPO <DP n="8"> --><i><o ostyle="single">β</o></i><sub>0</sub>,...,<i><o ostyle="single">β</o></i><sub><i>t</i>-1</sub>, γ, <i><o ostyle="single">δ</o></i><sub>0</sub>,..., <i><o ostyle="single">δ</o></i><sub><i>t</i>-1</sub> being random integers sampled by the server, and the update token being defined as (<i>s</i><sub>0</sub>, <i>s'</i><sub>0</sub>, <i><o ostyle="single">β</o></i><sub>0</sub>),<br/>
and a nonce <i>n</i>,<br/>
updating the ciphertext <i>C</i> to the updated ciphertext <i>C'</i> such that the updated ciphertext <i>C'</i> is given by encrypting the tuple <maths id="math0024" num=""><math display="inline"><mrow><mfenced separators=","><msubsup><mi>C</mi><mn>0</mn><mi>ʹ</mi></msubsup><msubsup><mi>C</mi><mn>1</mn><mi>ʹ</mi></msubsup></mfenced></mrow></math><img id="ib0024" file="imgb0024.tif" wi="16" he="7" img-content="math" img-format="tif" inline="yes"/></maths> with the new symmetric encryption key <maths id="math0025" num=""><math display="inline"><mrow><msubsup><mi>s</mi><mn>0</mn><mi>ʹ</mi></msubsup></mrow></math><img id="ib0025" file="imgb0025.tif" wi="6" he="7" img-content="math" img-format="tif" inline="yes"/></maths> where <maths id="math0026" num=""><math display="inline"><mrow><msubsup><mi>C</mi><mn>0</mn><mi>ʹ</mi></msubsup><mo>:</mo><mo>=</mo><msub><mi>C</mi><mn>0</mn></msub><mo>⋅</mo><msub><mi>H</mi><mn>0</mn></msub><msup><mrow><mfenced><mi>n</mi></mfenced></mrow><mrow><msub><mrow><mover><mi>β</mi><mrow><mo>‾</mo></mrow></mover></mrow><mn>0</mn></msub></mrow></msup></mrow></math><img id="ib0026" file="imgb0026.tif" wi="35" he="7" img-content="math" img-format="tif" inline="yes"/></maths> and <maths id="math0027" num=""><math display="inline"><mrow><msubsup><mi>C</mi><mn>1</mn><mi>ʹ</mi></msubsup><mo>:</mo><mo>=</mo><msub><mi>C</mi><mn>1</mn></msub><mo>⋅</mo><msub><mi>H</mi><mn>1</mn></msub><msup><mrow><mfenced><mi>n</mi></mfenced></mrow><mrow><msub><mi>β</mi><mn>0</mn></msub></mrow></msup><mo>,</mo></mrow></math><img id="ib0027" file="imgb0027.tif" wi="36" he="7" img-content="math" img-format="tif" inline="yes"/></maths> and<br/>
<i>n</i> being a nonce produced by the server.</p>
<p id="p0025" num="0025">Herein, the subset of the prede-termined number of rate-limiters may be selected according to a predetermined access criterion.</p>
<p id="p0026" num="0026">The decryption method may further comprise:<br/>
decrypting, by the server, the encrypted user data, ud, by applying the predetermined user data symmetric key encryption/decryption scheme using the secret message M as decryption key.</p>
<p id="p0027" num="0027">Still further, the invention comprises software, which when loaded in a computer, controls the computer to implement the inventive methods as described above and as described in the detailed description.</p>
<p id="p0028" num="0028">Still further, the invention comprises a computer-readable storage medium which contains instructions, which when loaded in a computer, control the computer so as to implement the inventive methods as described above and as described in the detailed description.</p>
<p id="p0029" num="0029">Thus, the invention addresses the availability and trust issues of PHE by introducing <i>threshold password-hardened encryption</i> ((<i>t</i>, <i>m</i>)-PHE). The basic idea is to spread the responsibility of a single rate-limiter to <i>m</i> rate-limiters, such that a threshold number <i>t</i> of them are necessary and sufficient for successful en/decryption. As long as the adversary does not control both the server and at least <i>t</i> rate-limiters, the (<i>t</i>, <i>m</i>)-PHE schemes according to the invention provide the same security guarantees like those of PHE schemes. Practically speaking, this allows services to make use of rate-limiters hosted by different providers, or even have some of them "in cold storage" locally where they can be reactivated in emergency situations to avoid data loss. Additionally, this allows strengthening security by requiring more than one honest rate-limiter for successful decryption.<!-- EPO <DP n="9"> --></p>
<heading id="h0003"><b>Detailed desciption</b></heading>
<p id="p0030" num="0030">The invention and embodiments thereof will be described in connection with the drawings, wherein
<ul id="ul0014" list-style="none">
<li><figref idref="f0001">Figure 1</figref> illustates graphically the encryption procedure according to the invention,</li>
<li><figref idref="f0001">Figure 2</figref> illustates graphically the decryption procedure according to the invention,</li>
<li><figref idref="f0001">Figure 3</figref> illustrates a block diagram of the setup algorithm,</li>
<li><figref idref="f0002">Figure 4</figref> illustrates the setup protocol of the construction,</li>
<li><figref idref="f0002">Figure 5</figref> illustrates a block diagram of the encryption protocol according to the invention,</li>
<li><figref idref="f0003">Figure 6</figref> illustrates the encryption protocol of the construction,</li>
<li><figref idref="f0004">Figure 7</figref> illustrates a block diagram of the decryption protocol according to the invention,</li>
<li><figref idref="f0005">Figure 8</figref> illustrates the decryption protocol of the construction,</li>
<li><figref idref="f0006">Figure 9</figref> illustrates a block diagram of the key rotation protocol according to the invention,</li>
<li><figref idref="f0006">Figure 10</figref> illustrates a block diagram of the ciphertext update protocol according to the invention,</li>
<li><figref idref="f0006">Figure 11</figref> illustrates the key-rotation protocol, the update algorithm, and key verification algorithm of the construction,</li>
<li><figref idref="f0007">Figure 12</figref> illustrates the inverse of the throughput (<i>i</i>.<i>e</i>., amortized time per encryption or decryption request) of an implementation of the construction against the threshold of <i>t</i>,</li>
<li><figref idref="f0007">Figure 13</figref> illustrates the throughput (<i>i</i>.<i>e</i>., the encryption and decryption requests per second) of an implementation of against the threshold of <i>t</i>,</li>
<li><figref idref="f0007">Figure 14</figref> illustrates a non-interactive zero-knowledge proof of knowledge,</li>
<li><figref idref="f0008">Figure 15</figref> illustrates the security experiment for the hiding property, and</li>
<li><figref idref="f0009">Figure 16</figref> illustrates the security experiment for the soundness property.</li>
</ul><!-- EPO <DP n="10"> --></p>
<p id="p0031" num="0031"><b>Overwiev.</b> An efficient (<i>t</i>, <i>m</i>)-PHE scheme based on standard cryptographic assumptions in the random oracle model is presented. Conceptually, the construction according to the invention is obtained by emulating the PHE scheme of Lai <i>et al.</i> [LER<sup>+</sup>18] using secure multi-party computation (MPC) protocols. Although using generic MPC protocols suffices for security, expressing the group operations used in [LER<sup>+</sup>18] as Boolean or arithmetic circuits would incur significant overhead. Moreover, since the scheme of Lai <i>et al.</i> [LER<sup>+</sup>18] is only proven secure in the random oracle model, emulating their scheme over an MPC would require instantiating the random oracles. Consequently, it is unlikely to obtain a security proof based on standard assumptions even in the random oracle model.</p>
<p id="p0032" num="0032">The above difficulty is overcome here by designing special-purpose MPC protocols, which exploit the linearity of the Shamir secret sharing scheme [Sha79] and the ElGamal encryption scheme [ElG84]. Since latency is the main bottleneck of PHE [LER<sup>+</sup>18], the main objective of the design is to minimize the round complexity, while restricting ourselves to only use relatively lightweight cryptographic tools. Assuming a communication model where the rate-limiters are not allowed to communicate with each other, the resulting encryption protocol consists of 3 rounds, while the decryption protocol consists of 6 rounds (7 rounds for "fine-grained" rate-limiting, see below under "Construction of the encyption/decryption scheme of the invention". It is believed that this is a good trade-off between round complexity and computational complexity. A side benefit of the inventive construction is that the rate-limiters cannot tell whether the same incorrect password was used in two failed decryption attempts of the same user.</p>
<p id="p0033" num="0033">It will be shown that the inventive construction is secure under the DDH assumption in the random oracle model, assuming static corruption, where the adversary must declare the set of corrupt parties for the next time epoch when instructing a key-rotation. Note that security under static corruption is already stronger than the security defined in [LER<sup>+</sup>18], where the corrupt party is fixed for the entire duration of the experiments. Nevertheless, we believe that security under adaptive corruption can be achieved under standard (yet not necessarily efficient) techniques. Since our primary focus is practical efficiency, we will not discuss adaptive corruption further.</p>
<p id="p0034" num="0034"><b>Implementation and Evaluation.</b> Further, a prototype implementation in Python is provided and evaluated with respect to the latency and throughput of (<i>t</i>, <i>m</i>)-PHE for multiple threshold levels <i>t</i>. The experimental evaluation (see below) shows that, despite the increased computation and communication complexities when compared to<!-- EPO <DP n="11"> --> PHE [LER<sup>+</sup>18], our (<i>t</i>, <i>m</i>)-PHE scheme is still within the practical realm for a reasonably small threshold <i>t</i> (<i>e.g.</i>, 3).</p>
<heading id="h0004"><b>Related Work</b></heading>
<p id="p0035" num="0035">The original concept of password-hardening (PH) is due to Facebook [Muf15]. Everspaugh <i>et al.</i> [ECS<sup>+</sup>15] made the first step towards formalizing PH and identified key-rotation as the key property to make such schemes useful in practice, which is also the key challenge when designing PH and PHE schemes. The notion of PH has been subsequently refined by Schneider <i>et al.</i> [SFSB16] and Lai <i>et al.</i> [LESC17]. In addition to password verification, Lai <i>et al.</i> [LER<sup>+</sup>18] later introduced the concept of password-hardened encryption (PHE) that allows associated data to be encrypted under a per-user key that is inaccessible without the user's password and provides strong security guarantees analogous to those of PH.</p>
<p id="p0036" num="0036">The construction of (<i>t</i>, <i>m</i>)-PHE in this work is based on the PHE scheme in [LER<sup>+</sup>18], which in turn is based on the PH scheme in [LESC17]. As observed in [LER<sup>+</sup>18], it is unclear how the PH scheme in [ECS<sup>+</sup>15] (formalized as a partially oblivious pseudorandom function) can be extended to a PHE scheme. Therefore, although the scheme in [ECS<sup>+</sup>15] has a natural threshold variant, it is not helpful for constructing (<i>t</i>, <i>m</i>)-PHE schemes.</p>
<p id="p0037" num="0037">A closely related notion is password-protected secret sharing (PPSS) [BJSL11], which provides similar functionality as that of (<i>t</i>, <i>m</i>)-PHE, with different formulations in syntax and security definitions. The key feature separating (<i>t</i>, <i>m</i>)-PHE from PPSS is key-rotation. Indeed, a (<i>t</i>, <i>m</i>)-PHE can be seen as a PPSS scheme with key-rotation.</p>
<p id="p0038" num="0038">Password-based threshold authentication (PbTA) [AMMM18] is a recent related notion where, instead of recovering a data key, the goal is to produce an authentication token which can be verified by the service provider. Moreover, the PbTA scheme in [AMMM18] does not support key-rotation.<!-- EPO <DP n="12"> --></p>
<heading id="h0005"><b>Definitions</b></heading>
<p id="p0039" num="0039">Let 1<sup>λ</sup> be the security parameter and <maths id="math0028" num=""><math display="inline"><mrow><mi>m</mi><mo>∈</mo><mi mathvariant="double-struck">N</mi><mn>.</mn></mrow></math><img id="ib0028" file="imgb0028.tif" wi="15" he="6" img-content="math" img-format="tif" inline="yes"/></maths> The set {1,...,<i>m</i>} is denoted by [<i>m</i>]<i>,</i> and the set {<i>a</i>, <i>a</i> + 1,...,<i>b</i>} is denoted by [<i>a</i>, <i>b</i>]<i>.</i> We denote by <maths id="math0029" num=""><math display="block"><mrow><mfenced separators=""><mfenced separators=";"><msub><mi>y</mi><mn>1</mn></msub><msub><mi>view</mi><mn>1</mn></msub></mfenced><mo>,</mo><mo>…</mo><mo>,</mo><mfenced separators=";"><msub><mi>y</mi><mi>m</mi></msub><msub><mi>view</mi><mi>m</mi></msub></mfenced></mfenced><mo>←</mo><mi mathvariant="normal">Π</mi><mrow><mo>〈</mo><msub><mi mathvariant="script">P</mi><mn>1</mn></msub><mfenced separators=";"><msub><mi>x</mi><mn>1</mn></msub><msub><mi>r</mi><mn>1</mn></msub></mfenced><mo>,</mo><mo>…</mo><mo>,</mo><msub><mi mathvariant="script">P</mi><mi>m</mi></msub><mfenced separators=";"><msub><mi>x</mi><mi>m</mi></msub><msub><mi>r</mi><mi>m</mi></msub></mfenced><mo>〉</mo></mrow></mrow></math><img id="ib0029" file="imgb0029.tif" wi="67" he="14" img-content="math" img-format="tif"/></maths> the protocol Π between the interactive algorithms <i>P</i><sub>1</sub>,..., <i>P<sub>m</sub></i>, where <i>P<sub>i</sub></i> has input <i>x<sub>i</sub></i>, randomness <i>r<sub>i</sub></i>, output <i>y<sub>i</sub></i>, and view view<i><sub>i</sub></i>. The view view<i><sub>i</sub></i> consists of the input <i>x<sub>i</sub></i>, the input randomness <i>r<sub>i</sub></i>, and all messages received by <i>P<sub>i</sub></i> during the protocol execution. Let <i>I</i> ⊆ [<i>m</i>]<i>.</i> We use the shorthand view<i><sub>I</sub></i> to denote the set {(<i>i</i>, view<i><sub>i</sub></i>)}<sub><i>i</i>∈<i>I</i></sub>. In case that the output <i>P<sub>i</sub></i> is not explicitly needed, we write ∗ instead of <i>y<sub>i</sub></i>. For ease of readability, we omit the randomness <i>r<sub>i</sub></i> and/or the view view<i><sub>i</sub></i> of <i>P<sub>i</sub></i> if they are not explicitly needed. When the randomness <i>r<sub>i</sub></i> is omitted, it means that <i>r<sub>i</sub></i> is chosen uniformly from the appropriate domain. We use the special and distinct symbols <i>ε</i> and ⊥ to denote the empty string and an error (<i>e</i>.<i>g</i>., protocol abortion), respectively. Unless specified, the symbols <i>ε</i> and ⊥ are by default not a member of any set. Let <i>b</i> be a Boolean value. We use the shorthand "ensure <i>b</i>" to denote the procedure which outputs ⊥ (prematurely) if <i>b</i> ≠ 1.</p>
<p id="p0040" num="0040">Let <i>t</i>, <maths id="math0030" num=""><math display="inline"><mrow><mi>m</mi><mo>∈</mo><mi mathvariant="double-struck">N</mi></mrow></math><img id="ib0030" file="imgb0030.tif" wi="14" he="6" img-content="math" img-format="tif" inline="yes"/></maths> with <i>t</i> ≤ <i>m</i>. Let <i>PW</i> and <i>M</i> be the password space and the message space, respectively. Let <i>S</i> and <i>R<sub>i</sub></i> refer to the server and the <i>i</i>-th rate-limiter respectively for <i>i</i> ∈ [<i>m</i>].</p>
<p id="p0041" num="0041">A <i>t</i>-out-of-<i>m</i> threshold password-hardened encryption ((<i>t</i>, <i>m</i>)-PHE) scheme for <img id="ib0031" file="imgb0031.tif" wi="9" he="5" img-content="character" img-format="tif" inline="yes"/> and<img id="ib0032" file="imgb0032.tif" wi="7" he="5" img-content="character" img-format="tif" inline="yes"/> consists of the efficient algorithms and protocols (Setup, Enc, Dec, Rot, Udt), which we define as follows: <maths id="math0031" num=""><math display="block"><mrow><munder><mrow><mfenced separators=""><mi>crs</mi><mo>,</mo><msub><mi>sk</mi><mn>0</mn></msub><mo>,</mo><mo>…</mo><mo>,</mo><msub><mi>sk</mi><mi>m</mi></msub></mfenced><mo>←</mo><mi>Setup</mi><mfenced separators=",,"><msup><mn>1</mn><mi>λ</mi></msup><msup><mn>1</mn><mi>m</mi></msup><msup><mn>1</mn><mi>t</mi></msup></mfenced></mrow><mo>̲</mo></munder><mo>:</mo></mrow></math><img id="ib0033" file="imgb0033.tif" wi="70" he="7" img-content="math" img-format="tif"/></maths> The setup algorithm inputs the security parameter 1<sup>λ</sup>, the number of rate-limiters 1<i><sup>m</sup></i>, and the threshold 1<i><sup>t</sup></i>. It outputs the common reference string crs, the secret key sk<sub>0</sub> for the server and the secret key sk<i><sub>i</sub></i> for the <i>i</i>-th rate-limiter, for all <i>i</i> ∈ [<i>m</i>]. The common reference string is an implicit input to all other algorithms and protocols for all parties. <maths id="math0032" num=""><math display="block"><mrow><munder><mrow><mfenced separators=""><mfenced separators=","><mi>n</mi><mi>C</mi></mfenced><mo>,</mo><mi mathvariant="italic">ϵ</mi><mo>,</mo><mo>…</mo><mo>,</mo><mi mathvariant="italic">ϵ</mi></mfenced><mo>←</mo><mi>Enc</mi><mrow><mo>〈</mo><mtable><mtr><mtd><mi mathvariant="script">S</mi><mrow><mfenced separators=",,,"><mi>ʺENCʺ</mi><msub><mi>sk</mi><mn>0</mn></msub><mi>pw</mi><mi>M</mi></mfenced><mo>,</mo></mrow></mtd></mtr><mtr><mtd><msub><mi mathvariant="script">R</mi><mn>1</mn></msub><mfenced separators=","><mi>ʺENCʺ</mi><msub><mi>sk</mi><mn>1</mn></msub></mfenced><mo>,</mo></mtd></mtr><mtr><mtd><mo>…</mo><mo>,</mo></mtd></mtr><mtr><mtd><msub><mi mathvariant="script">R</mi><mi>m</mi></msub><mfenced separators=","><mi>ʺENCʺ</mi><msub><mi>sk</mi><mi>m</mi></msub></mfenced></mtd></mtr></mtable><mo>〉</mo></mrow><mo>:</mo></mrow><mrow><mo>̲</mo></mrow></munder></mrow></math><img id="ib0034" file="imgb0034.tif" wi="93" he="27" img-content="math" img-format="tif"/></maths><!-- EPO <DP n="13"> --> The encryption protocol is run between the server and (possibly a subset of) the <i>m</i> rate-limiters. The server inputs its secret key, a password pw ∈ <img id="ib0035" file="imgb0035.tif" wi="9" he="5" img-content="character" img-format="tif" inline="yes"/> , and a message <i>M</i> ∈ <img id="ib0036" file="imgb0036.tif" wi="7" he="5" img-content="character" img-format="tif" inline="yes"/> <i>.</i> The rate-limiters input their respective secret keys. The server outputs a nonce <i>n</i> and a ciphertext <i>C</i>, while each rate-limiter outputs an empty string <i>ε</i>. <maths id="math0033" num=""><math display="block"><mrow><munder><mrow><mfenced separators=""><mi>M</mi><mo>,</mo><msub><mi>n</mi><mn>1</mn></msub><mo>,</mo><mo>…</mo><mo>,</mo><msub><mi>n</mi><mi>m</mi></msub></mfenced><mo>←</mo><mi>Dec</mi><mrow><mo>〈</mo><mtable><mtr><mtd><mi mathvariant="script">S</mi><mrow><mfenced separators=",,,,"><mi>ʺDECʺ</mi><msub><mi>sk</mi><mn>0</mn></msub><mi>pw</mi><msub><mi>n</mi><mn>0</mn></msub><mi>C</mi></mfenced><mo>,</mo></mrow></mtd></mtr><mtr><mtd><msub><mi mathvariant="script">R</mi><mn>1</mn></msub><mfenced separators=","><mi>ʺDECʺ</mi><msub><mi>sk</mi><mn>1</mn></msub></mfenced><mo>,</mo></mtd></mtr><mtr><mtd><mo>…</mo><mo>,</mo></mtd></mtr><mtr><mtd><msub><mi mathvariant="script">R</mi><mi>m</mi></msub><mfenced separators=","><mi>ʺDECʺ</mi><msub><mi>sk</mi><mi>m</mi></msub></mfenced></mtd></mtr></mtable><mo>〉</mo></mrow><mo>:</mo></mrow><mrow><mo>̲</mo></mrow></munder></mrow></math><img id="ib0037" file="imgb0037.tif" wi="97" he="27" img-content="math" img-format="tif"/></maths> The decryption protocol is run between the server and (possibly a subset of) the <i>m</i> rate-limiters. The server inputs its secret key, a candidate password pw ∈ <img id="ib0038" file="imgb0038.tif" wi="9" he="5" img-content="character" img-format="tif" inline="yes"/> , a nonce <i>n</i><sub>0</sub>, and a ciphertext <i>C</i>. The rate-limiters input their respective secret keys. The server outputs a message <i>M</i>. Each rate-limiter outputs a nonce <i>n<sub>i</sub></i> which can be interpreted as the identifier of the ciphertext <i>C</i> in the view of <i>R<sub>i</sub></i>. <maths id="math0034" num=""><math display="block"><mrow><munder><mrow><mfenced separators=""><mfenced separators=","><msubsup><mi>sk</mi><mn>0</mn><mi>ʹ</mi></msubsup><mi>τ</mi></mfenced><mo>,</mo><msubsup><mi>sk</mi><mn>1</mn><mi>ʹ</mi></msubsup><mo>,</mo><mo>…</mo><mo>,</mo><msubsup><mi>sk</mi><mi>m</mi><mi>ʹ</mi></msubsup></mfenced><mo>←</mo><mi>Rot</mi><mrow><mo>〈</mo><mtable><mtr><mtd><mi mathvariant="script">S</mi><mrow><mfenced separators=","><mi>ʺROTʺ</mi><msub><mi>sk</mi><mn>0</mn></msub></mfenced><mo>,</mo></mrow></mtd></mtr><mtr><mtd><msub><mi mathvariant="script">R</mi><mn>1</mn></msub><mfenced separators=","><mi>ʺROTʺ</mi><msub><mi>sk</mi><mn>1</mn></msub></mfenced><mo>,</mo></mtd></mtr><mtr><mtd><mo>…</mo><mo>,</mo></mtd></mtr><mtr><mtd><msub><mi mathvariant="script">R</mi><mi>m</mi></msub><mfenced separators=","><mi>ʺROTʺ</mi><msub><mi>sk</mi><mi>m</mi></msub></mfenced></mtd></mtr></mtable><mo>〉</mo></mrow><mo>:</mo></mrow><mrow><mo>̲</mo></mrow></munder></mrow></math><img id="ib0039" file="imgb0039.tif" wi="97" he="28" img-content="math" img-format="tif"/></maths> The rotation protocol is run between the server and all <i>m</i> rate-limiters. Each party inputs its secret key and outputs a rotated key. The server additionally outputs an update token <i>τ</i>. <maths id="math0035" num=""><math display="block"><mrow><munder><mrow><mi mathvariant="italic">Cʹ</mi><mo>→</mo><mi>Udt</mi><mrow><mfenced separators=",,"><mi>τ</mi><mi>n</mi><mi>C</mi></mfenced></mrow></mrow><mrow><mo>̲</mo></mrow></munder><mo>:</mo></mrow></math><img id="ib0040" file="imgb0040.tif" wi="36" he="7" img-content="math" img-format="tif"/></maths> The update algorithm inputs an update token <i>τ</i>, a nonce <i>n</i>, and a ciphertext <i>C</i>. It outputs a new ciphertext <i>C'</i>.</p>
<p id="p0042" num="0042"><b>Remarks.</b> Although in general it is undesirable to rely on trusted parties in cryptographic primitives, in a typical application of (<i>t</i>, <i>m</i>)-PHE it is acceptable to let the server run the setup algorithm, send the rate-limiter keys to the respective rate-limiters, and securely delete those keys. This is because it is for the server's own benefit to employ a (<i>t</i>, <i>m</i>)-PHE scheme in the first place. Moreover, the rate-limiters do not contribute any private inputs other than their secret keys in any protocols. If we insist that the server cannot be trusted to run the setup, a standard solution is to emulate the setup using a secure multi-party computation (MPC) protocol.</p>
<p id="p0043" num="0043">In an embodiment of the invention, the nonces are handled differently compared to the approach in previous work [LER<sup>+</sup>18]. The new approach models the reality more closely<!-- EPO <DP n="14"> --> and is more intuitive. Previously, the encryption and decryption protocols take a "label" as common input for both the server and the rate-limiter, where the label consists of a server-side nonce and a rate-limiter-side nonce. This model deviates from the reality where the nonce is generated during (instead of before) the encryption protocol, stored by the server, and sent to the rate-limiter during decryption. More confusingly, the label input to the encryption protocol is by default an empty string, unless it is called in the forward security experiment.</p>
<p id="p0044" num="0044"><b>Correctness.</b> Correctness is defined in the obvious way and the formal definition is omitted. Roughly speaking, a (<i>t</i>, <i>m</i>)-PHE is correct whenever all honestly generated ciphertexts can be successfully decrypted to recover the encrypted message with the correct password, at long as at least <i>t</i> rate-limiters participate in the decryption protocol. Moreover, if a ciphertext passes decryption with respect to some secret keys, then the updated ciphertext also passes decryption with respect to the rotated keys.</p>
<p id="p0045" num="0045"><b>Security of</b> (<i>t</i>, <i>m</i>)-<b>PHE.</b> We define the hiding and soundness properties of (<i>t</i>, <i>m</i>)-PHE. As explained in the introduction, the former consolidates the hiding, obliviousness, and forward security properties of PHE, while the latter consolidates the soundness and strong soundness of PHE.</p>
<p id="p0046" num="0046"><b>Communication Model.</b> To justify the assumption that not too many rate-limiters collude, most preferably the communication between each <img id="ib0041" file="imgb0041.tif" wi="7" he="5" img-content="character" img-format="tif" inline="yes"/> and <img id="ib0042" file="imgb0042.tif" wi="4" he="5" img-content="character" img-format="tif" inline="yes"/> is done via a secure authenticated channel. For <i>i</i> ≠ <i>j</i>, there may not exist any communication channel between <img id="ib0043" file="imgb0043.tif" wi="7" he="5" img-content="character" img-format="tif" inline="yes"/> and <img id="ib0044" file="imgb0044.tif" wi="7" he="5" img-content="character" img-format="tif" inline="yes"/> .</p>
<heading id="h0006"><b>Construction of the encryption/decryption scheme</b></heading>
<p id="p0047" num="0047">The construction of the (<i>t</i>, <i>m</i>)-PHE scheme according to the invention is based on the PHE scheme of [LER<sup>+</sup>18]. The basic idea is to emulate the rate-limiter in [LER<sup>+</sup>18] using multiple rate-limiters. Specifically, a conceptual rate-limiter secret key is secret-shared to multiple rate-limiters, and the latter are to run several multi-party computation (MPC) protocols to emulate the conceptual rate-limiter. Although generic MPC protocols suffice for security, special-purpose protocols are designed for concrete efficiency.</p>
<p id="p0048" num="0048"><figref idref="f0001">Figure 1</figref> illustrates the encryption procedure according to the invention.<!-- EPO <DP n="15"> --></p>
<p id="p0049" num="0049">The server, holding a key-pair with a public and private key pair, has access to m rate-limiters where each rate-limiter is an independent instance having its own public and private key pair. First, the user sends his user name (i.e., the user identification), un, and his password, pw, to the server. The server, upon receiving the user identification, un, and the password, pw, creates a secret message, M, and engages in an interactive cryptographic protocol with <i>t'</i> rate limiters out of the number <i>m</i> of rate-limiters, to generate, on the basis of an interactive cryptographic encryption protocol, a ciphertext, C, which encrypts the password, pw, and the message M, using the respective secret keys sk<i><sub>i</sub></i> of the <i>t'</i> rate-limiters. The message M is an encryption key suitable for use with a symmetric key encryption scheme.</p>
<p id="p0050" num="0050">The interactive cryptographic encryption protocol used herein is adapted such that the the server needs only to interact with a subset of the number <i>m</i> of rate-limiters for decrypting the the ciphertext, C, to recover the secret message M. This subset, P, has the size <i>t</i>.</p>
<p id="p0051" num="0051">The message M can then be used to encrypt (private) user data by the server, by using a symmetrical encryption/decryption scheme. After having encrypted the user data, the message M can be deleted.</p>
<p id="p0052" num="0052"><figref idref="f0001">Figure 2</figref> illustrates the procedure of decryption of the ciphertext C in order to recover the key M. Upon receiving the user name, un, and password, pw, from the user, the server tetrieves the ciphertext C and engages in an interactive cryptographic protocol with <i>t</i> out of the <i>m</i> rate-limiters to decrypt the ciphertext C. Thereby, the server obtains the key M, and can use it to decrypt the (private) user information. Thereafter, M can be deleted again.</p>
<heading id="h0007"><b>Construction Overview</b></heading>
<p id="p0053" num="0053">Let <img id="ib0045" file="imgb0045.tif" wi="4" he="5" img-content="character" img-format="tif" inline="yes"/> be a cyclic group of prime order <i>p</i> with generator <i>G</i>, and let <i>H</i><sub>0</sub>, <i>H</i><sub>1</sub> : {0,1}<sup>∗</sup> →<img id="ib0046" file="imgb0046.tif" wi="4" he="5" img-content="character" img-format="tif" inline="yes"/> be two independent hash functions modelled as random oracles. The structure of the ciphertexts in the scheme according to the invention is derived from [LER<sup>+</sup>18]: A ciphertext <i>C</i> = SKE.Enc(<i>s</i><sub>0</sub>, (<i>C</i><sub>0</sub>, <i>C</i><sub>1</sub>)) consists of a symmetric-key ciphertext of two group elements <i>C</i><sub>0</sub> and <i>C</i><sub>1</sub> under the server secret key component <i>s</i><sub>0</sub>, and is accompanied by a<!-- EPO <DP n="16"> --> nonce <i>n</i>. The elements <i>C</i><sub>0</sub> and <i>C</i><sub>1</sub> have the format <maths id="math0036" num=""><math display="block"><mrow><msub><mi>C</mi><mn>0</mn></msub><mo>=</mo><msub><mi>H</mi><mn>0</mn></msub><mfenced separators=","><mi>pw</mi><mi>n</mi></mfenced><mo>⋅</mo><msub><mi>H</mi><mn>0</mn></msub><msup><mrow><mfenced><mi>n</mi></mfenced></mrow><mrow><msub><mrow><mover><mi>s</mi><mrow><mo>‾</mo></mrow></mover></mrow><mn>0</mn></msub></mrow></msup></mrow></math><img id="ib0047" file="imgb0047.tif" wi="47" he="7" img-content="math" img-format="tif"/></maths> <maths id="math0037" num=""><math display="block"><mrow><msub><mi>C</mi><mn>1</mn></msub><mo>=</mo><msub><mi>H</mi><mn>1</mn></msub><mfenced separators=","><mi>pw</mi><mi>n</mi></mfenced><mo>⋅</mo><msub><mi>H</mi><mn>1</mn></msub><msup><mrow><mfenced><mi>n</mi></mfenced></mrow><mrow><msub><mrow><mover><mi>s</mi><mrow><mo>‾</mo></mrow></mover></mrow><mn>0</mn></msub></mrow></msup><mo>⋅</mo><mi>M</mi></mrow></math><img id="ib0048" file="imgb0048.tif" wi="55" he="7" img-content="math" img-format="tif"/></maths> where <i><o ostyle="single">s</o></i><sub>0</sub> is part of the conceptual rate-limiter secret key, and <i>M</i> is the encrypted message. The conceptual key <i><o ostyle="single">s</o></i><sub>0</sub> is secret-shared to <i>m</i> rate-limiters using the well-known Shamir secret sharing scheme with reconstruction threshold <i>t</i>. It should be noted that in general, any linear secret sharing scheme to support more expressive access policies can be used. A subtle simplification in our scheme compared to that of [LER<sup>+</sup>18] is that there is no distinction between the server nonce and the rate-limiter nonce. In our scheme, the nonce <i>n</i> is obtained via a coin-flipping protocol between the server and <i>t</i> rate-limiters. The server key is now used in a secret-key encryption scheme to allow for stronger security properties.</p>
<p id="p0054" num="0054">An important feature of the Shamir secret sharing scheme is that the reconstruction function is linear. That is, given a set of <i>t</i> shares and their indices <maths id="math0038" num=""><math display="inline"><mrow><msubsup><mfenced open="{" close="}"><mrow><mfenced separators=","><msub><mi>i</mi><mi>j</mi></msub><msub><mi>s</mi><mrow><msub><mi>i</mi><mi>j</mi></msub></mrow></msub></mfenced></mrow></mfenced><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>t</mi></msubsup><mo>,</mo></mrow></math><img id="ib0049" file="imgb0049.tif" wi="24" he="8" img-content="math" img-format="tif" inline="yes"/></maths> there exists a public linear combination with some coefficients (<i>λ</i><sub>1</sub>,...,<i>λ</i><sub>t</sub>) such that <i><o ostyle="single">s</o></i><sub>0</sub> = <maths id="math0039" num=""><math display="inline"><mrow><mrow><mstyle displaystyle="false"><mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>t</mi></munderover></mrow></mstyle><mrow><msub><mi>λ</mi><mi>j</mi></msub><msub><mi>s</mi><mrow><msub><mi>i</mi><mi>j</mi></msub></mrow></msub></mrow></mrow><mn>.</mn></mrow></math><img id="ib0050" file="imgb0050.tif" wi="23" he="8" img-content="math" img-format="tif" inline="yes"/></maths> This feature is crucial for the decryption protocol, as we will see.</p>
<heading id="h0008"><b>Formal Description</b></heading>
<p id="p0055" num="0055"><b>Ingredients.</b> Given a finite set <img id="ib0051" file="imgb0051.tif" wi="4" he="5" img-content="character" img-format="tif" inline="yes"/> of size |<img id="ib0052" file="imgb0052.tif" wi="4" he="5" img-content="character" img-format="tif" inline="yes"/> | <i>≥ t</i>, let Subset<i><sub>t</sub></i>(<img id="ib0053" file="imgb0053.tif" wi="4" he="5" img-content="character" img-format="tif" inline="yes"/> ) be an algorithm which returns an arbitrary size-<i>t</i> subset <i>P</i> of <img id="ib0054" file="imgb0054.tif" wi="4" he="5" img-content="character" img-format="tif" inline="yes"/> <i>.</i> Let <maths id="math0040" num=""><math display="inline"><mrow><mi>GGen</mi><mo>:</mo><mspace width="1em"/><msup><mn>1</mn><mi>λ</mi></msup><mo>↦</mo><mfenced separators=",,"><mi mathvariant="double-struck">G</mi><mi>p</mi><mi>G</mi></mfenced></mrow></math><img id="ib0055" file="imgb0055.tif" wi="41" he="8" img-content="math" img-format="tif" inline="yes"/></maths> be a group generation algorithm which maps the security parameter 1<sup>λ</sup> to the description <maths id="math0041" num=""><math display="inline"><mrow><mfenced separators=",,"><mi mathvariant="double-struck">G</mi><mi>p</mi><mi>G</mi></mfenced></mrow></math><img id="ib0056" file="imgb0056.tif" wi="18" he="7" img-content="math" img-format="tif" inline="yes"/></maths> of a cyclic group <img id="ib0057" file="imgb0057.tif" wi="4" he="5" img-content="character" img-format="tif" inline="yes"/> of prime order <i>p</i> with generator <i>G</i>. Let <i>t</i>, <maths id="math0042" num=""><math display="inline"><mrow><mi>m</mi><mo>∈</mo><mi mathvariant="double-struck">N</mi></mrow></math><img id="ib0058" file="imgb0058.tif" wi="15" he="7" img-content="math" img-format="tif" inline="yes"/></maths> with <i>t</i> ≤ <i>m</i> ≤ <i>p.</i> For any subset <i>P</i> ⊆ [<i>m</i>] and <i>i</i> ∈ <i>P</i>, recall the Lagrange polynomial <maths id="math0043" num=""><math display="inline"><mrow><msub><mrow><mo>ℓ</mo></mrow><mrow><mi>P</mi><mo>,</mo><mi>i</mi></mrow></msub><mfenced><mi>x</mi></mfenced><mo>:</mo><mo>=</mo><mrow><mstyle displaystyle="false"><mrow><munder><mo>∏</mo><mrow><mi>j</mi><mo>∈</mo><mi>P</mi><mo>\</mo><mfenced open="{" close="}"><mi>i</mi></mfenced></mrow></munder></mrow></mstyle><mrow><mfrac><mrow><mi>x</mi><mo>−</mo><mi>j</mi></mrow><mrow><mi>i</mi><mo>−</mo><mi>j</mi></mrow></mfrac></mrow></mrow><mn>.</mn></mrow></math><img id="ib0059" file="imgb0059.tif" wi="43" he="8" img-content="math" img-format="tif" inline="yes"/></maths> Let λ<i><sub>P,i</sub></i> := ℓ<sub><i>P</i>,<i>i</i></sub>(0). For the ease of notation, we define λ<sub><i>P</i>,0</sub> := 1 for all <i>P</i>. Let <i>H</i><sub>0</sub>, <i>H</i><sub>1</sub> : <maths id="math0044" num=""><math display="inline"><mrow><msup><mfenced open="{" close="}" separators=","><mn>0</mn><mn>1</mn></mfenced><mrow><mo>*</mo></mrow></msup><mo>→</mo><mi mathvariant="double-struck">G</mi></mrow></math><img id="ib0060" file="imgb0060.tif" wi="24" he="7" img-content="math" img-format="tif" inline="yes"/></maths> and <i>H</i> : {0,1}* → {0, 1}<sup>λ</sup> be independent hash functions to be modeled as random oracles. Let SKE.(KGen, Enc, Dec) be a symmetric-key encryption scheme. Let (GGen, Prove, Vf) be a non-interactive zero-knowledge proof of knowledge (NIZKPoK)<!-- EPO <DP n="17"> --> scheme for the relation <maths id="math0045" num=""><math display="block"><mrow><msub><mi>R</mi><mi>GDL</mi></msub><mo>:</mo><mo>=</mo><mfenced open="{" close="}"><mtable><mtr><mtd><mfenced separators=",,"><mi mathvariant="double-struck">G</mi><mi>G</mi><mi>p</mi></mfenced><mo>,</mo></mtd></mtr><mtr><mtd><mfenced><mtable><mtr><mtd><msub><mi>A</mi><mrow><mn>1</mn><mo>,</mo><mn>1</mn></mrow></msub></mtd><mtd><mo>…</mo></mtd><mtd><msub><mi>A</mi><mrow><mn>1</mn><mo>,</mo><mi>n</mi></mrow></msub></mtd><mtd><msub><mi>B</mi><mn>1</mn></msub></mtd></mtr><mtr><mtd><mo>⋮</mo></mtd><mtd><mo>⋱</mo></mtd><mtd><mo>⋮</mo></mtd><mtd><mo>⋮</mo></mtd></mtr><mtr><mtd><msub><mi>A</mi><mrow><mi>m</mi><mo>,</mo><mn>1</mn></mrow></msub></mtd><mtd><mo>…</mo></mtd><mtd><msub><mi>A</mi><mrow><mi>m</mi><mo>,</mo><mi>n</mi></mrow></msub></mtd><mtd><msub><mi>B</mi><mi>m</mi></msub></mtd></mtr></mtable></mfenced><mo>∈</mo><msup><mi mathvariant="double-struck">G</mi><mrow><mi>m</mi><mo>×</mo><mi>n</mi><mfenced separators=""><mi>n</mi><mo>+</mo><mn>1</mn></mfenced></mrow></msup><mo>,</mo></mtd></mtr><mtr><mtd><mfenced separators=""><msub><mi>x</mi><mn>1</mn></msub><mo>,</mo><mo>…</mo><mo>,</mo><msub><mi>x</mi><mi>n</mi></msub></mfenced><mo>∈</mo><msub><mi mathvariant="double-struck">Z</mi><mi>p</mi></msub><mo>:</mo></mtd></mtr><mtr><mtd><mo>∀</mo><mi>i</mi><mo>∈</mo><mfenced open="[" close="]"><mi>m</mi></mfenced><mo>,</mo><msub><mrow><mspace width="1em"/><mi mathvariant="italic">B</mi></mrow><mi>i</mi></msub><mo>=</mo><mrow><mstyle displaystyle="false"><mrow><munderover><mo>∏</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover></mrow></mstyle><mrow><msubsup><mi>A</mi><mrow><mi>i</mi><mo>,</mo><mi>j</mi></mrow><mrow><msub><mi>x</mi><mi>j</mi></msub></mrow></msubsup></mrow></mrow></mtd></mtr></mtable></mfenced></mrow></math><img id="ib0061" file="imgb0061.tif" wi="95" he="41" img-content="math" img-format="tif"/></maths> as described in the Appendix below.</p>
<p id="p0056" num="0056"><b>Setup (refer to</b> <figref idref="f0001"><b>Figure 3</b></figref> <b>and</b> <figref idref="f0002"><b>Figure 4</b></figref><b>)</b>. The setup algorithm first runs GGen to generate the description of the group. It then generates the secret keys sk<sub>0</sub>,...,sk<i><sub>m</sub></i>, where sk<i><sub>i</sub></i> has the format <maths id="math0046" num=""><math display="inline"><mrow><mfenced separators=",,,,"><msub><mi>s</mi><mi>i</mi></msub><msub><mi>k</mi><mi>i</mi></msub><msub><mi>S</mi><mn>0</mn></msub><msub><mi>K</mi><mn>0</mn></msub><msubsup><mfenced open="{" close="}" separators=","><msub><mrow><mover><mi>S</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi></msub><msub><mrow><mover><mi>K</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi></msub></mfenced><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msubsup></mfenced></mrow></math><img id="ib0062" file="imgb0062.tif" wi="49" he="9" img-content="math" img-format="tif" inline="yes"/></maths> where <i>s</i><sub>0</sub> is a secret key for a symmetric key encryption scheme SKE and <maths id="math0047" num=""><math display="block"><mrow><msup><mi>G</mi><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow></msup><mo>=</mo><mrow><mstyle displaystyle="false"><mrow><munderover><mo>∏</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></munderover></mrow></mstyle><msubsup><mrow><mover><mi>S</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi><mrow><msup><mi>i</mi><mi>j</mi></msup></mrow></msubsup></mrow><mo>,</mo><mspace width="1em"/><mi mathvariant="italic">i</mi><mo>∈</mo><mfenced open="[" close="]"><mi>m</mi></mfenced></mrow></math><img id="ib0063" file="imgb0063.tif" wi="45" he="8" img-content="math" img-format="tif"/></maths> <maths id="math0048" num=""><math display="block"><mrow><msup><mi>G</mi><mrow><msub><mi>k</mi><mi>i</mi></msub></mrow></msup><mo>=</mo><mrow><mo>{</mo><mtable columnalign="left" width="auto"><mtr><mtd><msub><mi>K</mi><mn>0</mn></msub></mtd><mtd><mi>i</mi><mo>=</mo><mn>0</mn></mtd></mtr><mtr><mtd><mrow><mstyle displaystyle="false"><mrow><munderover><mrow><mo>∏</mo></mrow><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></munderover></mrow></mstyle><msubsup><mrow><mover><mi>K</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi><mrow><msup><mi>i</mi><mi>j</mi></msup></mrow></msubsup></mrow></mtd><mtd><mi>i</mi><mo>∈</mo><mfenced open="[" close="]"><mi>m</mi></mfenced><mn>.</mn></mtd></mtr></mtable></mrow></mrow></math><img id="ib0064" file="imgb0064.tif" wi="52" he="18" img-content="math" img-format="tif"/></maths></p>
<p id="p0057" num="0057">Each party can verify the validity of their keys using the subroutine KVf defined in <figref idref="f0006">Figure 11</figref>.</p>
<p id="p0058" num="0058"><b>Encryption (refer to</b> <figref idref="f0002"><b>Figure 5</b></figref> <b>and to</b> <figref idref="f0003"><b>Figure 6</b></figref><b>)</b>. Preferably, the encryption protocol begins with a coin-flipping procedure. Each party samples some randomness <i>n</i><sub>i</sub> and exchanges their randomness with each other. They then hash all randomness using the hash function <i>H</i> to create a nonce <i>n.</i> With the help of the rate-limiters, the server computes the tuple (<i>C</i><sub>0</sub>, <i>C</i><sub>1</sub>) := (<i>H</i><sub>0</sub>(pw, <i>n</i>) · <i>H<sub>o</sub></i>(<i>n</i>)<sup><i><o ostyle="single">s</o></i><sub2>0</sub2></sup>, <i>H</i><sub>1</sub>(pw, <i>n</i>) · <i>H</i><sub>1</sub>(<i>n</i>)<sup><i><o ostyle="single">s</o></i><sub2>0</sub2></sup> · <i>M</i>)<i>.</i> It then computes <i>C</i> ← SKE.Enc(<i>s</i><sub>0</sub>, (<i>C</i><sub>0</sub>, <i>C</i><sub>1</sub>)).</p>
<p id="p0059" num="0059">Let <i>P</i> be any <i>t</i>-subset of [<i>m</i>]. The ciphertext components <i>H</i><sub>0</sub>(<i>n</i>)<sup><i><o ostyle="single">s</o></i><sub2>0</sub2></sup> and <i>H</i><sub>1</sub>(<i>n</i>)<sup><i><o ostyle="single">s</o></i><sub2>0</sub2></sup> can be expressed as <i>H</i><sub>0</sub>(<i>n</i><sup><i><o ostyle="single">s</o></i><sub2>0</sub2></sup> = <i>H</i><sub>0</sub>(<i>n</i>)<sup>∑<sub2><i>i</i>∈</sub2><i><sub>P</sub>λ<sub>P,i</sub>s<sub>i</sub></i></sup> and <i>H</i><sub>1</sub>(<i>n</i>)<sup><i><o ostyle="single">s</o></i><sub2>0</sub2></sup> = <i>H</i><sub>1</sub>(<i>n</i>)<sup>∑<sub2><i>i</i>∈</sub2><i><sub>P</sub>λ<sub>P,i</sub>s<sub>i</sub></i></sup> respectively.</p>
<p id="p0060" num="0060"><b>Decryption (refer to</b> <figref idref="f0004"><b>Figure 7</b></figref> <b>and to</b> <figref idref="f0005"><b>Figure 8</b></figref><b>).</b> The decryption protocol begins with the server informing the rate-limiters of the nonce <i>n</i>, and decrypting the ciphertext <i>C</i> to obtain (<i>C</i><sub>0</sub>, <i>C</i><sub>1</sub>). The server then computes the value <i>Y</i><sub>0,0</sub> := <i>C</i><sub>0</sub> · <i>H</i><sub>0</sub>(pw, <i>n</i>)<sup>-1</sup>, while<!-- EPO <DP n="18"> --> the <i>i</i>-th rate-limiter computes Y<sub><i>i</i>,0</sub> := <i>H</i><sub>0</sub>(<i>n</i>)<i><sup>s<sub2>i</sub2></sup>.</i> Conceptually, the parties would like to check if <maths id="math0049" num=""><math display="inline"><mrow><msub><mi>Y</mi><mrow><mn>0</mn><mo>,</mo><mn>0</mn></mrow></msub><mo>=</mo><mrow><mstyle displaystyle="false"><mrow><munder><mo>∏</mo><mrow><mi>i</mi><mo>∈</mo><mi>P</mi></mrow></munder></mrow></mstyle><mrow><msubsup><mi>Y</mi><mrow><mi>i</mi><mo>,</mo><mn>0</mn></mrow><mrow><msub><mi>λ</mi><mrow><mi>P</mi><mo>,</mo><mi>i</mi></mrow></msub></mrow></msubsup></mrow></mrow></mrow></math><img id="ib0065" file="imgb0065.tif" wi="32" he="9" img-content="math" img-format="tif" inline="yes"/></maths> for some <i>t</i>-subset <i>P</i> of [<i>m</i>]. If the relation is satisfied, meaning that the password is likely correct, the rate-limiters would jointly help the server to compute <i>H</i><sub>1</sub>(<i>n</i>)<sup><i><o ostyle="single">s</o></i><sub2>0</sub2></sup>, which allows the latter to recover the message <i>M</i>. However, naively performing the joint computation of <i>H</i><sub>1</sub>(<i>n</i>)<sup><i><o ostyle="single">s</o></i><sub2>0</sub2></sup> would cost one extra round of computation. In the following, a three-phase protocol is outlined where the round for computing the value <i>H</i><sub>1</sub>(<i>n</i>)<sup><i><o ostyle="single">s</o></i><sub2>0</sub2></sup> is merged with one of the rounds in the checking procedure.</p>
<p id="p0061" num="0061">Step a) First, the parties jointly compute an encryption of the value <maths id="math0050" num=""><math display="inline"><mrow><mi>Z</mi><mo>:</mo><mo>=</mo><msubsup><mi>Y</mi><mrow><mn>0</mn><mo>,</mo><mn>0</mn></mrow><mrow><mo>−</mo><mn>1</mn></mrow></msubsup><mrow><mstyle displaystyle="false"><mrow><munder><mo>∏</mo><mrow><mi>i</mi><mo>∈</mo><mi>P</mi></mrow></munder></mrow></mstyle><msubsup><mi>Y</mi><mrow><mi>i</mi><mo>,</mo><mn>0</mn></mrow><mrow><msub><mi>λ</mi><mrow><mi>P</mi><mo>,</mo><mi>i</mi></mrow></msub></mrow></msubsup></mrow></mrow></math><img id="ib0066" file="imgb0066.tif" wi="38" he="9" img-content="math" img-format="tif" inline="yes"/></maths> under the public key <i>K</i> = <i>K</i><sub>0</sub> · <i><o ostyle="single">K</o></i><sub>0</sub>, where the corresponding secret key is secret-shared among the participants. This can be done by having the parties encrypt their respective inputs using the linearly-homomorphic ElGamal encryption scheme, exchange the ciphertexts with each other (via the server), and homomorphically compute an encryption of <i>Z</i> locally. This costs 2 rounds of communication.</p>
<p id="p0062" num="0062">Recall that the goal of the protocol is to allow the server to obtain <i>H</i><sub>1</sub>(<i>n</i>)<sup><i><o ostyle="single">s</o></i><sub2>0</sub2></sup> in the case <i>Z</i> = <i>I</i> (the identity element). We observe that for a randomly sampled <i>r̃</i> and for an arbitrary group element <i>A, Z<sup>r̃</sup></i> · <i>A</i> = <i>A</i> when <i>Z</i> = <i>I</i>, and uniformly random otherwise. With this observation, in the second phase, step b), the parties jointly compute the encryption of <i>Z<sup>r̃</sup></i> and <i>Z<sup>r̃</sup><sup>'</sup></i> · <i>H</i><sub>1</sub>(<i>n</i>)<sup><i><o ostyle="single">s</o></i><sub2>0</sub2></sup> respectively for random <i>r̃</i> and <i>r̃'.</i> Similar to the first phase, this costs another 2 rounds of communication.</p>
<p id="p0063" num="0063">In the last phase, step c), the parties jointly help the server to decrypt the ciphertexts, so that the latter can check whether <i>Z<sup>r̃</sup></i> = <i>I</i> (and hence <i>Z</i> = <i>I</i>), and if so obtain <i>H</i><sub>1</sub>(<i>n</i>)<sup><i><o ostyle="single">s</o></i><sub2>0</sub2></sup>. This costs 1 round of communication. Together with the first round where the server sends the nonce <i>n</i>, we obtain a 6-round protocol.</p>
<p id="p0064" num="0064">At this point, the decryption functionality is already achieved and the protocol can already be terminated. However, the rate-limiters have no knowledge about whether the decryption was successful or not, <i>i.e.</i>, whether <i>Z</i> = <i>I</i>, and thus can only perform "coarse-grained" rate-limiting. That is, the rate-limiters would count both successful and failed decryption attempts, since they cannot distinguish between the two. This is often sufficient in applications, since typically a user would not login (successfully) too frequently. To support "fine-grained" rate-limiting, the server would send an extra message to the rate-limiters to allow them to decrypt the encryption of <i>Z<sup>r̃</sup></i>. These additional steps are highlighted in dashed boxes in <figref idref="f0005">Figure 8</figref>. This costs an extra round of communication and results in a 7-round protocol.<!-- EPO <DP n="19"> --></p>
<p id="p0065" num="0065"><b>Key</b> Rotation <b>and Ciphertext Update (refer to</b> <figref idref="f0006"><b>Figure 9, Figure 11</b></figref><b>, as well as to</b> <figref idref="f0006"><b>Figure 10</b></figref><b>).</b> The goal of key-rotation is to update the secret keys from sk<i><sub>i</sub></i> to <maths id="math0051" num=""><math display="inline"><mrow><msubsup><mi>sk</mi><mi>i</mi><mi>ʹ</mi></msubsup><mo>,</mo></mrow></math><img id="ib0067" file="imgb0067.tif" wi="9" he="8" img-content="math" img-format="tif" inline="yes"/></maths> where <maths id="math0052" num=""><math display="block"><mrow><msub><mi>sk</mi><mi>i</mi></msub><mo>=</mo><mfenced separators=",,,,"><msub><mi>s</mi><mi>i</mi></msub><msub><mi>k</mi><mi>i</mi></msub><msub><mi>S</mi><mn>0</mn></msub><msub><mi>K</mi><mn>0</mn></msub><msubsup><mfenced open="{" close="}" separators=","><msub><mrow><mover><mi>S</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi></msub><msub><mrow><mover><mi>K</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi></msub></mfenced><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msubsup></mfenced></mrow></math><img id="ib0068" file="imgb0068.tif" wi="60" he="8" img-content="math" img-format="tif"/></maths> <maths id="math0053" num=""><math display="block"><mrow><msubsup><mi>sk</mi><mi>i</mi><mi>ʹ</mi></msubsup><mo>=</mo><mfenced separators=",,,,"><msubsup><mi>s</mi><mi>i</mi><mi>ʹ</mi></msubsup><msubsup><mi>k</mi><mi>i</mi><mi>ʹ</mi></msubsup><msubsup><mi>S</mi><mn>0</mn><mi>ʹ</mi></msubsup><msubsup><mi>K</mi><mn>0</mn><mi>ʹ</mi></msubsup><msubsup><mfenced open="{" close="}" separators=","><msubsup><mrow><mover><mi>S</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi><mi>ʹ</mi></msubsup><msubsup><mrow><mover><mi>K</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi><mi>ʹ</mi></msubsup></mfenced><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msubsup></mfenced></mrow></math><img id="ib0069" file="imgb0069.tif" wi="60" he="8" img-content="math" img-format="tif"/></maths> where <maths id="math0054" num=""><math display="inline"><mrow><msubsup><mi>s</mi><mn>0</mn><mi>ʹ</mi></msubsup></mrow></math><img id="ib0070" file="imgb0070.tif" wi="6" he="6" img-content="math" img-format="tif" inline="yes"/></maths> is a fresh secret key for SKE, and the following properties hold:
<tables id="tabl0002" num="0002">
<table frame="none">
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colnum="1" colname="col1" colwidth="33mm"/>
<colspec colnum="2" colname="col2" colwidth="37mm"/>
<tbody>
<row>
<entry align="right"/>
<entry align="center"><maths id="math0055" num=""><math display="block"><mrow><msubsup><mi>K</mi><mn>0</mn><mi>ʹ</mi></msubsup><mo>=</mo><msubsup><mi>K</mi><mn>0</mn><mi>γ</mi></msubsup><mo>=</mo><msup><mi>G</mi><mrow><msubsup><mi>k</mi><mn>0</mn><mi>ʹ</mi></msubsup></mrow></msup></mrow></math><img id="ib0071" file="imgb0071.tif" wi="30" he="7" img-content="math" img-format="tif"/></maths></entry></row>
<row>
<entry align="right"><maths id="math0056" num=""><math display="block"><mrow><mo>∀</mo><mi>j</mi><mo>∈</mo><mfenced open="[" close="]" separators=""><mn>0</mn><mo>,</mo><mi>t</mi><mo>−</mo><mn>1</mn></mfenced></mrow></math><img id="ib0072" file="imgb0072.tif" wi="27" he="7" img-content="math" img-format="tif"/></maths></entry>
<entry align="center"><maths id="math0057" num=""><math display="block"><mrow><msubsup><mrow><mover><mi>S</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi><mi>ʹ</mi></msubsup><mo>=</mo><msub><mrow><mover><mi>S</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi></msub><msup><mi>G</mi><mrow><msub><mrow><mover><mi>β</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi></msub></mrow></msup></mrow></math><img id="ib0073" file="imgb0073.tif" wi="23" he="8" img-content="math" img-format="tif"/></maths></entry></row>
<row>
<entry align="right"><maths id="math0058" num=""><math display="block"><mrow><mo>∀</mo><mi>j</mi><mo>∈</mo><mfenced open="[" close="]" separators=""><mn>0</mn><mo>,</mo><mi>t</mi><mo>−</mo><mn>1</mn></mfenced></mrow></math><img id="ib0074" file="imgb0074.tif" wi="27" he="7" img-content="math" img-format="tif"/></maths></entry>
<entry align="center"><maths id="math0059" num=""><math display="block"><mrow><msubsup><mrow><mover><mi>K</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi><mi>ʹ</mi></msubsup><mo>=</mo><msubsup><mrow><mover><mi>K</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi><mi>γ</mi></msubsup><msup><mi>G</mi><mrow><msub><mrow><mover><mi>δ</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi></msub></mrow></msup></mrow></math><img id="ib0075" file="imgb0075.tif" wi="24" he="8" img-content="math" img-format="tif"/></maths></entry></row>
<row>
<entry align="right"><maths id="math0060" num=""><math display="block"><mrow><mo>∀</mo><mi>i</mi><mo>∈</mo><mfenced open="[" close="]"><mi>m</mi></mfenced></mrow></math><img id="ib0076" file="imgb0076.tif" wi="18" he="7" img-content="math" img-format="tif"/></maths></entry>
<entry align="center"><maths id="math0061" num=""><math display="block"><mrow><msup><mi>G</mi><mrow><msubsup><mi>s</mi><mi>i</mi><mi>ʹ</mi></msubsup></mrow></msup><mo>=</mo><msubsup><mrow><mstyle displaystyle="false"><mrow><munderover><mrow><mo>∏</mo></mrow><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mi>t</mi></munderover></mrow></mstyle><mrow><mover><mi>S</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>ʹ</mi></mrow><mi>j</mi><mrow><msup><mi>i</mi><mi>j</mi></msup></mrow></msubsup></mrow></math><img id="ib0077" file="imgb0077.tif" wi="29" he="9" img-content="math" img-format="tif"/></maths></entry></row>
<row>
<entry align="right"><maths id="math0062" num=""><math display="block"><mrow><mo>∀</mo><mi>i</mi><mo>∈</mo><mfenced open="[" close="]"><mi>m</mi></mfenced></mrow></math><img id="ib0078" file="imgb0078.tif" wi="18" he="7" img-content="math" img-format="tif"/></maths></entry>
<entry align="center"><maths id="math0063" num=""><math display="block"><mrow><msup><mi>G</mi><mrow><msubsup><mi>k</mi><mi>i</mi><mi>ʹ</mi></msubsup></mrow></msup><mo>=</mo><mrow><mstyle displaystyle="false"><mrow><munderover><mrow><mo>∏</mo></mrow><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mi>t</mi></munderover></mrow></mstyle><mrow><mover><mi>K</mi><mrow><mo>‾</mo></mrow></mover><msubsup><mi>ʹ</mi><mi>j</mi><mrow><msup><mi>i</mi><mi>j</mi></msup></mrow></msubsup></mrow></mrow></mrow></math><img id="ib0079" file="imgb0079.tif" wi="30" he="8" img-content="math" img-format="tif"/></maths></entry></row></tbody></tgroup>
</table>
</tables>
for some random integers <i><o ostyle="single">β</o></i><sub>0</sub>,...,<i><o ostyle="single">β</o></i><sub><i>t</i>-1</sub>, γ, <i><o ostyle="single">δ</o></i><sub>0</sub>,...,<i><o ostyle="single">δ</o></i><sub><i>t</i>-1</sub> sampled by the server.</p>
<p id="p0066" num="0066">Given the update token (<i>s</i><sub>0</sub><i>,</i> <maths id="math0064" num=""><math display="inline"><mrow><msubsup><mi>s</mi><mn>0</mn><mi>ʹ</mi></msubsup><mo>,</mo></mrow></math><img id="ib0080" file="imgb0080.tif" wi="7" he="7" img-content="math" img-format="tif" inline="yes"/></maths> <i><o ostyle="single">β</o></i><sub>0</sub>) and a nonce <i>n,</i> the server can simply update each ciphertext <i>C</i> ∈ SKE.Enc(<i>s</i><sub>0</sub>, (<i>C</i><sub>0</sub>, <i>C</i><sub>1</sub>)) to <maths id="math0065" num=""><math display="inline"><mrow><mi mathvariant="italic">Cʹ</mi><mo>←</mo><mi>SKE</mi><mn>.</mn><mi>Enc</mi><mfenced separators=","><msubsup><mi>s</mi><mn>0</mn><mi>ʹ</mi></msubsup><mfenced separators=","><msubsup><mi>C</mi><mn>0</mn><mi>ʹ</mi></msubsup><msubsup><mi>C</mi><mn>1</mn><mi>ʹ</mi></msubsup></mfenced></mfenced></mrow></math><img id="ib0081" file="imgb0081.tif" wi="53" he="8" img-content="math" img-format="tif" inline="yes"/></maths> where <maths id="math0066" num=""><math display="inline"><mrow><msubsup><mi>C</mi><mn>0</mn><mi>ʹ</mi></msubsup><mo>:</mo><mo>=</mo><msub><mi>C</mi><mn>0</mn></msub><mn>.</mn></mrow></math><img id="ib0082" file="imgb0082.tif" wi="23" he="7" img-content="math" img-format="tif" inline="yes"/></maths> <i>H</i><sub>0</sub>(<i>n</i>)<sup><i><o ostyle="single">β</o></i><sub2>0</sub2></sup> and <maths id="math0067" num=""><math display="inline"><mrow><msubsup><mi>C</mi><mn>1</mn><mi>ʹ</mi></msubsup><mo>:</mo><mo>=</mo><msub><mi>C</mi><mn>1</mn></msub><mo>⋅</mo><msub><mi>H</mi><mn>1</mn></msub><msup><mrow><mfenced><mi>n</mi></mfenced></mrow><mrow><msub><mrow><mover><mi>β</mi><mrow><mo>‾</mo></mrow></mover></mrow><mn>0</mn></msub></mrow></msup><mn>.</mn></mrow></math><img id="ib0083" file="imgb0083.tif" wi="36" he="8" img-content="math" img-format="tif" inline="yes"/></maths></p>
<p id="p0067" num="0067"><b>Correctness and Security.</b> The correctness of the construction according to the invention follows from the correctness of SKE and the completeness of the NIZKPoK scheme described in the Appendix. Below, we state the security of the construction according to the invention with respect to the two security poperties <i>hiding</i> and <i>soundness.</i> Definitions of the terms hiding and soundness, and a proof sketch for the security are given in the Appendix below.</p>
<p id="p0068" num="0068"><b>Theorem 1 (Hiding)</b> <i>If the decisional Diffie-Hellman (DDH) assumption holds with respect to</i> GGen, <i>and</i> SKE <i>is CCA-secure, then the</i> (<i>t</i>, <i>m</i>)<i>-PHE scheme constructed above is hiding in the random oracle model.</i></p>
<p id="p0069" num="0069"><b>Theorem 2 (Soundness)</b> <i>If the discrete logarithm assumption holds with respect to</i> GGen, <i>then the</i> (<i>t</i>, <i>m</i>)<i>-PHE scheme constructed above is sound in the random oracle model.</i></p>
<p id="p0070" num="0070">Note that there is an error in [LER<sup>+</sup>18], where the strong soundness property is claimed to hold assuming only the soundness of the NIZKPoK, which in turn holds unconditionally<!-- EPO <DP n="20"> --> in the random oracle model. In fact, they would also need to rely on the discrete logarithm assumption.</p>
<heading id="h0009"><b>Evaluation</b></heading>
<p id="p0071" num="0071">Following prior work [LER<sup>+</sup>18], Server and rate-limiters are implemented in Python using the Charm [AGM<sup>+</sup>13] framework. For interactions the falcon REST framework (for the rate-limiter), Python requests (for the server), and HTTP keep-alive were used. The cryptographic primitives, namely SHA-256 and NIST P-256 have also been kept. This enables meaningful comparison between the results of this implementation and the previous scheme.</p>
<p id="p0072" num="0072">All results are measured in the LAN setting for different choices of the threshold <i>t</i> and number of rate-limiters <i>m</i>. The threshold variant requires several communication rounds, especially in the decryption protocol. Individual intermediate rounds are transmitted via POST calls. The rate-limiters use in-memory dictionaries for storing the states. In our experiment setup, the server is sending out multiple requests at once and waits for <i>t</i> rate-limiters to respond.</p>
<heading id="h0010"><b>Results</b></heading>
<p id="p0073" num="0073"><b>Latency.</b> The latency of encryption (resp. decryption) of the (<i>t, m</i>)-PHE scheme has been measured, <i>i.e.</i>, the time needed to complete an encryption (resp. decryption) protocol execution. For <i>t</i> = <i>m</i> = 1, Table 1 shows that the average latency for encryption is 8.431 ms, and that for decryption is 18.763 ms, where the averages are taken over 100 executions. Further experiments show that the threshold <i>t</i> and total number of rate-limiters <i>m</i> do not affect the latency significantly.</p>
<p id="p0074" num="0074">The scheme presented here has a higher latency by an estimated factor of two for encryption and a factor of three for decryption, mainly due to the additional communication rounds (2x for encryption and 3x for the decryption protocol) compared to the PHE in [LER<sup>+</sup>18].</p>
<p id="p0075" num="0075"><b>Throughput.</b> To estimate the computational resources needed, the throughput (maximum number of encryption and decryption requests per time) of (<i>t</i>, <i>m</i>)-PHE for different thresholds <i>t</i> and number of rate-limiters <i>m</i> has been measured. For various values of<!-- EPO <DP n="21"> -->
<tables id="tabl0003" num="0003">
<table frame="all">
<title>Table 1: Latency Comparison</title>
<tgroup cols="2">
<colspec colnum="1" colname="col1" colwidth="31mm"/>
<colspec colnum="2" colname="col2" colwidth="24mm"/>
<thead>
<row>
<entry valign="top">Scheme</entry>
<entry valign="top">Latency in ms</entry></row></thead>
<tbody>
<row rowsep="0">
<entry>[LER<sup>+</sup>18] - Encrypt</entry>
<entry>4.501</entry></row>
<row>
<entry>[LER<sup>+</sup>18] - Decrypt</entry>
<entry>4.959</entry></row>
<row rowsep="0">
<entry>Ours - Encrypt</entry>
<entry>8.431</entry></row>
<row>
<entry>Ours - Decrypt</entry>
<entry>18.763</entry></row></tbody></tgroup>
</table>
</tables>
<tables id="tabl0004" num="0004">
<table frame="all">
<title>Table 2: Encryption and Decryption Requests per Second</title>
<tgroup cols="3">
<colspec colnum="1" colname="col1" colwidth="27mm"/>
<colspec colnum="2" colname="col2" colwidth="37mm"/>
<colspec colnum="3" colname="col3" colwidth="37mm"/>
<thead>
<row>
<entry valign="top">Threshold <i>t</i></entry>
<entry valign="top">Encryption Requests/s</entry>
<entry valign="top">Decryption Requests/s</entry></row></thead>
<tbody>
<row>
<entry>1 ([LER<sup>+</sup>18])</entry>
<entry>736.59</entry>
<entry>711.07</entry></row>
<row>
<entry>1</entry>
<entry>524.33</entry>
<entry>192.91</entry></row>
<row>
<entry>3</entry>
<entry>228.71</entry>
<entry>114.38</entry></row>
<row>
<entry>5</entry>
<entry>145.84</entry>
<entry>67.01</entry></row>
<row>
<entry>8</entry>
<entry>105.36</entry>
<entry>47.03</entry></row>
<row>
<entry>11</entry>
<entry>65.05</entry>
<entry>27.94</entry></row>
<row>
<entry>13</entry>
<entry>53.79</entry>
<entry>22.03</entry></row>
<row>
<entry>15</entry>
<entry>48.96</entry>
<entry>19.68</entry></row></tbody></tgroup>
</table>
</tables></p>
<p id="p0076" num="0076">(<i>t</i>, <i>m</i>) with <i>t</i> = <i>m</i>, <figref idref="f0007">Figure 12 and Figure 13</figref> show the inverse of the throughput (<i>i.e</i>., amortized time per request) and the throughput against the threshold of <i>t</i> respectively, while the raw data is reported in Table 2. The reported numbers are all averages over 1000 executions. As shown in the figures, the amortized time per request scales somewhat linearly with the threshold <i>t</i>. Further experiments show that increasing the number of rate-limiters <i>m</i> for a fixed threshold <i>t</i> does not significantly affect the throughput.</p>
<p id="p0077" num="0077">There is a gradual reduction of throughput for a higher number of rate-limiters. This is due to an implementation artifact that forces sequential processing of answers. Parallelization should remove this bottleneck and help (<i>t</i>, <i>m</i>)<i>-PHE</i> scale more efficiently. We also expect that implementing (<i>t</i>, <i>m</i>)-PHE in programming languages with compiler optimizations, <i>e.g</i>., Rust [MK14], would significantly improve the performance.</p>
<heading id="h0011"><b>Discussion</b></heading>
<p id="p0078" num="0078">In this section miscellaneous topics related to the construction according to this invention willbe discussed, including different variants, an optimization, a generalization, extensions, and applications.<!-- EPO <DP n="22"> --></p>
<p id="p0079" num="0079"><b>Fine-Grained Rate-Limiting.</b> The construction according to the present invention leads to two slightly different variants of (<i>t</i>, <i>m</i>)-PHE - one which supports fine-grained rate-limiting and one which only supports coarse-grained rate-limiting. The former requires a 7-round decryption protocol while the latter requires only 6 rounds. Apart from saving communication costs, the coarse-grained variant has an additional benefit that the rate-limiters stay oblivious to whether the password was correct. For practical purposes this can also be interpreted as follows: For a login process, server and rate-limiters first execute the 6-round protocol, and the server considers the user as successfully authenticated. The last message (the 7-th round) can then be sent in the background to the rate-limiters, who will then "refund" the login attempt.</p>
<p id="p0080" num="0080">Both variants are covered by our security definitions and proofs: While the fine-grained variant is covered natively, the coarse-grained variant is also covered as it only penalizes the adversary for additional (successful) decryption attempts.</p>
<p id="p0081" num="0081"><b>Further Optimizations.</b> It should be noted that the proofs π<sub>1,<i>i</i></sub>, π<sub>2,<i>i</i></sub>, <maths id="math0068" num=""><math display="inline"><mrow><msubsup><mi>π</mi><mrow><mn>2</mn><mo>,</mo><mi>i</mi></mrow><mi>ʹ</mi></msubsup></mrow></math><img id="ib0084" file="imgb0084.tif" wi="9" he="7" img-content="math" img-format="tif" inline="yes"/></maths> can be merged into a single proof in a non-blackbox way. Conceptually, until the joint decryption phase, the parties only compute on random group elements and thus verifying the integrity of the messages can be delayed until right before the joint decryption phase. Merging the proofs saves some communication cost by not sending duplicating commitments corresponding to the same witness. However doing so would further complicate the presentation of our protocol and hide its structure. Therefore we choose to not incorporate this optimization.</p>
<p id="p0082" num="0082"><b>More General Access Structures and Dynamic Rate-Limiters.</b> Below, extensions of the present (<i>t</i>, <i>m</i>)-PHE scheme obtained by extending the underlying secret sharing scheme are discussed.</p>
<p id="p0083" num="0083">The scheme presented here only supports a basic threshold access structure. In real-world deployments, more complex access structures might be desirable (<i>e.g</i>., to have a single backup rate-limiter who is normally offline, or to require rate-limiters from different geographic areas in addition to a threshold of them).</p>
<p id="p0084" num="0084">To this end, observe that the Shamir secret sharing scheme we are using can be replaced by any linear secret sharing scheme without further changing the protocol. The resulting construction supports any access policies specified by monotone span programs [KW93].</p>
<p id="p0085" num="0085">In a real-world application of (<i>t</i>, <i>m</i>)-PHE, it might happen that the keys of some rate-limiters<!-- EPO <DP n="23"> --> are lost due to an incident or malicious intervention. If too many rate-limiter keys are lost, the server risks losing all the user data as they can no longer be decrypted. To prevent such situations, it is useful to consider natural extensions of (<i>t</i>, <i>m</i>)-PHE which allows recovery of lost rate-limiter keys and changing the set of rate-limiters (to a new set of possibly different size) dynamically.</p>
<p id="p0086" num="0086">While standard methods [AGY95] exist for dynamic resharing, due to our more relaxed security requirements, the round complexity of dynamic resharing can be improved: Let <i>s<sub>i</sub></i> be the <i>i</i>-th share of the conceptual rate-limiter secret key <i><o ostyle="single">s</o></i><sub>0</sub> generated by a (<i>t</i>, <i>m</i>)-secret sharing scheme. To convert to a new (<i>t'</i>, <i>m'</i>) system, a <i>t</i>-subset <i>I</i> ⊂ [<i>m</i>] of the previous share-holders create <i>m'</i> shares {<i>s</i><sub><i>i</i>,<i>j</i></sub>}<sub><i>j</i>∈[<i>m'</i>]</sub> of their shares <i>s<sub>i</sub></i> as follows. Each <i>i</i> ∈ <i>I</i> sets <i><o ostyle="single">s</o></i><sub><i>i</i>,0</sub> := <i>s<sub>i</sub></i> and samples <i><o ostyle="single">s</o></i><sub><i>i</i>,<i>k</i></sub> for <i>k</i> ∈ [<i>t'</i> - 1]. It then computes <maths id="math0069" num=""><math display="inline"><mrow><msub><mi>s</mi><mrow><mi>i</mi><mo>,</mo><mi>j</mi></mrow></msub><mo>:</mo><mo>=</mo><msub><mrow><mstyle displaystyle="false"><mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi mathvariant="italic">tʹ</mi><mo>−</mo><mn>1</mn></mrow></munderover></mrow></mstyle><mrow><mover><mi>s</mi><mrow><mo>‾</mo></mrow></mover></mrow></mrow><mrow><mi>i</mi><mo>,</mo><mi>k</mi></mrow></msub><msup><mi>j</mi><mi>k</mi></msup></mrow></math><img id="ib0085" file="imgb0085.tif" wi="36" he="9" img-content="math" img-format="tif" inline="yes"/></maths> for each <i>j</i> ∈ [<i>m'</i>], and <i><o ostyle="single">S</o></i><sub><i>i</i>,<i>k</i></sub> for <i>k</i> ∈ [<i>t'</i> - 1]. The share <i>S</i><sub><i>i</i>,<i>j</i></sub> is sent to the new <i>j</i>-th rate-limiter, while <maths id="math0070" num=""><math display="inline"><mrow><msubsup><mfenced open="{" close="}" separators=""><msub><mrow><mover><mi>S</mi><mrow><mo>‾</mo></mrow></mover></mrow><mrow><mi>i</mi><mo>,</mo><mi>k</mi></mrow></msub><mo>=</mo><msup><mi>G</mi><mrow><msub><mrow><mover><mi>s</mi><mrow><mo>‾</mo></mrow></mover></mrow><mrow><mi>i</mi><mo>,</mo><mi>k</mi></mrow></msub></mrow></msup></mfenced><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi mathvariant="italic">tʹ</mi><mo>−</mo><mn>1</mn></mrow></msubsup></mrow></math><img id="ib0086" file="imgb0086.tif" wi="34" he="8" img-content="math" img-format="tif" inline="yes"/></maths> is broadcasted. Upon receiving the shares {<i>S</i><sub><i>i</i>,<i>j</i></sub>}<sub><i>i</i>∈<i>I</i></sub>, each new shareholder <i>j</i> ∈ [<i>m'</i>] can recover their share <maths id="math0071" num=""><math display="inline"><mrow><msubsup><mi>s</mi><mi>j</mi><mi>ʹ</mi></msubsup></mrow></math><img id="ib0087" file="imgb0087.tif" wi="6" he="8" img-content="math" img-format="tif" inline="yes"/></maths> as <maths id="math0072" num=""><math display="block"><mrow><msubsup><mi>s</mi><mi>j</mi><mi>ʹ</mi></msubsup><mo>=</mo><msub><mi mathvariant="script">L</mi><mi>I</mi></msub><mfenced separators=""><msub><mi>s</mi><mrow><msub><mi>i</mi><mn>1</mn></msub><mo>,</mo><mi>j</mi></mrow></msub><mo>,</mo><mo>…</mo><mo>,</mo><msub><mi>s</mi><mrow><msub><mi>i</mi><mi>t</mi></msub><mo>,</mo><mi>j</mi></mrow></msub></mfenced></mrow></math><img id="ib0088" file="imgb0088.tif" wi="43" he="7" img-content="math" img-format="tif"/></maths> using a linear function <img id="ib0089" file="imgb0089.tif" wi="7" he="7" img-content="character" img-format="tif" inline="yes"/> determined by the set <i>I.</i> To see that <maths id="math0073" num=""><math display="inline"><mrow><msub><mfenced open="{" close="}"><msubsup><mi>s</mi><mi>j</mi><mi>ʹ</mi></msubsup></mfenced><mrow><mi>j</mi><mo>∈</mo><mfenced open="[" close="]"><mi mathvariant="italic">mʹ</mi></mfenced></mrow></msub></mrow></math><img id="ib0090" file="imgb0090.tif" wi="18" he="8" img-content="math" img-format="tif" inline="yes"/></maths> are valid shares of the conceptual secret key <i><o ostyle="single">s</o></i><sub>0</sub>, note that for any <i>t'</i>-subset <i>J</i> ⊆ [<i>m'</i>], we have <maths id="math0074" num=""><math display="block"><mrow><mtable><mtr><mtd><msub><mi mathvariant="script">L</mi><mi>J</mi></msub><mfenced><msub><mfenced open="{" close="}"><msubsup><mi>s</mi><mi>j</mi><mi>ʹ</mi></msubsup></mfenced><mrow><mi>j</mi><mo>∈</mo><mi>J</mi></mrow></msub></mfenced></mtd><mtd columnalign="left"><mo>=</mo><msub><mi mathvariant="script">L</mi><mi>J</mi></msub><mfenced><msub><mfenced open="{" close="}" separators=""><msub><mi mathvariant="script">L</mi><mi>I</mi></msub><mfenced><msub><mfenced open="{" close="}"><msub><mi>s</mi><mrow><mi>i</mi><mo>,</mo><mi>j</mi></mrow></msub></mfenced><mrow><mi>i</mi><mo>∈</mo><mi>I</mi></mrow></msub></mfenced></mfenced><mrow><mi>j</mi><mo>∈</mo><mi>J</mi></mrow></msub></mfenced></mtd></mtr><mtr><mtd><mspace width="1em"/></mtd><mtd columnalign="left"><mo>=</mo><msub><mi mathvariant="script">L</mi><mi>I</mi></msub><mfenced><msub><mfenced open="{" close="}" separators=""><msub><mi mathvariant="script">L</mi><mi>J</mi></msub><mfenced><msub><mfenced open="{" close="}"><msub><mi>s</mi><mrow><mi>i</mi><mo>,</mo><mi>j</mi></mrow></msub></mfenced><mrow><mi>j</mi><mo>∈</mo><mi>J</mi></mrow></msub></mfenced></mfenced><mrow><mi>i</mi><mo>∈</mo><mi>I</mi></mrow></msub></mfenced></mtd></mtr><mtr><mtd><mspace width="1em"/></mtd><mtd columnalign="left"><mo>=</mo><msub><mi mathvariant="script">L</mi><mi>I</mi></msub><mfenced><msub><mfenced open="{" close="}"><msub><mi>s</mi><mi>i</mi></msub></mfenced><mrow><mi>i</mi><mo>∈</mo><mi>I</mi></mrow></msub></mfenced></mtd></mtr><mtr><mtd><mspace width="1em"/></mtd><mtd columnalign="left"><mo>=</mo><msub><mrow><mover><mi>s</mi><mrow><mo>‾</mo></mrow></mover></mrow><mn>0</mn></msub></mtd></mtr></mtable></mrow></math><img id="ib0091" file="imgb0091.tif" wi="76" he="33" img-content="math" img-format="tif"/></maths></p>
<p id="p0087" num="0087">All parties can also compute the new public key <maths id="math0075" num=""><math display="inline"><mrow><msubsup><mrow><mover><mi>S</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>k</mi><mi>ʹ</mi></msubsup></mrow></math><img id="ib0092" file="imgb0092.tif" wi="6" he="7" img-content="math" img-format="tif" inline="yes"/></maths> for <i>k</i> ∈ [0, <i>t'</i> - 1] as a power product of {<i><o ostyle="single">S</o></i><sub><i>i</i>,<i>k</i></sub>}<sub><i>i</i>∈<i>I</i></sub> with coefficients given by <img id="ib0093" file="imgb0093.tif" wi="7" he="7" img-content="character" img-format="tif" inline="yes"/> <i>.</i> The well-formedness of <maths id="math0076" num=""><math display="inline"><mrow><msubsup><mi>s</mi><mi>j</mi><mi>ʹ</mi></msubsup></mrow></math><img id="ib0094" file="imgb0094.tif" wi="7" he="7" img-content="math" img-format="tif" inline="yes"/></maths> can then be publicly verified using the new public keys <maths id="math0077" num=""><math display="inline"><mrow><msubsup><mrow><mover><mi>S</mi><mrow><mo>‾</mo></mrow></mover></mrow><mn>0</mn><mi>ʹ</mi></msubsup><mo>,</mo><mo>…</mo><mo>,</mo><msubsup><mrow><mover><mi>S</mi><mrow><mo>‾</mo></mrow></mover></mrow><mrow><mi mathvariant="italic">tʹ</mi><mo>−</mo><mn>1</mn></mrow><mi>ʹ</mi></msubsup><mn>.</mn></mrow></math><img id="ib0095" file="imgb0095.tif" wi="26" he="9" img-content="math" img-format="tif" inline="yes"/></maths></p>
<p id="p0088" num="0088"><b>Non-Interactive Rotation.</b> The key-rotation protocol in the construction presented here is a non-interactive protocol initiated by the server. This is useful in practice as it means that not all rate-limiters need to be reachable to execute the key-rotation protocol. Instead, the server can initiate key-rotation ahead of time, and cache the messages supposed to be sent the rate-limiters until they become available. It is even possible to queue several key-rotations while a rate-limiter is unavailable (<i>e.g.</i>, due to maintenance) and later apply all the changes in one shot.<!-- EPO <DP n="24"> --></p>
<p id="p0089" num="0089">It is, however, important to remember that leaking the key-rotation materials will defeat the self-healing properties of key-rotation. An adversary who learns this information can construct the new (resp. old) keys associated with this key-rotation material if it also has knowledge of the old (resp. new) keys. Therefore caching the key-rotation materials has to be based on a balanced decision in practical deployments.</p>
<p id="p0090" num="0090"><b>Cold Storage.</b> One of the applications of (<i>t</i>, <i>m</i>)-PHE concerns cold storage: The server operator spawns a number of additional rate-limiters which suffices to perform decryption, and stores their keys offline. As long as these keys are well-protected (<i>e.g</i>., physically) this does not reduce the security of the deployed system and, in the case of irresponsive rate-limiters the server operator can always recover its data.</p>
<p id="p0091" num="0091">The non-interactive nature of our key-rotation protocol helps with this use-case. As long as key-rotations happen infrequently, it is possibly to store (a sequence of) key-rotation materials for each rate-limiters in cold-storage along with the rate-limiter keys. Once needed these materials can the be recombined to restore an up-to-date set of rate-limiter keys.</p>
<heading id="h0012"><b>References</b></heading>
<p id="p0092" num="0092">
<dl id="dl0001">
<dt>[AGM<sup>+</sup>13]</dt><dd><nplcit id="ncit0001" npl-type="s"><text>Joseph A. Akinyele, Christina Garman, Ian Miers, Matthew W. Pagano, Michael Rushanan, Matthew Green, and Aviel D. Rubin. Charm: a frame-work for rapidly prototyping cryptosystems. Journal of Cryptographic Engineering, 3(2):111-128, 2013</text></nplcit>.</dd>
<dt>[AGY95]</dt><dd><nplcit id="ncit0002" npl-type="b"><text>Noga Alon, Zvi Galil, and Moti Yung. Efficient dynamic-resharing "verifiable secret sharing" against mobile adversary. In Paul Spirakis, editor, Algorithms - ESA '95, pages 523-537, Berlin, Heidelberg, 1995. Springer Berlin Heidelberg</text></nplcit>.</dd>
<dt>[AMMM18]</dt><dd><nplcit id="ncit0003" npl-type="b"><text>Shashank Agrawal, Peihan Miao, Payman Mohassel, and Pratyay Mukherjee. PASTA: PASsword-based threshold authentication. In David Lie, Mohammad Mannan, Michael Backes, and XiaoFeng Wang, editors, ACM CCS 2018: 25th Conference on Computer and Communications Security, pages 2042-2059, Toronto, ON, Canada, October 15-19, 2018. ACM Press</text></nplcit>.</dd>
<dt>[BJSL11]</dt><dd><nplcit id="ncit0004" npl-type="b"><text>Ali Bagherzandi, Stanislaw Jarecki, Nitesh Saxena, and Yanbin Lu. Password-protected secret sharing. In Yan Chen, George Danezis, and Vitaly<!-- EPO <DP n="25"> --> Shmatikov, editors, ACM CCS 2011: 18th Conference on Computer and Communications Security, pages 433-444, Chicago, Illinois, USA, October 17-21, 2011. ACM Press</text></nplcit>.</dd>
<dt>[ECS<sup>+</sup>15]</dt><dd><nplcit id="ncit0005" npl-type="b"><text>Adam Everspaugh, Rahul Chatterjee, Samuel Scott, Ari Juels, and Thomas Ristenpart. The pythia PRF service. In Jaeyeon Jung and Thorsten Holz, editors, USENIX Security 2015: 24th USENIX Security Symposium, pages 547-562, Washington, DC, USA, August 12-14, 2015. USENIX Association</text></nplcit>.</dd>
<dt>[ElG84]</dt><dd><nplcit id="ncit0006" npl-type="b"><text>Taher ElGamal. A public key cryptosystem and a signature scheme based on discrete logarithms. In G. R. Blakley and David Chaum, editors, Advances in Cryptology - CRYPTO'84, volume 196 of Lecture Notes in Computer Science, pages 10-18, Santa Barbara, CA, USA, August 19-23, 1984. Springer, Heidelberg, Germany</text></nplcit>.</dd>
<dt>[FLPQ13]</dt><dd><nplcit id="ncit0007" npl-type="b"><text>Pooya Farshim, Benoît Libert, Kenneth G. Paterson, and Elizabeth A. Quaglia. Robust encryption, revisited. In Kaoru Kurosawa and Goichiro Hanaoka, editors, PKC 2013: 16th International Conference on Theory and Practice of Public Key Cryptography, volume 7778 of Lecture Notes in Computer Science, pages 352-368, Nara, Japan, February 26 - March 1, 2013. Springer, Heidelberg, Germany</text></nplcit>.</dd>
<dt>[FS87]</dt><dd><nplcit id="ncit0008" npl-type="b"><text>Amos Fiat and Adi Shamir. How to prove yourself: Practical solutions to identification and signature problems. In Andrew M. Odlyzko, editor, Advances in Cryptology - CRYPTO'86, volume 263 of Lecture Notes in Computer Science, pages 186-194, Santa Barbara, CA, USA, August 1987. Springer, Heidelberg, Germany</text></nplcit>.</dd>
<dt>[KW93]</dt><dd><nplcit id="ncit0009" npl-type="s"><text>Mauricio Karchmer and Avi Wigderson. On span programs. In Proceedings of Structures in Complexity Theory, pages 102-111, 1993</text></nplcit>.</dd>
<dt>[LER<sup>+</sup>18]</dt><dd><nplcit id="ncit0010" npl-type="b"><text>Russell W. F. Lai, Christoph Egger, Manuel Reinert, Sherman S. M. Chow, Matteo Maffei, and Dominique Schroder. Simple password-hardened encryption services. In William Enck and Adrienne Porter Felt, editors, USENIX Security 2018: 27th USENIX Security Symposium, pages 1405-1421, Baltimore, MD, USA, August 15-17, 2018. USENIX Association</text></nplcit>.</dd>
<dt>[LESC17]</dt><dd><nplcit id="ncit0011" npl-type="b"><text>Russell W. F. Lai, Christoph Egger, Dominique Schroder, and Sherman S. M. Chow. Phoenix: Rebirth of a cryptographic password-hardening service. In Engin Kirda and Thomas Ristenpart, editors, USENIX Security 2017:<!-- EPO <DP n="26"> --> 26th USENIX Security Symposium, pages 899-916, Vancouver, BC, Canada, August 16-18, 2017. USENIX Association</text></nplcit>.</dd>
<dt>[MK14]</dt><dd><nplcit id="ncit0012" npl-type="s"><text>Nicholas D. Matsakis and Felix S. Klock, II. The rust language. Ada Lett., 34(3):103-104, October 2014</text></nplcit>.</dd>
<dt>[Mufl5]</dt><dd><nplcit id="ncit0013" npl-type="s"><text>Allec Muffet. Facebook: Password hashing and authentication. , 2015. Video</text></nplcit>.</dd>
<dt>[PCI16]</dt><dd><nplcit id="ncit0014" npl-type="s"><text>PCI Security Standards Council. Requirements and security assessment procedures. PCI DSS v3.2, 2016</text></nplcit>.</dd>
<dt>[Sch90]</dt><dd><nplcit id="ncit0015" npl-type="b"><text>Claus-Peter Schnorr. Efficient identification and signatures for smart cards. In Gilles Brassard, editor, Advances in Cryptology - CRYPTO'89, volume 435 of Lecture Notes in Computer Science, pages 239-252, Santa Barbara, CA, USA, August 20-24, 1990. Springer, Heidelberg, Germany</text></nplcit>.</dd>
<dt>[SFSB16]</dt><dd><nplcit id="ncit0016" npl-type="b"><text>Jonas Schneider, Nils Fleischhacker, Dominique Schroder, and Michael Backes. Efficient cryptographic password hardening services from partially oblivious commitments. In Edgar R. Weippl, Stefan Katzenbeisser, Christopher Kruegel, Andrew C. Myers, and Shai Halevi, editors, ACM CCS 2016: 23rd Conference on Computer and Communications Security, pages 1192-1203, Vienna, Austria, October 24-28, 2016. ACM Press.</text></nplcit></dd>
<dt>[Sha79]</dt><dd><nplcit id="ncit0017" npl-type="s"><text>Adi Shamir. How to share a secret. Communications of the Association for Computing Machinery, 22(11):612-613, November 1979</text></nplcit>.</dd>
</dl><!-- EPO <DP n="27"> -->
<img id="ib0096" file="imgb0096.tif" wi="162" he="222" img-content="undefined" img-format="tif"/><!-- EPO <DP n="28"> -->
<img id="ib0097" file="imgb0097.tif" wi="161" he="233" img-content="undefined" img-format="tif"/><!-- EPO <DP n="29"> -->
<img id="ib0098" file="imgb0098.tif" wi="162" he="233" img-content="undefined" img-format="tif"/><!-- EPO <DP n="30"> -->
<img id="ib0099" file="imgb0099.tif" wi="162" he="233" img-content="undefined" img-format="tif"/><!-- EPO <DP n="31"> -->
<img id="ib0100" file="imgb0100.tif" wi="161" he="233" img-content="undefined" img-format="tif"/><!-- EPO <DP n="32"> -->
<img id="ib0101" file="imgb0101.tif" wi="161" he="233" img-content="undefined" img-format="tif"/><!-- EPO <DP n="33"> -->
<img id="ib0102" file="imgb0102.tif" wi="162" he="230" img-content="undefined" img-format="tif"/><!-- EPO <DP n="34"> -->
<img id="ib0103" file="imgb0103.tif" wi="162" he="233" img-content="undefined" img-format="tif"/><!-- EPO <DP n="35"> -->
<img id="ib0104" file="imgb0104.tif" wi="162" he="228" img-content="undefined" img-format="tif"/><!-- EPO <DP n="36"> -->
<img id="ib0105" file="imgb0105.tif" wi="162" he="226" img-content="undefined" img-format="tif"/><!-- EPO <DP n="37"> -->
<img id="ib0106" file="imgb0106.tif" wi="162" he="233" img-content="undefined" img-format="tif"/><!-- EPO <DP n="38"> -->
<img id="ib0107" file="imgb0107.tif" wi="162" he="170" img-content="undefined" img-format="tif"/></p>
</description>
<claims id="claims01" lang="en"><!-- EPO <DP n="39"> -->
<claim id="c-en-0001" num="0001">
<claim-text>Computer-implemented method for encrypting data by a server in cooperation with a predetermined number (<i>m</i>) of rate limiters,
<claim-text>the predetermined number (<i>m</i>) being greater than 1,</claim-text>
<claim-text>each of the rate-limiters being a respective processing unit different from each other and from the server, and having a respective secret key (sk<sub>1</sub>, ..., sk<i><sub>t</sub></i>, ..., sk<i><sub>m</sub></i>),</claim-text>
<claim-text>the server having a predetermined secret key (sk<sub>0</sub>),</claim-text>
the method comprising:
<claim-text>receiving, by the server, from the user, a user identification (un), and a password (pw) to be encrypted,</claim-text>
<claim-text>creating, by the server, a secret message (<i>M</i>),<br/>
the secret message (<i>M</i>) being a key suitable for use with a predetermined symmetric key encryption/decryption scheme,</claim-text>
<claim-text>generating, by the server in cooperation with a subset (P) of a size (<i>t'</i>) which is equal to or greater than a predetermined threshold (<i>t</i>), out of the predetermined number <i>(m)</i> of rate limiters, on the basis of a predetermined interactive cryptographic encryption protocol, a ciphertext (<i>C</i>) which encrypts the user password (pw), and the secret message (<i>M</i>) using the respective secret keys (sk<i><sub>i</sub></i>) of the rate limiters of the subset (P),<!-- EPO <DP n="40"> --></claim-text>
<claim-text>the threshold (<i>t</i>) being smaller than or equal to the predetermined number (<i>m</i>) of rate limiters, and</claim-text>
<claim-text>the predetermined interactive cryptographic protocol being adapted such that the server needs only to interact with a subset (P) of the predetermined size (<i>t</i>) of the predetermined number (<i>m</i>) of rate limiters for decryption of the ciphertext (<i>C</i>) to recover the secret message (<i>M</i>),</claim-text>
storing, by the server, the ciphertext (<i>C</i>), in association with the user identification (un); and<br/>
deleting the secret message (<i>M</i>), and the password (pw).</claim-text></claim>
<claim id="c-en-0002" num="0002">
<claim-text>The method of claim 1, further comprising
<claim-text>generating, by the server, a server nonce (<i>n</i><sub>0</sub>), on the basis of a predetermined random process,</claim-text>
<claim-text>receiving, by the server, a predetermined number (<i>m</i>) of rate-limiter nonces (<i>n</i><sub>1</sub>, ... <i>n<sub>i</sub></i>, ..., <i>n<sub>m</sub></i>), each rate-limiter nonce (<i>n<sub>i</sub></i>) created by a respective rate-limiter on a basis of a random operation,</claim-text>
<claim-text>making known the nonces to the predetermined number (<i>m</i>) of rate limiters,</claim-text>
<claim-text>using the nonces for generating the ciphertext (<i>C</i>).</claim-text></claim-text></claim>
<claim id="c-en-0003" num="0003">
<claim-text>The method of the preceding claim, wherein:
<claim-text>the ciphertext (<i>C</i>) is a tuple (<i>C</i><sub>0</sub>, <i>C</i><sub>1</sub>) encrypted with a predetermined symmetric encryption key (<i>s</i><sub>0</sub>) which is a part of the server secret key (sk<sub>0</sub>),</claim-text>
<claim-text>the tuple (C<sub>0</sub>, C<sub>1</sub>) being computed as<!-- EPO <DP n="41"> --> <maths id="math0078" num=""><math display="block"><mrow><msub><mi>C</mi><mn>0</mn></msub><mo>=</mo><msub><mi>H</mi><mn>0</mn></msub><mfenced separators=","><mi>pw</mi><mi>n</mi></mfenced><mo>⋅</mo><msub><mi>H</mi><mn>0</mn></msub><msup><mrow><mfenced><mi>n</mi></mfenced></mrow><mrow><msub><mrow><mover><mi>s</mi><mrow><mo>‾</mo></mrow></mover></mrow><mn>0</mn></msub></mrow></msup></mrow></math><img id="ib0108" file="imgb0108.tif" wi="43" he="7" img-content="math" img-format="tif"/></maths> <maths id="math0079" num=""><math display="block"><mrow><msub><mi>C</mi><mn>1</mn></msub><mo>=</mo><msub><mi>H</mi><mn>1</mn></msub><mfenced separators=","><mi>pw</mi><mi>n</mi></mfenced><mo>⋅</mo><msub><mi>H</mi><mn>1</mn></msub><msup><mrow><mfenced><mi>n</mi></mfenced></mrow><mrow><msub><mrow><mover><mi>s</mi><mrow><mo>‾</mo></mrow></mover></mrow><mn>0</mn></msub></mrow></msup><mo>⋅</mo><mi>M</mi></mrow></math><img id="ib0109" file="imgb0109.tif" wi="49" he="7" img-content="math" img-format="tif"/></maths> wherein:
<claim-text><i>H</i><sub>0</sub>, <i>H</i><sub>1</sub> representing independent Hash functions,</claim-text>
<claim-text><i><o ostyle="single">s</o></i><sub>0</sub> is part of a conceptual rate-limiter key which is secret-shared to the predetermined number (<i>m</i>) of rate-limiters on the basis of a predetermined linear secret sharing scheme with a reconstruction threshold equal to the subset (P) wherein for a given subset (P) of rate limiters, there exists a public linear combination such that <maths id="math0080" num=""><math display="inline"><mrow><msub><mrow><mover><mi>s</mi><mrow><mo>‾</mo></mrow></mover></mrow><mn>0</mn></msub><mo>=</mo><mrow><mstyle displaystyle="false"><mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>t</mi></munderover></mrow></mstyle><mrow><msub><mi>λ</mi><mi>j</mi></msub><msub><mi>s</mi><mrow><msub><mi>i</mi><mi>j</mi></msub></mrow></msub></mrow></mrow></mrow></math><img id="ib0110" file="imgb0110.tif" wi="27" he="8" img-content="math" img-format="tif" inline="yes"/></maths> holds,
<claim-text>with</claim-text>
<claim-text><i>t</i> denoting the number of rate-limiters of the subset (P);</claim-text>
<claim-text>λ being a predetermined security parameter.</claim-text></claim-text></claim-text></claim-text></claim>
<claim id="c-en-0004" num="0004">
<claim-text>The method of claim 3, wherein:<br/>
for any subset (P) of the number (<i>m</i>) of rate-limiters<br/>
<i>H</i><sub>0</sub>, <i>H</i><sub>1</sub> can be expressed as <maths id="math0081" num=""><math display="block"><mrow><msub><mi>H</mi><mn>0</mn></msub><msup><mfenced><mi>n</mi></mfenced><mrow><msub><mrow><mover><mi>s</mi><mrow><mo>‾</mo></mrow></mover></mrow><mn>0</mn></msub></mrow></msup><mo>=</mo><msub><mi>H</mi><mn>0</mn></msub><msup><mfenced><mi>n</mi></mfenced><mrow><mstyle displaystyle="false"><mrow><munder><mrow><mo>∑</mo></mrow><mrow><mi>i</mi><mo>∈</mo><mi>P</mi></mrow></munder><mrow><msub><mi>λ</mi><mrow><mi>P</mi><mo>,</mo><mi>i</mi></mrow></msub><msub><mi>s</mi><mi>i</mi></msub></mrow></mrow></mstyle></mrow></msup></mrow></math><img id="ib0111" file="imgb0111.tif" wi="47" he="7" img-content="math" img-format="tif"/></maths> and <maths id="math0082" num=""><math display="block"><mrow><msub><mi>H</mi><mn>1</mn></msub><msup><mfenced><mi>n</mi></mfenced><mrow><msub><mrow><mover><mi>s</mi><mrow><mo>‾</mo></mrow></mover></mrow><mn>0</mn></msub></mrow></msup><mo>=</mo><msub><mi>H</mi><mn>1</mn></msub><msup><mfenced><mi>n</mi></mfenced><mrow><mstyle displaystyle="false"><mrow><munder><mrow><mo>∑</mo></mrow><mrow><mi>i</mi><mo>∈</mo><mi>P</mi></mrow></munder><mrow><msub><mi>λ</mi><mrow><mi>P</mi><mo>,</mo><mi>i</mi></mrow></msub><msub><mi>s</mi><mi>i</mi></msub></mrow></mrow></mstyle></mrow></msup></mrow></math><img id="ib0112" file="imgb0112.tif" wi="43" he="7" img-content="math" img-format="tif"/></maths></claim-text></claim>
<claim id="c-en-0005" num="0005">
<claim-text>The method of one of the preceding claims, further comprising:<!-- EPO <DP n="42"> -->
<claim-text>receiving, by the server, form the user, along with receiving the user identification (un), and the password (pw), user data (ud) to be encrypted,</claim-text>
<claim-text>encrypting, by the server, the user data (ud) by applying a predetermined user data symmetric key encryption/decryption scheme using the secret message (<i>M</i>) as encryption key, and</claim-text>
<claim-text>storing, by the server, the encrypted user data (ud).</claim-text></claim-text></claim>
<claim id="c-en-0006" num="0006">
<claim-text>Computer-implemented method for decrypting data by a server, in cooperation with a predetermined number of rate-limiters, the data being encrypted by the method of one of the preceding claims, the decrypting method comprising:
<claim-text>receiving, by the server, from the user a user identification (un), and the password (pw),</claim-text>
<claim-text>retrieving, by the server, the ciphertext (<i>C</i>), and the encrypted data stored in association with the user identification (un),</claim-text>
<claim-text>recovering the secret message (<i>M</i>) by decrypting, by the server with its secret key (sk<sub>0</sub>) in cooperation with a subset (P) of a size (<i>t</i>'), which is equal to or greater than the predetermined threshold (<i>t</i>), out of the predetermined number (<i>m</i>) of rate limiters with their respective secret keys (sk<i><sub>i</sub></i>), the ciphertext (<i>C</i>), and deleting, by the server, the secret message (<i>M</i>) and the user password (pw).</claim-text></claim-text></claim>
<claim id="c-en-0007" num="0007">
<claim-text>The method of the preceding claim, further comprising:
<claim-text>sending, by the server, the secret (<i>n</i>) to the subset (P') of rate-limiters;<!-- EPO <DP n="43"> --></claim-text>
<claim-text>computing, by the server, the value <maths id="math0083" num=""><math display="block"><mrow><msub><mi>Y</mi><mrow><mn>0</mn><mo>,</mo><mn>0</mn></mrow></msub><mo>:</mo><mo>=</mo><msub><mi>C</mi><mn>0</mn></msub><mo>⋅</mo><msub><mi>H</mi><mn>0</mn></msub><msup><mrow><mfenced separators=","><mi>pw</mi><mi>n</mi></mfenced></mrow><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow></math><img id="ib0113" file="imgb0113.tif" wi="41" he="7" img-content="math" img-format="tif"/></maths></claim-text>
<claim-text>initiating the <i>i</i>-th rate-limiter of the subset (P') of rate-limiters to compute the value <maths id="math0084" num=""><math display="block"><mrow><msub><mi>Y</mi><mrow><mi>i</mi><mo>,</mo><mn>0</mn></mrow></msub><mo>:</mo><mo>=</mo><msub><mi>H</mi><mn>0</mn></msub><msup><mrow><mfenced><mi>n</mi></mfenced></mrow><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow></msup><mo>,</mo></mrow></math><img id="ib0114" file="imgb0114.tif" wi="27" he="8" img-content="math" img-format="tif"/></maths></claim-text>
<claim-text>verifying that <maths id="math0085" num=""><math display="block"><mrow><msub><mi>Y</mi><mrow><mn>0</mn><mo>,</mo><mn>0</mn></mrow></msub><mo>=</mo><mrow><mstyle displaystyle="false"><mrow><munder><mrow><mo>∏</mo></mrow><mrow><mi>i</mi><mo>∈</mo><mi>P</mi></mrow></munder></mrow></mstyle><mrow><msubsup><mi>Y</mi><mrow><mi>i</mi><mo>,</mo><mn>0</mn></mrow><mrow><msub><mi>λ</mi><mrow><mi>P</mi><mo>,</mo><mi>i</mi></mrow></msub></mrow></msubsup></mrow></mrow><mo>,</mo></mrow></math><img id="ib0115" file="imgb0115.tif" wi="30" he="10" img-content="math" img-format="tif"/></maths></claim-text>
<claim-text>by the server and the subset (P') of rate-limiters performing the steps of:
<claim-text>a) computing the encryption of the value <maths id="math0086" num=""><math display="block"><mrow><mi>Z</mi><mo>:</mo><mo>=</mo><msubsup><mi>Y</mi><mrow><mn>0</mn><mo>,</mo><mn>0</mn></mrow><mrow><mo>−</mo><mn>1</mn></mrow></msubsup><mrow><mstyle displaystyle="false"><mrow><munder><mo>∏</mo><mrow><mi>i</mi><mo>∈</mo><mi>P</mi></mrow></munder></mrow></mstyle><mrow><msubsup><mi>Y</mi><mrow><mi>i</mi><mo>,</mo><mn>0</mn></mrow><mrow><msub><mi>λ</mi><mrow><mi>P</mi><mo>,</mo><mi>i</mi></mrow></msub></mrow></msubsup></mrow></mrow></mrow></math><img id="ib0116" file="imgb0116.tif" wi="33" he="9" img-content="math" img-format="tif"/></maths> with the key <i>K</i> = <i>K</i><sub>0</sub> · <i><o ostyle="single">K</o></i><sub>0</sub> the key <i>K</i> being the public key associated with a secret key which is secret-shared among the server and the subset (P') of rate-limiters;</claim-text>
<claim-text>b) computing an encryption of the values <maths id="math0087" num=""><math display="block"><mrow><msup><mi>Z</mi><mrow><mover><mi>r</mi><mrow><mo>‾</mo></mrow></mover></mrow></msup><mspace width="1em"/><mi>and</mi><mspace width="1em"/><msup><mi>Z</mi><mrow><mover><mi>r</mi><mrow><mo>‾</mo></mrow></mover></mrow></msup><mo>⋅</mo><msub><mi>H</mi><mn>1</mn></msub><msup><mfenced><mi>n</mi></mfenced><mrow><msub><mrow><mover><mi>s</mi><mrow><mo>‾</mo></mrow></mover></mrow><mn>0</mn></msub></mrow></msup><mo>,</mo></mrow></math><img id="ib0117" file="imgb0117.tif" wi="38" he="8" img-content="math" img-format="tif"/></maths> for random <i>r̃</i> and <i>r̃'</i>.</claim-text>
<claim-text>c) obtaining <i>H</i><sub>1</sub>(<i>n</i>)<sup><i><o ostyle="single">s</o></i><sub2>0</sub2></sup> by decrypting Z the values <i>Y<sub>i</sub></i>;<br/>
checking that <i>Z<sup>r̃</sup></i> = <i>I</i></claim-text></claim-text>
I being an identity element;<br/>
and recovering the secret message (<i>M</i>) therefrom.<!-- EPO <DP n="44"> --></claim-text></claim>
<claim id="c-en-0008" num="0008">
<claim-text>The method of claim 6 or 7, further comprising:<br/>
each rate-limiter associating a counter with the user identification (un), and incrementing the counter if the verification step fails due to a received incorrect password (pw), aborting the current decryption session, and blocking further receiving user identification and password for a predetermined time of at least the user to which a the counter is associated.</claim-text></claim>
<claim id="c-en-0009" num="0009">
<claim-text>The method of claim 7, further comprising:<br/>
each rate-limiter implementing a counter, and incrementing the counter if the verification step fails due to a received incorrect password (un), aborting the current decryption session, and blocking further receiving user identification and password for a predetermined time.</claim-text></claim>
<claim id="c-en-0010" num="0010">
<claim-text>The method of one of the preceding claims, further comprising:<br/>
running, by the server, prior to creating the secret message (<i>M</i>), a setup algorithm comprising:
<claim-text>defining the threshold (<i>t</i>), and the number <i>(m)</i> of rate limiters, generating the server secret key (sko), and</claim-text>
<claim-text>generating for each rate limiter (<i>i</i>) of the predetermined number <i>(m)</i> of rate-limiters the respective secret key (ski),</claim-text>
<claim-text>such that from each secret key (sk<sub>0</sub>, ..., sk<i><sub>m</sub></i>) the size (t) of the subset (P) of rate limiters, and the number (<i>m</i>) can be derived.</claim-text></claim-text></claim>
<claim id="c-en-0011" num="0011">
<claim-text>The method of claim 10 in dependence of claim 3, wherein the setup algorithm further comprises:<!-- EPO <DP n="45"> -->
<claim-text>running a group generation algorithm which maps the security parameter (l<sup>λ</sup>) to the description of a cyclic group GG (G, p, G) of prime order q with generator G,</claim-text>
<claim-text>each of the secret keys (sk<sub>0</sub>, ..., sk<i><sub>m</sub></i>) has the format <maths id="math0088" num=""><math display="block"><mrow><mfenced separators=",,,,"><msub><mi>s</mi><mi>i</mi></msub><msub><mi>k</mi><mi>i</mi></msub><msub><mi>S</mi><mn>0</mn></msub><msub><mi>K</mi><mn>0</mn></msub><msubsup><mfenced open="{" close="}" separators=","><msub><mrow><mover><mi>S</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi></msub><msub><mrow><mover><mi>K</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi></msub></mfenced><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msubsup></mfenced></mrow></math><img id="ib0118" file="imgb0118.tif" wi="44" he="9" img-content="math" img-format="tif"/></maths> and satisfies the following properties: <maths id="math0089" num=""><math display="block"><mrow><msup><mi>G</mi><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow></msup><mo>=</mo><mrow><mstyle displaystyle="false"><mrow><munderover><mrow><mo>∏</mo></mrow><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></munderover></mrow></mstyle><msubsup><mrow><mover><mi>S</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi><mrow><msup><mi>i</mi><mi>j</mi></msup></mrow></msubsup></mrow><mo>,</mo><mspace width="1em"/><mi mathvariant="italic">i</mi><mo>∈</mo><mfenced open="[" close="]"><mi>m</mi></mfenced></mrow></math><img id="ib0119" file="imgb0119.tif" wi="40" he="9" img-content="math" img-format="tif"/></maths> <maths id="math0090" num=""><math display="block"><mrow><msup><mi>G</mi><mrow><msub><mi>k</mi><mi>i</mi></msub></mrow></msup><mo>=</mo><mrow><mo>{</mo><mtable columnalign="left" width="auto"><mtr><mtd><msub><mi>K</mi><mn>0</mn></msub></mtd><mtd><mi>i</mi><mo>=</mo><mn>0</mn></mtd></mtr><mtr><mtd><mrow><mstyle displaystyle="false"><mrow><munderover><mrow><mo>∏</mo></mrow><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></munderover></mrow></mstyle><msubsup><mrow><mover><mi>K</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi><mrow><msup><mi>i</mi><mi>j</mi></msup></mrow></msubsup></mrow></mtd><mtd><mi>i</mi><mo>∈</mo><mfenced open="[" close="]"><mi>m</mi></mfenced></mtd></mtr></mtable></mrow></mrow></math><img id="ib0120" file="imgb0120.tif" wi="45" he="15" img-content="math" img-format="tif"/></maths></claim-text></claim-text></claim>
<claim id="c-en-0012" num="0012">
<claim-text>The method of the preceding claim, further comprising:<br/>
verifying the validity of the secret keys (sk<sub>0</sub>, ..., sk<i><sub>m</sub></i>) by applying the following scheme:
<img id="ib0121" file="imgb0121.tif" wi="67" he="30" img-content="program-listing" img-format="tif"/></claim-text></claim>
<claim id="c-en-0013" num="0013">
<claim-text>The method of one of the preceding claims, further comprising:
<claim-text>initiated by the server at least one rate limiter out of the predetermined number (<i>m</i>) of rate limiters to perform, a rotation of the secret keys according to a predetermined key rotation protocol, and</claim-text>
<claim-text>performing, by the server, an algorithm for updating the ciphertext (<i>C</i>) to an updated ciphertext (<i>C</i>') with keys produced in the key rotation protocol.</claim-text><!-- EPO <DP n="46"> --></claim-text></claim>
<claim id="c-en-0014" num="0014">
<claim-text>The method of the preceding claim, wherein the key rotation protocol comprises:
<claim-text>initiating a rate limiter of the predetermined number (<i>m</i>) of rate limiters to request at least a part (<i>r</i>) of the predetermined number <i>(m)</i> of rate limiters to perform a respective key rotation, and</claim-text>
<claim-text>receiving confirmation of the requested rate limiters about key rotation.</claim-text></claim-text></claim>
<claim id="c-en-0015" num="0015">
<claim-text>The method of the claim 14, wherein the key rotation protocol comprises:
<claim-text>requesting, by the server or initiating a rate limiter of the predetermined number (<i>m</i>) of rate limiters, a part (<i>r</i>) of the predetermined number (<i>m</i>) of rate limiters to perform a respective key rotation, to obtain updated secret keys (sk'<sub>1</sub>,...sk'<i><sub>r</sub></i>),</claim-text>
<claim-text>deriving an update token for updating the ciphertext (<i>C</i>).</claim-text></claim-text></claim>
<claim id="c-en-0016" num="0016">
<claim-text>The method of the preceding claim, wherein the key rotation comprises:
<claim-text>updating <maths id="math0091" num=""><math display="block"><mrow><msub><mi>sk</mi><mi>i</mi></msub><mo>=</mo><mfenced separators=",,,,"><msub><mi>s</mi><mi>i</mi></msub><msub><mi>k</mi><mi>i</mi></msub><msub><mi>S</mi><mn>0</mn></msub><msub><mi>K</mi><mn>0</mn></msub><msubsup><mfenced open="{" close="}" separators=","><msub><mrow><mover><mi>S</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi></msub><msub><mrow><mover><mi>K</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi></msub></mfenced><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msubsup></mfenced></mrow></math><img id="ib0122" file="imgb0122.tif" wi="54" he="8" img-content="math" img-format="tif"/></maths> to <maths id="math0092" num=""><math display="block"><mrow><msubsup><mi>sk</mi><mi>i</mi><mi>ʹ</mi></msubsup><mo>=</mo><mfenced separators=",,,,"><msubsup><mi>s</mi><mi>i</mi><mi>ʹ</mi></msubsup><msubsup><mi>k</mi><mi>i</mi><mi>ʹ</mi></msubsup><msubsup><mi>S</mi><mn>0</mn><mi>ʹ</mi></msubsup><msubsup><mi>K</mi><mn>0</mn><mi>ʹ</mi></msubsup><msubsup><mfenced open="{" close="}" separators=","><msubsup><mrow><mover><mi>S</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi><mi>ʹ</mi></msubsup><msubsup><mrow><mover><mi>K</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi><mi>ʹ</mi></msubsup></mfenced><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msubsup></mfenced></mrow></math><img id="ib0123" file="imgb0123.tif" wi="54" he="8" img-content="math" img-format="tif"/></maths></claim-text>
<claim-text>where <maths id="math0093" num=""><math display="inline"><mrow><msubsup><mi>s</mi><mn>0</mn><mi>ʹ</mi></msubsup></mrow></math><img id="ib0124" file="imgb0124.tif" wi="6" he="8" img-content="math" img-format="tif" inline="yes"/></maths> is a new symmetric encryption key, and the following properties hold:<!-- EPO <DP n="47"> --> <maths id="math0094" num=""><math display="inline"><mrow><msubsup><mi>K</mi><mn>0</mn><mi>ʹ</mi></msubsup><mo>=</mo><msubsup><mi>K</mi><mn>0</mn><mi>γ</mi></msubsup><mo>=</mo><msup><mi>G</mi><mrow><msubsup><mi>k</mi><mn>0</mn><mi>ʹ</mi></msubsup></mrow></msup></mrow></math><img id="ib0125" file="imgb0125.tif" wi="28" he="8" img-content="math" img-format="tif" inline="yes"/></maths> ∀<i>j</i> ∈ [0,<i>t</i>-1] <maths id="math0095" num=""><math display="inline"><mrow><msubsup><mrow><mover><mi>S</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi><mi>ʹ</mi></msubsup><mo>=</mo><msub><mrow><mover><mi>S</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi></msub><msup><mi>G</mi><mrow><msub><mrow><mover><mi mathvariant="normal">β</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi></msub></mrow></msup></mrow></math><img id="ib0126" file="imgb0126.tif" wi="22" he="8" img-content="math" img-format="tif" inline="yes"/></maths> ∀<i>j</i> ∈ [0,<i>t</i>-1] <maths id="math0096" num=""><math display="inline"><mrow><msubsup><mrow><mover><mi>K</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi><mi>ʹ</mi></msubsup><mo>=</mo><msubsup><mrow><mover><mi>K</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi><mi>γ</mi></msubsup><msup><mi>G</mi><mrow><msub><mrow><mover><mi mathvariant="normal">δ</mi><mrow><mo>‾</mo></mrow></mover></mrow><mi>j</mi></msub></mrow></msup></mrow></math><img id="ib0127" file="imgb0127.tif" wi="21" he="9" img-content="math" img-format="tif" inline="yes"/></maths> ∀<i>i</i> ∈ [<i>m</i>] <maths id="math0097" num=""><math display="inline"><mrow><msup><mi>G</mi><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow></msup><mo>=</mo><mrow><mstyle displaystyle="false"><mrow><munder><mo>∏</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow></munder></mrow></mstyle><mrow><mover><mi>S</mi><mrow><mo>‾</mo></mrow></mover><msubsup><mi>ʹ</mi><mi>j</mi><mrow><msup><mi>i</mi><mi>j</mi></msup></mrow></msubsup></mrow></mrow></mrow></math><img id="ib0128" file="imgb0128.tif" wi="28" he="9" img-content="math" img-format="tif" inline="yes"/></maths> ∀<i>i</i> ∈ [<i>m</i>] <maths id="math0098" num=""><math display="inline"><mrow><msup><mi>G</mi><mrow><msubsup><mi>k</mi><mi>i</mi><mi>ʹ</mi></msubsup></mrow></msup><mo>=</mo><mrow><mstyle displaystyle="false"><mrow><munder><mo>∏</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow></munder></mrow></mstyle><msubsup><mrow><mover><mi>K</mi><mrow><mo>‾</mo></mrow></mover><mi>ʹ</mi></mrow><mi>j</mi><mrow><msup><mi>i</mi><mi>j</mi></msup></mrow></msubsup></mrow></mrow></math><img id="ib0129" file="imgb0129.tif" wi="29" he="8" img-content="math" img-format="tif" inline="yes"/></maths></claim-text>
<claim-text>for<br/>
<o ostyle="single">β</o><sub>0</sub>,...,<o ostyle="single">β</o><sub><i>t</i>-1</sub>,γ,<o ostyle="single">δ</o><sub>0</sub>,...,<o ostyle="single">δ</o><sub><i>t</i>-1</sub> being random integers sampled by the server, and the update token being defined as (<i>s</i><sub>0</sub>, <maths id="math0099" num=""><math display="inline"><mrow><msubsup><mi>s</mi><mn>0</mn><mi>ʹ</mi></msubsup><mo>,</mo></mrow></math><img id="ib0130" file="imgb0130.tif" wi="6" he="7" img-content="math" img-format="tif" inline="yes"/></maths></claim-text>
<claim-text><o ostyle="single">β</o><sub>0</sub>), updating the ciphertext (C) to the updated ciphertext (C') such that the updated ciphertext (C') is given by encrypting the tuple (C0', C1') with the new symmetric encryption key <maths id="math0100" num=""><math display="inline"><mrow><mfenced><msubsup><mi>s</mi><mn>0</mn><mi>ʹ</mi></msubsup></mfenced></mrow></math><img id="ib0131" file="imgb0131.tif" wi="11" he="9" img-content="math" img-format="tif" inline="yes"/></maths> where <maths id="math0101" num=""><math display="inline"><mrow><msubsup><mi>C</mi><mn>0</mn><mi>ʹ</mi></msubsup><mo>:</mo><mo>=</mo><msub><mi>C</mi><mn>0</mn></msub><mo>⋅</mo><msub><mi>H</mi><mn>0</mn></msub><msup><mfenced><mi>n</mi></mfenced><mrow><msub><mrow><mover><mi mathvariant="normal">β</mi><mrow><mo>‾</mo></mrow></mover></mrow><mn>0</mn></msub></mrow></msup></mrow></math><img id="ib0132" file="imgb0132.tif" wi="32" he="10" img-content="math" img-format="tif" inline="yes"/></maths>and <maths id="math0102" num=""><math display="inline"><mrow><msubsup><mi>C</mi><mn>1</mn><mi>ʹ</mi></msubsup><mo>:</mo><mo>=</mo><msub><mi>C</mi><mn>1</mn></msub><mo>⋅</mo><msub><mi>H</mi><mn>1</mn></msub><msup><mfenced><mi>n</mi></mfenced><mrow><msub><mrow><mover><mi mathvariant="normal">β</mi><mrow><mo>‾</mo></mrow></mover></mrow><mn>0</mn></msub></mrow></msup><mn>.</mn></mrow></math><img id="ib0133" file="imgb0133.tif" wi="33" he="8" img-content="math" img-format="tif" inline="yes"/></maths></claim-text>
<claim-text><i>n</i> being a nonce produced by the server.</claim-text></claim-text></claim>
<claim id="c-en-0017" num="0017">
<claim-text>The method of the preceding claim, wherein the subset (P) of the predetermined number (<i>m</i>) of rate limiters is selected according to a predetermined access criterion.</claim-text></claim>
<claim id="c-en-0018" num="0018">
<claim-text>The method of one of claims 7 to 17 in dependence of claim 6, further comprising:<br/>
decrypting, by the server, the encrypted user data (ud), by applying the predetermined user data symmetric key encryption/decryption scheme using the secret message (<i>M</i>) as decryption key.</claim-text></claim>
</claims>
<drawings id="draw" lang="en"><!-- EPO <DP n="48"> -->
<figure id="f0001" num="1,2,3"><img id="if0001" file="imgf0001.tif" wi="158" he="219" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="49"> -->
<figure id="f0002" num="4,5"><img id="if0002" file="imgf0002.tif" wi="104" he="199" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="50"> -->
<figure id="f0003" num="6"><img id="if0003" file="imgf0003.tif" wi="88" he="219" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="51"> -->
<figure id="f0004" num="7"><img id="if0004" file="imgf0004.tif" wi="82" he="65" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="52"> -->
<figure id="f0005" num="8"><img id="if0005" file="imgf0005.tif" wi="162" he="218" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="53"> -->
<figure id="f0006" num="9,10,11"><img id="if0006" file="imgf0006.tif" wi="165" he="227" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="54"> -->
<figure id="f0007" num="12,13,14"><img id="if0007" file="imgf0007.tif" wi="152" he="231" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="55"> -->
<figure id="f0008" num="15"><img id="if0008" file="imgf0008.tif" wi="163" he="164" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="56"> -->
<figure id="f0009" num="16"><img id="if0009" file="imgf0009.tif" wi="114" he="142" img-content="drawing" img-format="tif"/></figure>
</drawings>
<search-report-data id="srep" lang="en" srep-office="EP" date-produced=""><doc-page id="srep0001" file="srep0001.tif" wi="157" he="233" type="tif"/></search-report-data><search-report-data date-produced="20200901" id="srepxml" lang="en" srep-office="EP" srep-type="ep-sr" status="n"><!--
 The search report data in XML is provided for the users' convenience only. It might differ from the search report of the PDF document, which contains the officially published data. The EPO disclaims any liability for incorrect or incomplete data in the XML for search reports.
 -->

<srep-info><file-reference-id>F55556EP GS</file-reference-id><application-reference><document-id><country>EP</country><doc-number>20167386.0</doc-number></document-id></application-reference><applicant-name><name>Friedrich-Alexander-Universität Erlangen-Nürnberg</name></applicant-name><srep-established srep-established="yes"/><srep-invention-title title-approval="yes"/><srep-abstract abs-approval="yes"/><srep-figure-to-publish figinfo="by-applicant"><figure-to-publish><fig-number>1</fig-number></figure-to-publish></srep-figure-to-publish><srep-info-admin><srep-office><addressbook><text>MN</text></addressbook></srep-office><date-search-report-mailed><date>20200914</date></date-search-report-mailed></srep-info-admin></srep-info><srep-for-pub><srep-fields-searched><minimum-documentation><classifications-ipcr><classification-ipcr><text>H04L</text></classification-ipcr></classifications-ipcr></minimum-documentation></srep-fields-searched><srep-citations><citation id="sr-cit0001"><nplcit id="sr-ncit0001" medium="online" npl-type="w"><online><author><name>RUSSELL W F LAI1 ET AL</name></author><online-title>Simple Password-Hardened Encryption Services</online-title><edition>USENIX, USENIX, THE ADVANCED COMPUTING SYSTEMS ASSOCIATION</edition><pubdate>20180814</pubdate><location><pp><ppf>1418</ppf><ppl>1434</ppl></pp></location><avail>https://www.usenix.org/sites/default/files/sec18_full_proceedings_interior.pdf</avail><srchdate><date>20180814</date></srchdate><refno>XP061026244</refno></online></nplcit><category>Y</category><rel-claims>1-18</rel-claims><rel-passage><passage>* sections 1, 2, 3; figures 2-9 *</passage></rel-passage></citation><citation id="sr-cit0002"><nplcit id="sr-ncit0002" npl-type="s"><article><author><name>ALI BAGHERZANDI ET AL</name></author><atl>Password-protected secret sharing</atl><serial><sertitle>COMPUTER AND COMMUNICATIONS SECURITY, ACM, 2 PENN PLAZA, SUITE 701 NEW YORK NY 10121-0701 USA</sertitle><pubdate>20111017</pubdate><doi>10.1145/2046707.2046758</doi><isbn>978-1-4503-0948-6</isbn></serial><location><pp><ppf>433</ppf><ppl>444</ppl></pp></location><refno>XP058006072</refno></article></nplcit><category>Y</category><rel-claims>1-18</rel-claims><rel-passage><passage>* sections 2, 3; figures 2, 3 *</passage></rel-passage></citation></srep-citations><srep-admin><examiners><primary-examiner><name>Spranger, Stephanie</name></primary-examiner></examiners><srep-office><addressbook><text>Munich</text></addressbook></srep-office><date-search-completed><date>20200901</date></date-search-completed></srep-admin></srep-for-pub></search-report-data>
<ep-reference-list id="ref-list">
<heading id="ref-h0001"><b>REFERENCES CITED IN THE DESCRIPTION</b></heading>
<p id="ref-p0001" num=""><i>This list of references cited by the applicant is for the reader's convenience only. It does not form part of the European patent document. Even though great care has been taken in compiling the references, errors or omissions cannot be excluded and the EPO disclaims all liability in this regard.</i></p>
<heading id="ref-h0002"><b>Non-patent literature cited in the description</b></heading>
<p id="ref-p0002" num="">
<ul id="ref-ul0001" list-style="bullet">
<li><nplcit id="ref-ncit0001" npl-type="s"><article><author><name>JOSEPH A. AKINYELE</name></author><author><name>CHRISTINA GARMAN</name></author><author><name>IAN MIERS</name></author><author><name>MATTHEW W. PAGANO</name></author><author><name>MICHAEL RUSHANAN</name></author><author><name>MATTHEW GREEN</name></author><author><name>AVIEL D. RUBIN</name></author><atl>Charm: a frame-work for rapidly prototyping cryptosystems</atl><serial><sertitle>Journal of Cryptographic Engineering</sertitle><pubdate><sdate>20130000</sdate><edate/></pubdate><vid>3</vid><ino>2</ino></serial><location><pp><ppf>111</ppf><ppl>128</ppl></pp></location></article></nplcit><crossref idref="ncit0001">[0092]</crossref></li>
<li><nplcit id="ref-ncit0002" npl-type="b"><article><atl>Efficient dynamic-resharing ''verifiable secret sharing'' against mobile adversary</atl><book><author><name>NOGA ALON</name></author><author><name>ZVI GALIL</name></author><author><name>MOTI YUNG</name></author><book-title>Algorithms - ESA '95</book-title><imprint><name>Springer Berlin Heidelberg</name><pubdate>19950000</pubdate></imprint><location><pp><ppf>523</ppf><ppl>537</ppl></pp></location></book></article></nplcit><crossref idref="ncit0002">[0092]</crossref></li>
<li><nplcit id="ref-ncit0003" npl-type="b"><article><atl>PASTA: PASsword-based threshold authentication</atl><book><author><name>SHASHANK AGRAWAL</name></author><author><name>PEIHAN MIAO</name></author><author><name>PAYMAN MOHASSEL</name></author><author><name>PRATYAY MUKHERJEE</name></author><book-title>ACM CCS 2018: 25th Conference on Computer and Communications Security</book-title><imprint><name>ACM Press</name><pubdate>20181015</pubdate></imprint><location><pp><ppf>2042</ppf><ppl>2059</ppl></pp></location></book></article></nplcit><crossref idref="ncit0003">[0092]</crossref></li>
<li><nplcit id="ref-ncit0004" npl-type="b"><article><atl>Password-protected secret sharing</atl><book><author><name>ALI BAGHERZANDI</name></author><author><name>STANISLAW JARECKI</name></author><author><name>NITESH SAXENA</name></author><author><name>YANBIN LU</name></author><book-title>ACM CCS 2011: 18th Conference on Computer and Communications Security</book-title><imprint><name>ACM Press</name><pubdate>20111017</pubdate></imprint><location><pp><ppf>433</ppf><ppl>444</ppl></pp></location></book></article></nplcit><crossref idref="ncit0004">[0092]</crossref></li>
<li><nplcit id="ref-ncit0005" npl-type="b"><article><atl>The pythia PRF service</atl><book><author><name>ADAM EVERSPAUGH</name></author><author><name>RAHUL CHATTERJEE</name></author><author><name>SAMUEL SCOTT</name></author><author><name>ARI JUELS</name></author><author><name>THOMAS RISTENPART</name></author><book-title>USENIX Security 2015: 24th USENIX Security Symposium</book-title><imprint><name>USENIX Association</name><pubdate>20150812</pubdate></imprint><location><pp><ppf>547</ppf><ppl>562</ppl></pp></location></book></article></nplcit><crossref idref="ncit0005">[0092]</crossref></li>
<li><nplcit id="ref-ncit0006" npl-type="b"><article><atl>A public key cryptosystem and a signature scheme based on discrete logarithms</atl><book><author><name>TAHER ELGAMAL</name></author><book-title>Advances in Cryptology - CRYPTO'84, volume 196 of Lecture Notes in Computer Science</book-title><imprint><name>Springer</name><pubdate>19840819</pubdate></imprint><vid>196</vid><location><pp><ppf>10</ppf><ppl>18</ppl></pp></location></book></article></nplcit><crossref idref="ncit0006">[0092]</crossref></li>
<li><nplcit id="ref-ncit0007" npl-type="b"><article><atl>Robust encryption, revisited</atl><book><author><name>POOYA FARSHIM</name></author><author><name>BENOÎT LIBERT</name></author><author><name>KENNETH G. PATERSON</name></author><author><name>ELIZABETH A. QUAGLIA</name></author><book-title>PKC 2013: 16th International Conference on Theory and Practice of Public Key Cryptography, volume 7778 of Lecture Notes in Computer Science</book-title><imprint><name>Springer</name><pubdate>20130226</pubdate></imprint><vid>7778</vid><location><pp><ppf>352</ppf><ppl>368</ppl></pp></location></book></article></nplcit><crossref idref="ncit0007">[0092]</crossref></li>
<li><nplcit id="ref-ncit0008" npl-type="b"><article><atl>How to prove yourself: Practical solutions to identification and signature problems</atl><book><author><name>AMOS FIAT</name></author><author><name>ADI SHAMIR</name></author><book-title>Advances in Cryptology - CRYPTO'86, volume 263 of Lecture Notes in Computer Science</book-title><imprint><name>Springer</name><pubdate>19870800</pubdate></imprint><vid>263</vid><location><pp><ppf>186</ppf><ppl>194</ppl></pp></location></book></article></nplcit><crossref idref="ncit0008">[0092]</crossref></li>
<li><nplcit id="ref-ncit0009" npl-type="s"><article><author><name>MAURICIO KARCHMER</name></author><author><name>AVI WIGDERSON</name></author><atl>On span programs</atl><serial><sertitle>Proceedings of Structures in Complexity Theory</sertitle><pubdate><sdate>19930000</sdate><edate/></pubdate></serial><location><pp><ppf>102</ppf><ppl>111</ppl></pp></location></article></nplcit><crossref idref="ncit0009">[0092]</crossref></li>
<li><nplcit id="ref-ncit0010" npl-type="b"><article><atl>Simple password-hardened encryption services</atl><book><author><name>RUSSELL W. F. LAI</name></author><author><name>CHRISTOPH EGGER</name></author><author><name>MANUEL REINERT</name></author><author><name>SHERMAN S. M. CHOW</name></author><author><name>MATTEO MAFFEI</name></author><author><name>DOMINIQUE SCHRODER</name></author><book-title>USENIX Security 2018: 27th USENIX Security Symposium</book-title><imprint><name>USENIX Association</name><pubdate>20180815</pubdate></imprint><location><pp><ppf>1405</ppf><ppl>1421</ppl></pp></location></book></article></nplcit><crossref idref="ncit0010">[0092]</crossref></li>
<li><nplcit id="ref-ncit0011" npl-type="b"><article><atl>Phoenix: Rebirth of a cryptographic password-hardening service</atl><book><author><name>RUSSELL W. F. LAI</name></author><author><name>CHRISTOPH EGGER</name></author><author><name>DOMINIQUE SCHRODER</name></author><author><name>SHERMAN S. M. CHOW</name></author><book-title>USENIX Security 2017: 26th USENIX Security Symposium</book-title><imprint><name>USENIX Association</name><pubdate>20170817</pubdate></imprint><location><pp><ppf>899</ppf><ppl>916</ppl></pp></location></book></article></nplcit><crossref idref="ncit0011">[0092]</crossref></li>
<li><nplcit id="ref-ncit0012" npl-type="s"><article><author><name>NICHOLAS D. MATSAKIS</name></author><author><name>FELIX S. KLOCK, II</name></author><atl>The rust language</atl><serial><sertitle>Ada Lett.</sertitle><pubdate><sdate>20141000</sdate><edate/></pubdate><vid>34</vid><ino>3</ino></serial><location><pp><ppf>103</ppf><ppl>104</ppl></pp></location></article></nplcit><crossref idref="ncit0012">[0092]</crossref></li>
<li><nplcit id="ref-ncit0013" npl-type="s"><article><author><name>ALLEC MUFFET</name></author><atl/><serial><sertitle>Facebook: Password hashing and authentication</sertitle><pubdate><sdate>20150000</sdate><edate/></pubdate></serial></article></nplcit><crossref idref="ncit0013">[0092]</crossref></li>
<li><nplcit id="ref-ncit0014" npl-type="s"><article><atl>PCI Security Standards Council. Requirements and security assessment procedures</atl><serial><sertitle>PCI DSS v3.2</sertitle><pubdate><sdate>20160000</sdate><edate/></pubdate></serial></article></nplcit><crossref idref="ncit0014">[0092]</crossref></li>
<li><nplcit id="ref-ncit0015" npl-type="b"><article><atl>Efficient identification and signatures for smart cards</atl><book><author><name>CLAUS-PETER SCHNORR</name></author><book-title>Advances in Cryptology - CRYPTO'89, volume 435 of Lecture Notes in Computer Science</book-title><imprint><name>Springer</name><pubdate>19900820</pubdate></imprint><vid>435</vid><location><pp><ppf>239</ppf><ppl>252</ppl></pp></location></book></article></nplcit><crossref idref="ncit0015">[0092]</crossref></li>
<li><nplcit id="ref-ncit0016" npl-type="b"><article><atl>Efficient cryptographic password hardening services from partially oblivious commitments</atl><book><author><name>JONAS SCHNEIDER</name></author><author><name>NILS FLEISCHHACKER</name></author><author><name>DOMINIQUE SCHRODER</name></author><author><name>MICHAEL BACKES</name></author><book-title>ACM CCS 2016: 23rd Conference on Computer and Communications Security</book-title><imprint><name>ACM Press.</name><pubdate>20161024</pubdate></imprint><location><pp><ppf>1192</ppf><ppl>1203</ppl></pp></location></book></article></nplcit><crossref idref="ncit0016">[0092]</crossref></li>
<li><nplcit id="ref-ncit0017" npl-type="s"><article><author><name>ADI SHAMIR</name></author><atl>How to share a secret</atl><serial><sertitle>Communications of the Association for Computing Machinery</sertitle><pubdate><sdate>19791100</sdate><edate/></pubdate><vid>22</vid><ino>11</ino></serial><location><pp><ppf>612</ppf><ppl>613</ppl></pp></location></article></nplcit><crossref idref="ncit0017">[0092]</crossref></li>
</ul></p>
</ep-reference-list>
</ep-patent-document>
