<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE ep-patent-document PUBLIC "-//EPO//EP PATENT DOCUMENT 1.5.1//EN" "ep-patent-document-v1-5-1.dtd">
<!-- This XML data has been generated under the supervision of the European Patent Office -->
<ep-patent-document id="EP19719353B1" file="EP19719353NWB1.xml" lang="en" country="EP" doc-number="3718009" kind="B1" date-publ="20211006" status="n" dtd-version="ep-patent-document-v1-5-1">
<SDOBI lang="en"><B000><eptags><B001EP>ATBECHDEDKESFRGBGRITLILUNLSEMCPTIESILTLVFIROMKCYALTRBGCZEEHUPLSK..HRIS..MTNORS..SM..................</B001EP><B003EP>*</B003EP><B005EP>J</B005EP><B007EP>BDM Ver 2.0.12 (4th of August) -  2100000/0</B007EP></eptags></B000><B100><B110>3718009</B110><B120><B121>EUROPEAN PATENT SPECIFICATION</B121></B120><B130>B1</B130><B140><date>20211006</date></B140><B190>EP</B190></B100><B200><B210>19719353.5</B210><B220><date>20190412</date></B220><B240><B241><date>20200702</date></B241></B240><B250>en</B250><B251EP>en</B251EP><B260>en</B260></B200><B300><B310>201815953273</B310><B320><date>20180413</date></B320><B330><ctry>US</ctry></B330></B300><B400><B405><date>20211006</date><bnum>202140</bnum></B405><B430><date>20201007</date><bnum>202041</bnum></B430><B450><date>20211006</date><bnum>202140</bnum></B450><B452EP><date>20210510</date></B452EP></B400><B500><B510EP><classification-ipcr sequence="1"><text>G06F   9/54        20060101AFI20191018BHEP        </text></classification-ipcr><classification-ipcr sequence="2"><text>H04L  29/06        20060101ALI20191018BHEP        </text></classification-ipcr><classification-ipcr sequence="3"><text>G06Q  30/06        20120101ALI20191018BHEP        </text></classification-ipcr><classification-ipcr sequence="4"><text>H04L  12/58        20060101ALI20191018BHEP        </text></classification-ipcr></B510EP><B520EP><classifications-cpc><classification-cpc sequence="1"><text>H04L  51/00        20130101 LI20190527BHEP        </text></classification-cpc><classification-cpc sequence="2"><text>G06Q  30/06        20130101 LI20190527BHEP        </text></classification-cpc><classification-cpc sequence="3"><text>G06F   9/546       20130101 FI20190527BHEP        </text></classification-cpc><classification-cpc sequence="4"><text>H04L  63/0823      20130101 LI20190527BHEP        </text></classification-cpc><classification-cpc sequence="5"><text>H04L  63/0209      20130101 LI20190527BHEP        </text></classification-cpc><classification-cpc sequence="6"><text>H04L  63/0281      20130101 LI20190527BHEP        </text></classification-cpc><classification-cpc sequence="7"><text>H04L  63/062       20130101 LI20190527BHEP        </text></classification-cpc><classification-cpc sequence="8"><text>H04L  63/0442      20130101 LI20190527BHEP        </text></classification-cpc></classifications-cpc></B520EP><B540><B541>de</B541><B542>ERHÖHUNG DER SICHERHEIT VON KOMMUNIKATIONEN WÄHREND DER AUSFÜHRUNG VON PROTOKOLLFLÜSSEN</B542><B541>en</B541><B542>ENHANCING SECURITY OF COMMUNICATIONS DURING EXECUTION OF PROTOCOL FLOWS</B542><B541>fr</B541><B542>AMÉLIORATION DE LA SÉCURITÉ DE COMMUNICATIONS PENDANT L'EXÉCUTION DE FLUX DE PROTOCOLE</B542></B540><B560><B561><text>EP-A1- 2 031 817</text></B561><B562><text>Rob Wyatt T ET AL: "Secure Messaging Scenarios with WebSphere MQ", , 1 November 2012 (2012-11-01), pages 1-366, XP055591894, Retrieved from the Internet: URL:https://www.redbooks.ibm.com/redbooks/ pdfs/sg248069.pdf [retrieved on 2019-05-24]</text></B562><B562><text>T Rob Wyatt: "Securing Your Queue Manager", , 31 December 2012 (2012-12-31), pages 1-75, XP055591901, Retrieved from the Internet: URL:https://t-rob.net/Downloads/20120501_1 577-WebSphere_MQ_Securing_Your_Queue_Manag er.pdf [retrieved on 2019-05-24]</text></B562><B562><text>Mike Hearn: "Corda: A distributed ledger", , 29 November 2016 (2016-11-29), XP055531445, Retrieved from the Internet: URL:https://docs.corda.net/releases/releas e-M10.1/_static/corda-technical-whitepaper .pdf</text></B562></B560></B500><B700><B720><B721><snm>NESBIT, Matthew</snm><adr><str>c/o R3 Ltd.
2 London Wall Place</str><city>London, Greater London EC2Y 5AU</city><ctry>GB</ctry></adr></B721></B720><B730><B731><snm>R3, Ltd.</snm><iid>101862985</iid><irf>EP129339-RK</irf><adr><str>2 London Wall Place</str><city>London, Greater London EC2Y 5AU</city><ctry>GB</ctry></adr></B731></B730><B740><B741><snm>Grünecker Patent- und Rechtsanwälte 
PartG mbB</snm><iid>100060488</iid><adr><str>Leopoldstraße 4</str><city>80802 München</city><ctry>DE</ctry></adr></B741></B740></B700><B800><B840><ctry>AL</ctry><ctry>AT</ctry><ctry>BE</ctry><ctry>BG</ctry><ctry>CH</ctry><ctry>CY</ctry><ctry>CZ</ctry><ctry>DE</ctry><ctry>DK</ctry><ctry>EE</ctry><ctry>ES</ctry><ctry>FI</ctry><ctry>FR</ctry><ctry>GB</ctry><ctry>GR</ctry><ctry>HR</ctry><ctry>HU</ctry><ctry>IE</ctry><ctry>IS</ctry><ctry>IT</ctry><ctry>LI</ctry><ctry>LT</ctry><ctry>LU</ctry><ctry>LV</ctry><ctry>MC</ctry><ctry>MK</ctry><ctry>MT</ctry><ctry>NL</ctry><ctry>NO</ctry><ctry>PL</ctry><ctry>PT</ctry><ctry>RO</ctry><ctry>RS</ctry><ctry>SE</ctry><ctry>SI</ctry><ctry>SK</ctry><ctry>SM</ctry><ctry>TR</ctry></B840><B860><B861><dnum><anum>GB2019051064</anum></dnum><date>20190412</date></B861><B862>en</B862></B860><B870><B871><dnum><pnum>WO2019197847</pnum></dnum><date>20191017</date><bnum>201942</bnum></B871></B870></B800></SDOBI>
<description id="desc" lang="en"><!-- EPO <DP n="1"> -->
<heading id="h0001">BACKGROUND</heading>
<p id="p0001" num="0001">The bitcoin system was developed to allow electronic cash to be transferred directly from one party to another without going through a financial institution, as described in the white paper entitled "Bitcoin: A Peer-to-Peer Electronic Cash System" by Satoshi Nakamoto. A bitcoin (e.g., an electronic coin) is represented by a chain of transactions that transfers ownership from one party to another party. To transfer ownership of a bitcoin, a new transaction is generated and added to a stack of transactions in a block. The new transaction, which includes the public key of the new owner, is digitally signed by the owner with the owner's private key to transfer ownership to the new owner as represented by the new owner public key. Once the block is full, the block is "capped" with a block header that is a hash digest of all the transaction identifiers within the block. The block header is recorded as the first transaction in the next block in the chain, creating a mathematical hierarchy called a "blockchain." To verify the current owner, the blockchain of transactions can be followed to verify each transaction from the first transaction to the last transaction. The new owner need only have the private key that matches the public key of the transaction that transferred the bitcoin. The blockchain creates a mathematical proof of ownership in an entity represented by a security identity (e.g., a public key), which in the case of the bitcoin system is pseudo-anonymous.</p>
<p id="p0002" num="0002">To ensure that a previous owner of a bitcoin did not double-spend the bitcoin (i.e., transfer ownership of the same bitcoin to two parties), the bitcoin system maintains a distributed ledger of transactions. With the distributed ledger, a ledger of all the transactions for a bitcoin is stored redundantly at multiple nodes (i.e., computers) of a blockchain network. The ledger at each node is stored as a blockchain. In a blockchain, the transactions are stored in the order that the<!-- EPO <DP n="2"> --> transactions are received by the nodes. Each node in the blockchain network has a complete replica of the entire blockchain. The bitcoin system also implements techniques to ensure that each node will store the identical blockchain, even though nodes may receive transactions in different orderings. To verify that the transactions in a ledger stored at a node are correct, the blocks in the blockchain can be accessed from oldest to newest, generating a new hash of the block and comparing the new hash to the hash generated when the block was created. If the hashes are the same, then the transactions in the block are verified. The bitcoin system also implements techniques to ensure that it would be infeasible to change a transaction and regenerate the blockchain by employing a computationally expensive technique to generate a nonce that is added to the block when it is created. A bitcoin ledger is sometimes referred to as an Unspent Transaction Output ("UTXO") set because it tracks the output of all transactions that have not yet been spent.</p>
<p id="p0003" num="0003">To enable more complex transactions than bitcoin can support, some systems use "smart contracts." A smart contract is computer code that implements transactions of a contract. The computer code may be executed in a secure platform (e.g., an Ethereum platform, which provides a virtual machine) that supports recording transactions in blockchains. In addition, the smart contract itself is recorded as a transaction in the blockchain using an identity token that is a hash (i.e., identity token) of the computer code so that the computer code that is executed can be authenticated. When deployed, a constructor of the smart contract executes, initializing the smart contract and its state. The state of a smart contract is stored persistently in the blockchain. When a transaction is recorded against a smart contract, a message is sent to the smart contract, and the computer code of the smart contract executes to implement the transaction (e.g., debit a certain amount from the balance of an account). The computer code ensures that all the terms of the contract are complied with before the transaction is recorded in the blockchain. For example, a smart contract may support the sale of an asset. The inputs to a smart contract to sell a car may be the identity tokens of the seller, the buyer, and the car and the sale price in<!-- EPO <DP n="3"> --> U.S. dollars. The computer code ensures that the seller is the current owner of the car and that the buyer has sufficient funds in their account. The computer code then records a transaction that transfers the ownership of the car to the buyer and a transaction that transfers the sale price from the buyer's account to the seller's account. If the seller's account is in U.S. dollars and the buyer's account is in Canadian dollars, the computer code may retrieve a currency exchange rate, determine how many Canadian dollars the seller's account should be debited, and record the exchange rate. If either transaction is not successful, neither transaction is recorded.</p>
<p id="p0004" num="0004">When a message is sent to a smart contract to record a transaction, the message is sent to each node that maintains a replica of the blockchain. Each node executes the computer code of the smart contract to implement the transaction. For example, if 100 nodes each maintain a replica of a blockchain, then the computer code executes at each of the 100 nodes. When a node completes execution of the computer code, the result of the transaction is recorded in the blockchain. The nodes employ a consensus algorithm to decide on which transactions to keep and which transactions to discard. Although the execution of the computer code at each node helps ensure the authenticity of the blockchain, it requires large amounts of computer resources to support such redundant execution of computer code.</p>
<p id="p0005" num="0005">Although blockchains can effectively store transactions, the large amount of computer resources, such as storage and computational power, needed to maintain all the replicas of the blockchain can be problematic. To overcome this problem, some systems for storing transactions do not use blockchains, but rather have each party to a transaction maintain its own copy of the transaction. One such system is the Corda system developed by R3, Ltd., which provides a decentralized distributed ledger platform in which each participant in the platform has a node (e.g., computer system) that maintains its portion of the distributed ledger. When parties agree on the terms of a transaction, a party submits the transaction to a notary, which is a trusted node or cluster of nodes, for notarization. The notary maintains an UTXO database of unspent<!-- EPO <DP n="4"> --> transaction outputs or alternatively spent transaction outputs. When a transaction is received, the notary checks the inputs to the transaction against the UTXO database to ensure that the outputs referenced by the inputs have not been spent. If the inputs have not been spent, the notary updates the UTXO database to indicate that the referenced outputs have been spent, notarizes the transaction (e.g., by signing the transaction or a transaction identifier with a public key of the notary), and sends the notarization to the party that submitted the transaction for notarization. When the party receives the notarization, the party stores the notarization and provides the notarization to the counterparties.</p>
<p id="p0006" num="0006">Transactions between parties in a distributed ledger system can involve complex interactions between the nodes of the parties. To help support such transactions, a protocol framework that supports the development of protocol flows may be employed. A protocol flow (or simply "flow") is computer code that controls the performance of a transaction by the party or parties to the transaction. Protocol flows can be developed for different types of transactions, such as a transaction to sell an asset from a selling party to a buying party, a transaction to support an interest rate swap, a transaction involving more than two parties, and so on. An example will help illustrate a protocol flow. In this example, a "transfer" transaction specifies to transfer a certain amount of money from an "originator" party to a "responder" party. To support such a transfer transaction, a transfer protocol flow may be developed that includes computer code for the party in the role of the originator ("originator code") and computer code for the party in the role of responder ("responder code"). When the two parties agree to consummate the transaction, they agree on the particulars of the transaction, such as the amount of money to transfer, the notary who is responsible for notarizing the transaction, and the use of the transfer protocol flow.</p>
<p id="p0007" num="0007">Continuing with the example of the transfer transaction, to record the transfer transaction, the originator party starts execution of the originator code of the transfer protocol flow, and the responder party starts execution of the responder code of the transfer protocol flow. The originator party provides the particulars of the<!-- EPO <DP n="5"> --> transaction to the originator code. The originator code then sends to the responder party its public key and the particulars of the transaction. Upon receiving the public key and the particulars of the transaction, the responder code verifies the particulars of the transaction (e.g., prompting a user to confirm the price), generates a proposed transaction that outlines the particulars of the transaction, signs the proposed transaction with the signature of the responder party (e.g., using a private key of the responder party), and sends the proposed transaction to the originator code. The proposed transaction specifies the input state and the output state and identifies a notary. The input state may specify the funds used to buy the asset, and the output state may specify that ownership of the asset has been transferred. The input state and the output state include contract code that is used to verify whether the transaction is valid. Upon receiving the proposed transaction, the originator code verifies the proposed transaction by verifying that the proposed transaction was signed by the responder party (e.g., using the public key of the responder party), verifying that the particulars of the proposed transaction match those sent to the responder party, and executing the contract code of the input state and output state of the proposed transaction to determine whether the proposed transaction is valid according to the contract code. When the proposed transaction is valid, the originator code accepts the proposed transaction by signing the proposed transaction with the signature of the originator party to generate an accepted transaction. The originator code then sends the accepted transaction to notary code of the notary specified in the proposed transaction. The notary code may be considered computer code of the transfer protocol code for the role of notary. Execution of the notary code may have started when the parties decided to consummate the transaction. Execution of the code of the transfer protocol flows continues by the parties as described in U.S. Patent Application Publication Number <patcit id="pcit0001" dnum="US20170352012A1"><text>US201 7/035201 2A1</text></patcit> , entitled "Secure Processing of Electronic Transactions by a Decentralized, Distributed Ledger System," with the applicant of R3 Ltd., and published on Dec. 7, 2017. This patent publication provides an example of a protocol framework.<!-- EPO <DP n="6"> --></p>
<p id="p0008" num="0008">Cyberattacks cost companies and individuals billions of dollars. A report in 2015 estimated that cyberattacks cost companies over $400 billion annually. In addition to the financial costs, cyberattacks may result in other damages such as the destruction of valuable information, the release of sensitive information, and so on. The costs and damages will surely increase over time without effective defenses. Cyberattacks often rely on malicious software, referred to as "malware," which is installed and executed by a computer that is the target of the attack. The executing malware orchestrates the attack. For example, a ransomware attack may encrypt all the data on a computer, including the only copies of financial documents, family photographs, electronic mail messages, and so on. If the ransom is not paid, then the data may remain encrypted forever. Even if the ransom is paid, the attacker might not provide the key to decrypt the data. As another example, if an organization's node of a distributed ledger system is the subject of a successful cyberattack, the attacker may be able to create transactions and record the transactions in a way that steals assets (e.g., account information, trade secrets, customer lists, private keys, and other business data) from the organization, enter into contracts with other organizations, and so on. Because of the high costs of cyberattacks, companies and individuals expend considerable resources in developing and purchasing security systems as defenses to cyberattacks.<!-- EPO <DP n="7"> --> <nplcit id="ncit0001" npl-type="s" url="https://www.redbooks.ibm.com/redbooks/pdfs/sg248069.pdf"><text>Wyatt, T. Rob, et al: "Secure Messaging Scenarios with WebSphere MQ", November 1, 2012, pages 1-366, retrieved from the internet on May 24, 2019, URL: https://www.redbooks.ibm.com/redbooks/pdfs/sg248069.pdf</text></nplcit>, this document discloses, in relation to Chapter 10, a scenario that connects a business application to a business partner. The application runs on a server and uses an IBM WebSphere MQ client to connect to an application queue manager. Connectivity to the application queue manager uses Secure Sockets Layer (SSL)/Transport Layer Security (TLS) for authentication and encryption, and WebSphere MQ object authority manager (OAM) for authorization. Connections between queue managers also use SSL/TLS and OAM for the authentication, authorization, and privacy. Figure 10-1 on page 143, shows the connectivity between the application and the business partner.</p>
<p id="p0009" num="0009">It is the object of the present invention to increase the security of the messaging architecture.</p>
<p id="p0010" num="0010">This object is solved by the subject matter of the independent claims.</p>
<p id="p0011" num="0011">Preferred embodiments are the subject matter of the dependent claims.<!-- EPO <DP n="8"> --></p>
<heading id="h0002">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p0012" num="0012">
<ul id="ul0001" list-style="none">
<li><figref idref="f0001">Figure 1</figref> is a block diagram that illustrates components of a message interface system in some embodiments.</li>
<li><figref idref="f0002">Figure 2</figref> is a flow diagram that illustrates the processing of an initialize component of a local node in some embodiments.</li>
<li><figref idref="f0003">Figure 3</figref> is a flow diagram that illustrates processing of a network map update component in some embodiments.</li>
<li><figref idref="f0004">Figure 4</figref> is a flow diagram that illustrates the processing of a send message component of the local node in some embodiments.<!-- EPO <DP n="9"> --></li>
<li><figref idref="f0005">Figure 5</figref> is a flow diagram that illustrates the processing of an initialize component of the bridge system in some embodiments.</li>
<li><figref idref="f0006">Figure 6</figref> is a flow diagram that illustrates the processing of a bridge request component of the bridge system in some embodiments.</li>
<li><figref idref="f0007">Figure 7</figref> is a flow diagram that illustrates the processing of a reverse proxy server component in some embodiments.</li>
</ul></p>
<heading id="h0003">DETAILED DESCRIPTION</heading>
<p id="p0013" num="0013">A method and system for securely communicating between a local node and a remote node using a message queuing protocol is provided. In some embodiments, a message interface system interfaces with a local node to support communicating with a remote node. The message interface system provides a mechanism for a remote node to send messages to the local node without establishing a direct connection with the local node. The message interface system provides various mechanisms to help shield the local node from a cyberattack that would otherwise be a direct attack on the local node. The message interface system implements an architecture that helps ensure that a cyberattack cannot compromise the local node to gain access to data (e.g., business data) stored by or otherwise accessible to the local node or the data sent to and received from the remote node. To help minimize the effects of a cyberattack, the message interface system may include a broker system, a bridge system, an internal firewall, a secure zone system, and an external firewall. Alternatively, the message interface system may be considered to interface with, rather than include, the broker system. The broker system implements the message queuing protocol, which may be compatible with the Advanced Message Queuing Protocol ("AMQP") with the broker system being an AMQP broker.</p>
<p id="p0014" num="0014">In some embodiments, the broker system provides an outbound queue for storing messages received from the local node to be sent to the remote node and an inbound queue for storing messages received from the remote node to be sent to the local node. When a local node, such as a Corda node, starts up, the local node directs<!-- EPO <DP n="10"> --> the broker system to create an outbound queue and an inbound queue for sending messages to and receiving messages from the remote node. A separate outbound queue may be created for each remote node for storing messages sent to that remote node and a single inbound queue for storing messages received from any of the remote nodes. The broker system interfaces with the bridge system to send messages to and receive messages from the remote nodes. The broker system implements the messaging queuing protocol, which may include ensuring delivery of messages sent to the remote nodes and confirming receipt of messages sent from the remote nodes.</p>
<p id="p0015" num="0015">In some embodiments, the bridge system receives from the local node a notification of the outbound queues and the inbound queue provided by the broker system. The bridge system subscribes to the outbound queues, for example, using a publisher/subscriber model so that the bridge system receives messages published by the broker system that are to be sent to remote nodes. The bridge system also receives from the local node connection information for establishing outbound and inbound connections with remote nodes. The connection information may include the Internet Protocol ("IP") address and the port number of a remote node, the public key certificate of the remote node, and a private key corresponding to a public key. The public key may be registered with a certificate authority so that remote nodes can obtain the corresponding certificate to use in verifying a signature based on the private key. The certificate can then be published so it is accessible to remote nodes. A private/public key pair may be generated specifically for use by the message interface system so that private keys of the local node (e.g., private keys used to encrypt and sign data) are not provided to the message interface system to reduce the risk of the private keys being compromised. The private key may be referred to as a secure zone signing key.</p>
<p id="p0016" num="0016">To initiate connections to remote nodes, the bridge system sends the secure zone signing key through the internal firewall to a proxy server of the secure zone system. For each outbound queue for a remote node, the bridge system initiates a connection to the remote node by sending an initiate connection message that<!-- EPO <DP n="11"> --> includes the IP address, port number, and public key certificate of the remote node through the internal firewall to the proxy server. To accept connections from remote nodes, the bridge system sends the secure zone signing key through the internal firewall to a proxy server of the secure zone system. In some embodiments, the proxy server may share the secure zone signing key and public key certificates of remote nodes sent to a reverse proxy server, or vice versa. In such a case, the bridge system need only send the secure zone signing key and public key certificate to the proxy server or the reverse proxy server. The bridge system may also send an accept connection message that includes a secure zone signing key and a public key certificate of the remote node through the internal firewall to a reverse proxy server to allow the reverse proxy server to accept connection requests from the remote node on behalf of the local node. After the connection is established with a remote node, the bridge system receives outbound messages from the outbound queue for that remote node and sends the outbound messages through the internal firewall to the proxy server. After the remote node establishes a connection to the reverse proxy server, the bridge system receives from the reverse proxy server through the internal firewall inbound messages sent from remote node. The bridge system thus acts as a bridge between the broker system and the secure zone system.</p>
<p id="p0017" num="0017">In some embodiments, the secure zone system is logically located between the internal firewall and the external firewall. The secure zone system helps ensure that any attempt to compromise security is countered by the secure zone system to prevent the local node from being compromised. The secure zone system may be considered to provide what is referred to in the security industry as a demilitarized zone ("DMZ"). The internal firewall is also referred to as a "back-end" firewall, and the external firewall is also referred to as a "front-end" or "perimeter" firewall. The message interface system thus provides what is referred to as a dual firewall system. The firewalls are configured to limit connections to those via approved ports and connection types (e.g., Transport Layer Security ("TLS") connections). To ensure the security of the local node and messages sent and received, the secure zone system<!-- EPO <DP n="12"> --> does not store business data of the local node. Moreover, the outbound messages are encrypted by the local node prior to leaving the local node, and inbound messages are encrypted by the remote nodes and decrypted only by the local node.</p>
<p id="p0018" num="0018">In some embodiments, the secure zone system provides a reverse proxy server and a proxy server. The reverse proxy server receives through the internal firewall from the bridge system a secure zone signing key and accept messages to accept inbound connections. The reverse proxy server stores the secure zone signing key and the public certificates of the accept messages. The reverse proxy server responds to connect messages sent from the remote nodes through the external firewall and allows inbound connections only with authorized remote nodes as indicated by accept messages received from the bridge system. After an inbound connection with a remote node is established, the reverse proxy server receives messages from remote nodes, ensures that the messages are authorized to be sent to the local node, and forwards the authorized messages through the internal firewall to the bridge system. The reverse proxy server also receives from the bridge system through the internal firewall acknowledgment messages that originate from the broker system and sends the acknowledgment messages through the external firewall to the remote node. The reverse proxy server does not store state relating to prior inbound messages so that if the secure zone system is compromised, information relating to prior messages cannot be accessed.</p>
<p id="p0019" num="0019">In some embodiments, the proxy server receives from the bridge system through the internal firewall initiate messages to establish outbound connections to remote nodes. The proxy server sends through the external firewall corresponding connection requests to the remote nodes. After a connection is established with a remote node, the proxy server receives from the bridge system through the internal firewall outbound messages and forwards the outbound messages to the remote node through the external firewall. The proxy server also receives acknowledgments from the remote nodes and forwards the acknowledgments through the internal firewall to the bridge system.<!-- EPO <DP n="13"> --></p>
<p id="p0020" num="0020">The message interface system may interface with multiple local nodes, rather than just one local node. In such a case, the broker system may provide, for each local node, an inbound queue and an outbound queue for each remote node that that local node is to send messages to. Alternatively, the broker system may provide one outbound queue for each remote node that is shared by the local nodes. Each local node may have access to a data store of remote node connection information, referred to as a network map cache. The network map cache stores a record for each remote node that the local node is to communicate with. Each record stores connection information for a remote node such as IP address and port number, public key certificate, inbound and outbound queue names, and so on. When a remote node starts up, it uses the information of the network map cache to direct the broker system to create the appropriate queues and to inform the bridge system of the connections to remote nodes that are to be initiated and accepted. A local node may also provide to the bridge system a list of allowed topics (e.g., AMQP topics) so that the bridge system can filter out inbound messages that are not for the allowed topics. After startup, a local node may also dynamically direct the broker system to create queues and to inform the bridge system to establish connections to new remote nodes based on updates to the network map cache, for example, as new remote nodes come online. A local node subscribes to the inbound queue of the broker system to receive inbound messages. When sending an outbound message to a remote node, a local node directs the broker system to add the message to the outbound queue for that remote node. The local node may maintain local queues for queuing outbound messages when the broker system is unavailable. When an inbound message is received from a remote node, the local node is notified and retrieves the inbound message from the inbound queue provided by the broker system.</p>
<p id="p0021" num="0021">The message interface system provides many advantages over existing connection techniques. The message interface system allows connections to a local node without requiring direct connections to the local node from a remote node and without requiring the local node to have a public IP address. The dual firewall design<!-- EPO <DP n="14"> --> can be used to limit access to the secure zone system to only authorized IP addresses and ports, and the number of open ports can be very limited. The proxy server and the reverse proxy server may be multi-homed with separate network cards connected to the internal firewall and the external firewall to further enhance security. The secure zone system does not initiate connections through the internal firewall; rather, all connections through the internal firewall are initiated from the bridge system. So if the secure zone system is compromised, the compromised system cannot establish a connection through the internal firewall. No data (e.g., business data or other sensitive data) of the local node is stored in clear form by the secure zone system. The secure zone system uses communications protocols, such as TLS, that require storing of connection-specific certificates and keys (e.g., a symmetric key for each connection). Thus, if a certificate or key is compromised, it has no value other than with use of the specified connection. Thus, if one connection is compromised, other connections are not necessarily also compromised. The secure zone system does not have access to the local nodes or any other device of the internal network and communicates only with the bridge system, and the communications are through the internal firewall.</p>
<p id="p0022" num="0022"><figref idref="f0001">Figure 1</figref> is a block diagram that illustrates components of a message interface system in some embodiments. Node A 110A is adapted to communicate with node B 110B via communications channel 170, such as the Internet. Node A communicates via message interface system components including a broker system A 120A, a bridge system A 130A, an internal firewall A 140A, a secure zone system A 150A, and an external firewall A 160A. Node B communicates via similar message interface components 120B-160B. Node A includes a flow component 111A, a messaging client component 112A, and a network map cache 113A. The flow component implements, for example, Corda flows for directing communications with Node B. The messaging client component coordinates the sending of messages between the flow component and broker system A. The messaging client component accesses the network map cache that contains information on the remote nodes that note A is to connect to. The network map cache includes information such as the IP<!-- EPO <DP n="15"> --> address and port number through which Node A is to connect to a remote node, certificate information for remote nodes, and so on. The broker system A includes bridge queues 121A that include an input queue and an output queue, referred to as bridge queues, for sending control messages between Node A and bridge system A. The broker system A also includes an inbound queue 122A and an outbound queue 123A for communicating with Node B. The broker system A may include an outbound queue for each remote node. The bridge system A includes a bridge manager component 131A. The bridge manager component exchanges messages with Node A via the bridge queues of the broker system A. The secure zone system A includes a reverse proxy server A 151A and a proxy server 152A. Although not illustrated, the message interface system may provide one or more failover systems for a primary system such as for a primary bridge system and a primary reverse proxy server and a primary proxy server. If a primary system is unavailable, then the corresponding failover system can access the current state of the unavailable system and perform the function of that now-unavailable system.</p>
<p id="p0023" num="0023">The computing systems (e.g., network nodes or collections of network nodes) on which the message interface system may be implemented may include a central processing unit, input devices, output devices (e.g., display devices and speakers), storage devices (e.g., memory and disk drives), network interfaces, graphics processing units, cellular radio link interfaces, global positioning system devices, and so on. The input devices may include keyboards, pointing devices, touch screens, gesture recognition devices (e.g., for air gestures), head and eye tracking devices, microphones for voice recognition, and so on. The computing systems may include desktop computers, laptops, tablets, e-readers, personal digital assistants, smartphones, gaming devices, servers, and so on. The computing systems may access computer-readable media that include computer-readable storage media and data transmission media. The computer-readable storage media are tangible storage means that do not include a transitory, propagating signal. Examples of computer-readable storage media include memory such as primary memory, cache memory, and<!-- EPO <DP n="16"> --> secondary memory (e.g., DVD) and other storage. The computer-readable storage media may have recorded on them or may be encoded with computer-executable instructions or logic that implements the message interface system. The data transmission media are used for transmitting data via transitory, propagating signals or carrier waves (e.g., electromagnetism) via a wired or wireless connection. The computing systems may include a secure cryptoprocessor as part of a central processing unit for generating and securely storing keys and for encrypting and decrypting data using the keys.</p>
<p id="p0024" num="0024">The message interface system may be described in the general context of computer-executable instructions, such as program modules and components, executed by one or more computers, processors, or other devices. Generally, program modules or components include routines, programs, objects, data structures, and so on that perform tasks or implement data types of the message interface system. Typically, the functionality of the program modules may be combined or distributed as desired in various examples. Aspects of the message interface system may be implemented in hardware using, for example, an application-specific integrated circuit ("ASIC") or field programmable gate array ("FPGA").</p>
<p id="p0025" num="0025"><figref idref="f0002">Figure 2</figref> is a flow diagram that illustrates the processing of an initialize component of a local node in some embodiments. The initialize component 200 is invoked to initialize communications with remote nodes. In block 201, the component interacts with the broker system to create and subscribe to the bridge queues for communicating with the bridge system. The component also receives an enumeration of the inbound and outbound queues of the broker system. In block 202, the component selects the next queue. In decision block 203, if all the queues have already been selected, then the component continues at block 207, else the component continues at block 204. In block 204, the component accesses the network map cache to retrieve a record for the identity associated with the queue. In decision block 205, if the record is found, then the local node is authorized to communicate with the remote node associated with the queue and the component continues at block 206,<!-- EPO <DP n="17"> --> else the component loops to block 202 to select the next queue. In block 206, the component adds the queue to a queue snapshot message and then loops to block 202 to select the next queue. In block 207, the component adds information for other remote nodes that the local node is to communicate with to the queue snapshot message and sends the queue snapshot message to the bridge component via the bridge queue and the completes. The queue snapshot message contains information sufficient for the bridge component to establish a connection with the remote node associated with the queue. The component may also be invoked in response to receiving a message from the bridge system to provide a queue snapshot message.</p>
<p id="p0026" num="0026"><figref idref="f0003">Figure 3</figref> is a flow diagram that illustrates processing of a network map update component in some embodiments. The network map update component 300 of a node is invoked to process updates to the network map cache. The component is passed an indication of the records to be updated. In block 301, the component selects the next record. In decision block 302, if all the records have already been selected, then the component continues at block 308, else the component continues at block 303. In block 303, the component selects the next unprocessed queue. In decision block 304, if all the unprocessed queues have already been selected and processed for the selected record, then the component loops to block 301 to select the next record, else the component continues at block 305. In decision block 305, if the identity of the record matches that of the queue, then the component continues at block 306, else the component loops to block 303 to select the next unprocessed queue. In decision block 306, the component adds connection information to an update queue snapshot message. In block 307, the component sends a create queue message to the broker system to create a queue for the remote node identified by the record and loops to block 301 to select the next record. In block 308, the component sends the update queue snapshot message to the bridge system and then completes.</p>
<p id="p0027" num="0027"><figref idref="f0004">Figure 4</figref> is a flow diagram that illustrates the processing of a send message component of the local node in some embodiments. The send message component 400 is passed an indication of a message and a remote node and coordinates the<!-- EPO <DP n="18"> --> sending of the message to the remote node. In decision block 401, if the outbound queue for the remote node is identified in the network map cache indicating that the connection information for the remote node is available, then the component continues at block 403, else the component continues at block 402. In block 402, the component blocks until an outbound queue is created based on an update to the network map cache. In decision block 403, if the outbound queue has been created by the broker system, then the component continues at block 406, else the component continues at block 404. In block 404, the component sends a queue create message that includes the connection information to the broker system to create an outbound queue for the remote node. In block 405, the component sends a bridge request message to the bridge system to notify the bridge that the outbound queue has been created. The bridge system can then subscribe to the outbound queue and establish a connection with the remote node via the proxy server. In block 406, the component adds the message to the outbound queue for the remote node. In some embodiments, the processing of blocks 404 and 405 can be performed in parallel with block 406. The component then completes.</p>
<p id="p0028" num="0028"><figref idref="f0005">Figure 5</figref> is a flow diagram that illustrates the processing of an initialize component of the bridge system in some embodiments. The initialize component 500 is invoked when the bridge system is initialized. In block 501, the component subscribes to the bridge queue of the broker system to receive messages sent from the local node. In block 502, the component sends a query queue message to the local node via the bridge queue to request information on the queues created by the broker system. In block 503, the component receives a queue snapshot message from the local node. In block 504, the component adds the remote nodes to an inbound permissions list to be checked when a message is received from a remote node. In block 505, the component selects the next outbound queue of the queue snapshot message. In decision block 506, if all the outbound queues have already been selected, then the component completes, else the component continues at block 507. In block 507, the component directs the proxy server to establish a connection with the<!-- EPO <DP n="19"> --> remote node. In block 508, the component validates the certificate provided by the remote node. In decision block 509, if the certificate is valid, then the component continues at block 510, else the component loops to block 505 to select the next outbound queue. The component may also send a message to the local node indicating that the connection cannot be established. In block 510, the component subscribes to the outbound queue and then loops to block 505 to select the next outbound queue. In some embodiments, the processing of blocks 505-510 can be performed in parallel for each outbound queue. For example, a separate thread of execution can be created for each outbound queue. Also, if a connection is lost, the bridge system unsubscribes from the outbound queue and repeatedly attempts to establish a connection with the remote node.</p>
<p id="p0029" num="0029"><figref idref="f0006">Figure 6</figref> is a flow diagram that illustrates the processing of a bridge request component of the bridge system in some embodiments. The bridge request component 600 receives a notification that an outbound queue has been created for a remote node and coordinates the establishing of a connection with that remote node. In block 601, the component stores the name of the outbound queue for the remote node. In block 602, the component subscribes to the outbound queue. In block 603, the component stores the TLS certificate name for the remote node. In block 604, the component establishes an outgoing connection with the remote node via the proxy server. In decision block 605, if the TLS certificate name provided by the proxy server matches that of the message, then the component completes, else the component reports an error in block 606 and then completes.</p>
<p id="p0030" num="0030"><figref idref="f0007">Figure 7</figref> is a flow diagram that illustrates the processing of a reverse proxy server component in some embodiments. The reverse proxy server component 700 initializes upon receiving a bridge connect message from the bridge system. In block 701, the component stores only an in-memory copy of the TLS private key and public certificate chain received in the bridge connect message. When the reverse proxy server disconnects from the bridge system, the component clears the in-memory copy. In block 702, the component stores an inbound topic associated with the connection.<!-- EPO <DP n="20"> --> Eventually, a connection request is received from a remote node. In block 703, the component responds to the connection request from the remote node to coordinate the establishing of the connection, assuming that the certificate of the remote node is that of an authorized remote node and that the public certificate chain for the remote is valid. After the connection is established, the component receives an inbound message from the remote node. In block 704, the component validates that the topic of the inbound message matches an authorized topic. If the topic is not authorized, then the component processes an error and waits for a subsequent inbound message. If the topic is authorized, the component continues at block 705. The authorized topics may be provided by the bridge system. In block 705, the component adds a TLS certificate name to the message. In block 706, the component sends the inbound message via the internal firewall to the bridge system. The component waits for a delivery acknowledgment from the bridge system. In block 707, upon receiving the delivery acknowledgment, the component sends a delivery acknowledgment to the remote node and then continues to process the next received inbound message.</p>
<p id="p0031" num="0031">The following paragraphs describe various embodiments of aspects of the message interface system. An implementation of the message interface system may employ any combination of the embodiments. The processing described below may be performed by a computing system with a processor that executes computer-executable instructions stored on a computer-readable storage medium that implements the message interface system.</p>
<p id="p0032" num="0032">In some embodiments, a message interface system for a local node supporting communications between the local node and a remote node is provided. The message interface system comprises one or more computer-readable storage mediums storing computer-executable instructions and one or more processors for executing the computer-executable instructions stored in the one or more computer-readable storage mediums. The instructions include instructions of a broker system, a bridge system, an internal firewall, a secure zone system, and an external firewall. The broker system provides an outbound queue for storing messages received from the<!-- EPO <DP n="21"> --> local node to be sent to the remote node and an inbound queue for storing messages received from the remote node to be sent to the local node. The bridge system subscribes to the outbound queue, initiates a connection through the internal firewall to a reverse proxy server of the secure zone system and a proxy server of the secure zone system, sends through the internal firewall to the reverse proxy server a secure zone signing key, receives outbound messages from the outbound queue, sends the outbound messages through the internal firewall to the proxy server, receives inbound messages through the internal firewall from the reverse proxy server, and sends the inbound messages to the inbound queue. The secure zone system comprises the reverse proxy server and the proxy server. The reverse proxy server, which stores the secure zone signing key, responds to a connection request received through the external firewall from the remote node using the secure zone signing key, receives inbound messages through the external firewall from the remote node, and sends the inbound messages through the internal firewall to the bridge system. The reverse proxy server does not store state relating to prior inbound messages. The proxy server, sends a connection request through the external firewall to the remote node, receives outbound messages through the internal firewall from the bridge system, and sends the outbound messages through the external firewall to the remote node. In some embodiments, the inbound queue and the outbound queue have names derived from a certificate name of the local node. In some embodiments, the reverse proxy server validates the connection request based on a certification of a valid node of a network of peer-to-peer nodes. In some embodiments, the broker system provides a bridge inbound queue and a bridge outbound queue to enable the local node and the bridge system to exchange messages. In some embodiments, the bridge system sends to the local node a queue request message for the identification of an inbound queue and outbound queues and receives from the local node an indication of the inbound queue and the outbound queues. In some embodiments, the message interface system connects to multiple local nodes. In some embodiments, the secure zone system includes a failover reverse proxy server. In some embodiments, the message interface system includes a failover bridge system. In some embodiments,<!-- EPO <DP n="22"> --> the local node and the remote node implement a flow of a Corda network. In some embodiments, the local node queues outbound messages if the message interface system is unavailable. In some embodiments, the broker system creates the outbound queue and the inbound queue in response to a request of the local node. In some embodiments, the reverse proxy server validates the bridge system. In some embodiments, the reverse proxy server, upon receiving an inbound message, validates that the inbound message is directed to a valid inbound queue.</p>
<p id="p0033" num="0033">In some embodiments, a method performed by a secure zone system supporting communications between a local node and a remote node using a message queuing protocol is provided. The method, under control of a reverse proxy server of the secure zone system, receives a secure zone signing key through an internal firewall, responds to a connection request received from the remote node through an external firewall using the secure zone signing key, receives inbound messages from the remote node through the external firewall, and sends the inbound messages to the local node through the internal firewall. The reverse proxy server does not store state relating to prior inbound messages. The method, under control of a proxy server of the secure zone system, sends a connection request to the remote node through the external firewall, receives outbound messages from the local node through the internal firewall, and sends the outbound messages to the remote node through the external firewall. In some embodiments, the proxy server sends the connection request in response to receiving a connection request from the remote node. In some embodiments, the message queuing protocol is compatible with an AMQP. In some embodiments, the secure zone system interfaces with an AMQP bridge manager through the internal firewall and the AMQP bridge manager interfaces with an AMQP broker. In some embodiments, the secure zone system includes a failover reverse proxy server. In some embodiments, the local node and the remote node implement a flow of a Corda network.</p>
<p id="p0034" num="0034">In some embodiments, a secure zone system supporting communications between a local node and a remote node using a message queuing protocol is<!-- EPO <DP n="23"> --> provided. The secure zone system includes a reverse proxy server that receives a secure zone signing key, receives an inbound connection from the remote node through an external firewall, establishes a connection with the remote node using the secure zone signing key, receives inbound messages from the remote node through the external firewall, and sends the inbound messages to the local node through an internal firewall. The reverse proxy server does not store state relating to prior inbound messages. The secure zone system also includes a proxy server that sends an inbound connection to the remote node through the external firewall, establishes a connection with the remote node, receives outbound messages from the local node through the internal firewall, and sends the outbound messages to the remote node via the external firewall. In some embodiments, the message queuing protocol is compatible with an AMQP. In some embodiments, the secure zone system interfaces with an AMQP bridge manager through the internal firewall and the AMQP bridge manager interfaces with an AMQP broker. In some embodiments, the local node sends outbound messages to and receives inbound messages from the remote node via the AMQP broker. In some embodiments, the secure zone system includes a failover reverse proxy server. In some embodiments, the local node and the remote node implement a flow of a Corda network.</p>
</description>
<claims id="claims01" lang="en"><!-- EPO <DP n="24"> -->
<claim id="c-en-01-0001" num="0001">
<claim-text>A message interface system for a local node supporting communications between the local node and a remote node, the message interface system comprising:
<claim-text>one or more computer-readable storage mediums storing computer-executable instructions of:
<claim-text>a broker system (120A, 120B), a bridge system (130A, 130B), an internal firewall (140A, 140B), a secure zone system (150A, 150B), and an external firewall (160A, 160B), wherein:
<claim-text>the broker system is configured to provide an outbound queue (123A) for storing messages received from the local node to be sent to the remote node and an inbound queue (122A) for storing messages received from the remote node to be sent to the local node;</claim-text>
<claim-text>the bridge system is configured to subscribe to the outbound queue, to initiate a connection through the internal firewall to a reverse proxy server (151A) of the secure zone system and a proxy server (152A) of the secure zone system, to send through the internal firewall to the reverse proxy server a secure zone signing key, to receive outbound messages from the outbound queue, to send the outbound messages through the internal firewall to the proxy server, to receive inbound messages through the internal firewall from the reverse proxy server, and to send the inbound messages to the inbound queue; and</claim-text>
<claim-text>the secure zone system comprises the reverse proxy server (151A) and the proxy server (152A), wherein
<claim-text>the reverse proxy server, which stores the secure zone signing key, is configured to respond to a connection request received through the external firewall from the remote node using the secure zone signing key, to receive inbound messages through the external firewall from the remote node, and to send the inbound messages through the internal firewall to the bridge system, wherein the<!-- EPO <DP n="25"> --> reverse proxy server does not store state relating to prior inbound messages; and</claim-text>
<claim-text>the proxy server, is configured to send a connection request through the external firewall to the remote node, to receive outbound messages through the internal firewall from the bridge system, and to send the outbound messages through the external firewall to the remote node; and</claim-text></claim-text></claim-text></claim-text>
<claim-text>one or more processors for executing the computer-executable instructions stored in the one or more computer-readable storage mediums.</claim-text></claim-text></claim>
<claim id="c-en-01-0002" num="0002">
<claim-text>The message interface system of claim 1 wherein the inbound queue and the outbound queue have names derived from a certificate name of the local node.</claim-text></claim>
<claim id="c-en-01-0003" num="0003">
<claim-text>The message interface system of claim 1 wherein the reverse proxy server is configured to validate the connection request received through the external firewall from the remote node based on a certification of a valid node of a network of peer-to-peer nodes.</claim-text></claim>
<claim id="c-en-01-0004" num="0004">
<claim-text>A method performed by a secure zone system supporting communications between a local node and a remote node using a message queuing protocol, the method comprising:
<claim-text>under control of a reverse proxy server (151A) of the secure zone system (150A),
<claim-text>receiving a secure zone signing key through an internal firewall (140A);</claim-text>
<claim-text>responding to a connection request received from the remote node through an external firewall (160A) using the secure zone signing key;</claim-text>
<claim-text>receiving inbound messages from the remote node through the external firewall; and</claim-text>
<claim-text>sending the inbound messages to the local node through the internal firewall (140A),</claim-text>
<claim-text>wherein the reverse proxy server does not store state relating to prior inbound messages; and</claim-text></claim-text>
<claim-text>under control of a proxy server of the secure zone system,
<claim-text>sending a connection request to the remote node through the external firewall;<!-- EPO <DP n="26"> --></claim-text>
<claim-text>receiving outbound messages from the local node through the internal firewall; and</claim-text>
<claim-text>sending the outbound messages to the remote node through the external firewall.</claim-text></claim-text></claim-text></claim>
<claim id="c-en-01-0005" num="0005">
<claim-text>The method of claim 4 wherein the proxy server sends the connection request in response to receiving a connection request from the remote node.</claim-text></claim>
<claim id="c-en-01-0006" num="0006">
<claim-text>The method of claim 4 wherein the message queuing protocol is compatible with an Advanced Message Queuing Protocol, AMQP.</claim-text></claim>
<claim id="c-en-01-0007" num="0007">
<claim-text>The method of claim 6 wherein the secure zone system interfaces with an AMQP bridge manager through the internal firewall, wherein the AMQP bridge manager interfaces with an AMQP broker.</claim-text></claim>
<claim id="c-en-01-0008" num="0008">
<claim-text>The method of claim 4 wherein the secure zone system includes a failover reverse proxy server.</claim-text></claim>
<claim id="c-en-01-0009" num="0009">
<claim-text>The method of claim 4 wherein the local node and the remote node implement a flow of a Corda network.</claim-text></claim>
<claim id="c-en-01-0010" num="0010">
<claim-text>A secure zone system supporting communications between a local node and a remote node using a message queuing protocol, the secure zone system comprising:
<claim-text>a reverse proxy server (151A) that is configured to receive a secure zone signing key through an internal firewall (140A), to receive an inbound connection from the remote node through an external firewall (160A), to establish a connection with the remote node using the secure zone signing key, to receive inbound messages from the remote node through the external firewall, and to send the inbound messages to the local node through the internal firewall (140A), wherein the reverse proxy server does not store state relating to prior inbound messages; and</claim-text>
<claim-text>a proxy server (152A) that is configured to send an inbound connection to the remote node through the external firewall, to establish a connection with the remote node, to receive outbound messages from the local node through the internal firewall, and to send the outbound messages to the remote node via the external firewall.</claim-text></claim-text></claim>
<claim id="c-en-01-0011" num="0011">
<claim-text>The secure zone system of claim 10 wherein the message queuing protocol is compatible with an Advanced Message Queuing Protocol, AMQP.<!-- EPO <DP n="27"> --></claim-text></claim>
<claim id="c-en-01-0012" num="0012">
<claim-text>The secure zone system of claim 11 wherein the secure zone system interfaces with an AMQP bridge manager through the internal firewall and wherein the AMQP bridge manager interfaces with an AMQP broker.</claim-text></claim>
<claim id="c-en-01-0013" num="0013">
<claim-text>The secure zone system of claim 12 wherein the local node is configured to send outbound messages to and to receive inbound messages from the remote node via the AMQP broker.</claim-text></claim>
<claim id="c-en-01-0014" num="0014">
<claim-text>The secure zone system of claim 10 wherein the secure zone system includes a failover reverse proxy server.</claim-text></claim>
<claim id="c-en-01-0015" num="0015">
<claim-text>The secure zone system of claim 10 wherein the local node and the remote node implement a flow of a Corda network.</claim-text></claim>
</claims>
<claims id="claims02" lang="de"><!-- EPO <DP n="28"> -->
<claim id="c-de-01-0001" num="0001">
<claim-text>Nachrichtenschnittstellensystem für einen lokalen Knoten, das die Kommunikation zwischen dem lokalen Knoten und einem entfernten Knoten unterstützt, wobei das Nachrichtenschnittstellensystem umfasst:
<claim-text>ein oder mehrere computerlesbare Speichermedien, die computerausführbare Anweisungen speichern von:
<claim-text>einem Vermittlersystem (120A, 120B), einem Brückensystem (130A, 130B), einer internen Firewall (140A, 140B), einem Sicherheitszonensystem (150A, 150B), und einer externen Firewall (160A, 160B), wobei:
<claim-text>das Vermittlersystem dazu eingerichtet ist, eine ausgehende Warteschlange (123A) zum Speichern von Nachrichten, die von dem lokalen Knoten empfangen wurden und an den entfernten Knoten zu senden sind, und eine eingehende Warteschlange (122A) zum Speichern von Nachrichten, die von dem entfernten Knoten empfangen wurden und an den lokalen Knoten zu senden sind, bereitzustellen;</claim-text>
<claim-text>das Brückensystem dazu eingerichtet ist, die ausgehende Warteschlange zu abonnieren, eine Verbindung durch die interne Firewall zu einem Reverse-Proxy-Server (151A) des Sicherheitszonensystems und einem Proxy-Server (152A) des Sicherheitszonensystems zu initiieren, durch die interne Firewall an den Reverse-Proxy-Server einen Sicherheitszonensignierungsschlüssel zu senden, um ausgehende Nachrichten von der ausgehenden Warteschlange zu empfangen, um die ausgehenden Nachrichten durch die interne Firewall an den Proxyserver zu senden, um eingehende Nachrichten durch die interne Firewall von dem Reverse-Proxyserver zu empfangen und um die eingehenden Nachrichten an die eingehende Warteschlange zu senden; und</claim-text>
<claim-text>das Sicherheitszonensystem den Reverse-Proxy-Server (151A) und den Proxy-Server (152A) umfasst, wobei
<claim-text>der Reverse-Proxy-Server, der den Schlüssel für die sichere Zonensignierung speichert, dazu eingerichtet ist, auf eine über die externe Firewall von dem entfernten Knoten empfangene Verbindungsanforderung unter Verwendung des Schlüssels für die sichere Zonensignierung<!-- EPO <DP n="29"> --> zu antworten, um über die externe Firewall von dem entfernten Knoten eingehende Nachrichten zu empfangen und die eingehenden Nachrichten über die interne Firewall an das Brückensystem zu senden, wobei der Reverse-Proxy-Server keinen Zustand speichert, der sich auf vorherige eingehende Nachrichten bezieht; und</claim-text></claim-text>
<claim-text>der Proxyserver dazu eingerichtet ist, eine Verbindungsanforderung durch die externe Firewall an den entfernten Knoten zu senden, ausgehende Nachrichten durch die interne Firewall von dem Brückensystem zu empfangen und die ausgehenden Nachrichten durch die externe Firewall an den entfernten Knoten zu senden; und</claim-text></claim-text></claim-text>
<claim-text>einen oder mehreren Prozessoren zum Ausführen der in dem einen oder den mehreren computerlesbaren Speichermedien gespeicherten computerausführbaren Anweisungen.</claim-text></claim-text></claim>
<claim id="c-de-01-0002" num="0002">
<claim-text>Nachrichtenschnittstellensystem nach Anspruch 1, bei dem die Eingangswarteschlange und die Ausgangswarteschlange Namen haben, die von einem Zertifikatsnamen des lokalen Knotens abgeleitet sind.</claim-text></claim>
<claim id="c-de-01-0003" num="0003">
<claim-text>Nachrichtenschnittstellensystem nach Anspruch 1, bei dem der Reverse-Proxy-Server dazu eingerichtet ist, über die externe Firewall eine von dem entfernten Knoten empfangene Verbindungsanforderung auf der Grundlage einer Zertifizierung eines gültigen Knotens eines Netzwerks von Peer-to-Peer-Knoten zu validieren.</claim-text></claim>
<claim id="c-de-01-0004" num="0004">
<claim-text>Verfahren, das von einem Sicherheitszonensystem durchgeführt wird, das die Kommunikation zwischen einem lokalen Knoten und einem entfernten Knoten unter Verwendung eines Nachrichten-Warteschlangenprotokolls unterstützt, wobei das Verfahren umfasst:
<claim-text>unter Steuerung eines Reverse-Proxy-Servers (151A) des Sicherheitszonensystems (150A),
<claim-text>Empfangen eines Sicherheitszonensignierschlüssels durch eine interne Firewall (140A);</claim-text>
<claim-text>Antworten auf eine von dem entfernten Knoten durch eine externe Firewall (160A) empfangene Verbindungsanforderung unter Verwendung des Sicherheitszonensignierschlüssels;</claim-text>
<claim-text>Empfangen eingehender Nachrichten von dem entfernten Knoten durch die externe Firewall; und</claim-text>
<claim-text>Senden der eingehenden Nachrichten an den lokalen Knoten durch die interne Firewall (140A),<!-- EPO <DP n="30"> --></claim-text>
<claim-text>wobei der Reverse-Proxy-Server keinen Zustand in Bezug auf frühere eingehende Nachrichten speichert; und<br/>
unter Steuerung eines Proxy-Servers des Sicherheitszonensystems,</claim-text>
<claim-text>Senden einer Verbindungsanfrage an den entfernten Knoten durch die externe Firewall;</claim-text>
<claim-text>Empfangen ausgehender Nachrichten von dem lokalen Knoten durch die interne Firewall; und</claim-text>
<claim-text>Senden der ausgehenden Nachrichten an den entfernten Knoten durch die externe Firewall.</claim-text></claim-text></claim-text></claim>
<claim id="c-de-01-0005" num="0005">
<claim-text>Verfahren nach Anspruch 4, bei dem der Proxy-Server die Verbindungsanforderung als Reaktion auf den Empfang einer Verbindungsanforderung von dem entfernten Knoten sendet.</claim-text></claim>
<claim id="c-de-01-0006" num="0006">
<claim-text>Verfahren nach Anspruch 4, bei dem das Nachrichten-Warteschlangenprotokoll mit einem Advanced Message Queuing Protocol, AMQP, kompatibel ist.</claim-text></claim>
<claim id="c-de-01-0007" num="0007">
<claim-text>Verfahren nach Anspruch 6, bei dem das Sicherheitszonensystem über die interne Firewall eine Schnittstelle mit einem AMQP-Brückenmanager bildet, wobei der AMQP-Brückenmanager eine Schnittstelle mit einem AMQP-Broker bildet.</claim-text></claim>
<claim id="c-de-01-0008" num="0008">
<claim-text>Verfahren nach Anspruch 4, bei dem das Sicherheitszonensystem einen ausfallsicheren Reverse-Proxy-Server enthält.</claim-text></claim>
<claim id="c-de-01-0009" num="0009">
<claim-text>Verfahren nach Anspruch 4, bei dem der lokale Knoten und der entfernte Knoten einen Fluss eines Corda-Netzwerks implementieren.</claim-text></claim>
<claim id="c-de-01-0010" num="0010">
<claim-text>Sicherheitszonensystem, das Kommunikationen zwischen einem lokalen Knoten und einem entfernten Knoten unter Verwendung eines Nachrichten-Warteschlangenprotokolls unterstützt, wobei das Sicherheitszonensystem umfasst:
<claim-text>einen Reverse-Proxy-Server (151A), der dazu eingerichtet ist, einen sicheren Zonensignierungsschlüssel über eine interne Firewall (140A) zu empfangen, eine eingehende Verbindung von dem entfernten Knoten über eine externe Firewall (160A) zu empfangen, eine Verbindung mit dem entfernten Knoten unter Verwendung des sicheren Zonensignierungsschlüssels herzustellen, eingehende Nachrichten von dem entfernten Knoten über die externe Firewall zu empfangen und die eingehenden Nachrichten über die interne Firewall<!-- EPO <DP n="31"> --> (140A) an den lokalen Knoten zu senden, wobei der Reverse-Proxy-Server keinen Zustand speichert, der sich auf vorherige eingehende Nachrichten bezieht; und</claim-text>
<claim-text>einen Proxy-Server (152A), der dazu eingerichtet ist, eine eingehende Verbindung zu dem entfernten Knoten durch die externe Firewall zu senden, eine Verbindung mit dem entfernten Knoten herzustellen, ausgehende Nachrichten von dem lokalen Knoten durch die interne Firewall zu empfangen und die ausgehenden Nachrichten über die externe Firewall an den entfernten Knoten zu senden.</claim-text></claim-text></claim>
<claim id="c-de-01-0011" num="0011">
<claim-text>Sicherheitszonensystem nach Anspruch 10, bei dem das Nachrichten-Warteschlangenprotokoll mit einem Advanced Message Queuing Protocol, AMQP, kompatibel ist.</claim-text></claim>
<claim id="c-de-01-0012" num="0012">
<claim-text>Sicherheitszonensystem nach Anspruch 11, wobei das Sicherheitszonensystem über die interne Firewall eine Schnittstelle mit einem AMQP-Brückenmanager bildet und der AMQP-Brückenmanager eine Schnittstelle mit einem AMQP-Vermittler bildet.</claim-text></claim>
<claim id="c-de-01-0013" num="0013">
<claim-text>Sicherheitszonensystem nach Anspruch 12, bei dem der lokale Knoten dazu eingerichtet ist, über den AMQP-Broker ausgehende Nachrichten an den entfernten Knoten zu senden und eingehende Nachrichten von diesem zu empfangen.</claim-text></claim>
<claim id="c-de-01-0014" num="0014">
<claim-text>Sicherheitszonensystem nach Anspruch 10, wobei das Sicherheitszonensystem einen ausfallsicheren Reverse-Proxy-Server enthält.</claim-text></claim>
<claim id="c-de-01-0015" num="0015">
<claim-text>Sicherheitszonensystem nach Anspruch 10, bei dem der lokale Knoten und der entfernte Knoten einen Fluss eines Corda-Netzwerks implementieren.</claim-text></claim>
</claims>
<claims id="claims03" lang="fr"><!-- EPO <DP n="32"> -->
<claim id="c-fr-01-0001" num="0001">
<claim-text>Système d'interface de messages pour un nœud local prenant en charge des communications entre le nœud local et un nœud distant, le système d'interface de messages comprenant :
<claim-text>un ou plusieurs supports de stockage lisibles par un ordinateur stockant des instructions exécutables par un ordinateur de :
<claim-text>un système de courtier (120A, 120B), un système de passerelle (130A, 130B), un pare-feu interne (140A, 140B), un système de zone sécurisée (150A, 150B) et un pare-feu externe (160A, 160B), dans lequel :
<claim-text>le système de courtier est configuré pour fournir une file d'attente sortante (123A) pour stocker des messages reçus du nœud local à envoyer au nœud distant et une file d'attente entrante (122A) pour stocker des messages reçus du nœud distant à envoyer au nœud local ;</claim-text>
<claim-text>le système de passerelle est configuré pour s'abonner à la file d'attente sortante, pour établir une connexion via le pare-feu interne à un serveur de délégation (proxy) inverse (151A) du système de zone sécurisée et à un serveur de délégation (152A) du système de zone sécurisée, pour envoyer via le pare-feu interne au<!-- EPO <DP n="33"> --> serveur de délégation inverse une clé de signature de zone sécurisée, pour recevoir des messages sortants de la file d'attente sortante,; pour envoyer les messages sortants via le pare-feu interne au serveur de délégation, pour recevoir des messages entrants via le pare-feu interne issus du serveur de délégation inverse, et pour envoyer les messages entrants à la file d'attente entrante ; et</claim-text>
<claim-text>le système de zone sécurisée comprend le serveur de délégation inverse (151A) et le serveur de délégation (152A), dans lequel</claim-text>
<claim-text>le serveur de délégation inverse, qui stocke la clé de signature de zone sécurisée, est configuré pour répondre à une demande de connexion via le pare-feu externe issue du nœud distant en utilisant la clé de signature de zone sécurisée, pour recevoir des messages entrants via le pare-feu externe issus du nœud distant, et pour envoyer les messages entrants via le pare-feu interne au système de passerelle, dans lequel le serveur de délégation inverse ne stocke pas d'état relatif à des messages entrants précédents ; et</claim-text>
<claim-text>le serveur de délégation est configuré pour envoyer une demande de connexion via le pare-feu externe au nœud distant, pour recevoir des messages entrants via le pare-feu interne issus du système de passerelle, et pour envoyer les messages sortants via le pare-feu externe au nœud distant ; et</claim-text><!-- EPO <DP n="34"> --></claim-text>
<claim-text>un ou plusieurs processeurs pour exécuter les instructions exécutables par un ordinateur stockées dans l'un ou plusieurs supports de stockage lisibles par un ordinateur.</claim-text></claim-text></claim-text></claim>
<claim id="c-fr-01-0002" num="0002">
<claim-text>Le système d'interface de messages de la revendication 1 dans lequel la file d'attente entrante et la file d'attente sortante présentent des noms dérivés d'un nom de certificat du nœud local.</claim-text></claim>
<claim id="c-fr-01-0003" num="0003">
<claim-text>Le système d'interface de messages de la revendication 1 dans lequel le serveur de délégation inverse est configuré pour valider la demande de connexion reçue via le pare-feu externe issue du nœud distant selon une certification d'un nœud valide du réseau de nœuds d'homologues (peer-to-peer).</claim-text></claim>
<claim id="c-fr-01-0004" num="0004">
<claim-text>Procédé exécuté par un système de zone sécurisée prenant en charge des communications entre un nœud local et un nœud distant en utilisant un protocole de file d'attente de messages, le procédé comprenant :
<claim-text>sous contrôle d'un serveur de délégation inverse (151A) du système de zone sécurisée (150A),</claim-text>
<claim-text>réception d'une clé de signature de zone sécurisée via un pare-feu interne (140A) ;</claim-text>
<claim-text>réponse à une demande de connexion reçue du nœud distant via un pare-feu externe (160A) en utilisant la clé de signature de zone sécurisée ;<!-- EPO <DP n="35"> --></claim-text>
<claim-text>réception de messages entrants issus du nœud distant via le pare-feu externe ; et</claim-text>
<claim-text>envoi des messages entrants au nœud local via le pare-feu interne (140A),</claim-text>
<claim-text>dans lequel le serveur de délégation inverse ne stocke pas d'état relatif à des messages entrants précédents ; et</claim-text>
<claim-text>sous contrôle d'un serveur de délégation du système de zone sécurisée,</claim-text>
<claim-text>envoi d'une demande de connexion au nœud distant via le pare-feu externe ;</claim-text>
<claim-text>réception de messages sortants issus du nœud local via le pare-feu interne ; et</claim-text>
<claim-text>envoi des messages sortants au nœud distant via le pare-feu externe.</claim-text></claim-text></claim>
<claim id="c-fr-01-0005" num="0005">
<claim-text>Le procédé de la revendication 4 dans lequel le serveur de délégation envoie la demande de connexion en réponse à une réception d'une demande de connexion issue du nœud distant.</claim-text></claim>
<claim id="c-fr-01-0006" num="0006">
<claim-text>Le procédé de la revendication 4 dans lequel le protocole de file d'attente de messages est compatible avec un protocole AMQP (Advanced Message Queuing Protocol).<!-- EPO <DP n="36"> --></claim-text></claim>
<claim id="c-fr-01-0007" num="0007">
<claim-text>Le procédé selon la revendication 6 dans lequel le système de zone sécurisée s'interface avec un gestionnaire de passerelle AMQP via le pare-feu interne, dans lequel le gestionnaire de passerelle AMQP s'interface avec un courtier AMQP.</claim-text></claim>
<claim id="c-fr-01-0008" num="0008">
<claim-text>Le procédé de la revendication 4 dans lequel le système de zone sécurisée inclut un serveur de délégation inverse de basculement sur défaillance.</claim-text></claim>
<claim id="c-fr-01-0009" num="0009">
<claim-text>Le procédé de la revendication 4 dans lequel le nœud local et le nœud distant mettent en œuvre un flux d'un réseau Corda.</claim-text></claim>
<claim id="c-fr-01-0010" num="0010">
<claim-text>Système de zone sécurisée prenant en charge des communications entre un nœud local et un nœud distant en utilisant un protocole de file d'attente de messages, le système de zone sécurisée comprenant :
<claim-text>un serveur de délégation inverse (151A) qui est configuré pour recevoir une clé de signature de zone sécurisée via un pare-feu interne (140A), pour recevoir une connexion entrante issue du nœud distant via un pare-feu externe (160A), pour établir une connexion avec le nœud distant en utilisant la clé de signature de zone sécurisée, pour recevoir des messages entrants issus du nœud distant via le pare-feu externe, et pour envoyer les messages entrants au nœud local via le pare-feu interne (140A), dans lequel le serveur de délégation inverse ne stocke pas d'état relatif à des messages entrants précédents ; et<!-- EPO <DP n="37"> --></claim-text>
<claim-text>un serveur de délégation (152A) qui est configuré pour envoyer une connexion entrante au nœud distant via le pare-feu externe, pour établir une connexion avec le nœud distant, pour recevoir des messages sortants issus du nœud local via le pare-feu interne, et pour envoyer les messages sortants au nœud distant via le pare-feu externe.</claim-text></claim-text></claim>
<claim id="c-fr-01-0011" num="0011">
<claim-text>Le système de zone sécurisée de la revendication 10 dans lequel le protocole de file d'attente de messages est compatible avec un protocole AMQP (Advanced Message Queuing Protocol).</claim-text></claim>
<claim id="c-fr-01-0012" num="0012">
<claim-text>Le système de zone sécurisée selon la revendication 11 dans lequel le système de zone sécurisée s'interface avec un gestionnaire de passerelle AMQP via le pare-feu interne et dans lequel le gestionnaire de passerelle AMQP s'interface avec un courtier AMQP.</claim-text></claim>
<claim id="c-fr-01-0013" num="0013">
<claim-text>Le système de zone sécurisée de la revendication 12 dans lequel le nœud local est configuré pour envoyer des messages sortants au et pour recevoir des messages entrants du nœud distant via le courtier AMQP.</claim-text></claim>
<claim id="c-fr-01-0014" num="0014">
<claim-text>Le système de zone sécurisée de la revendication 10 dans lequel le système de zone sécurisée inclut un serveur de délégation inverse de basculement sur défaillance.</claim-text></claim>
<claim id="c-fr-01-0015" num="0015">
<claim-text>Le système de zone sécurisée de la revendication 10 dans lequel le nœud local et le nœud distant mettent en œuvre un flux d'un réseau Corda.</claim-text></claim>
</claims>
<drawings id="draw" lang="en"><!-- EPO <DP n="38"> -->
<figure id="f0001" num="1"><img id="if0001" file="imgf0001.tif" wi="141" he="231" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="39"> -->
<figure id="f0002" num="2"><img id="if0002" file="imgf0002.tif" wi="117" he="168" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="40"> -->
<figure id="f0003" num="3"><img id="if0003" file="imgf0003.tif" wi="117" he="195" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="41"> -->
<figure id="f0004" num="4"><img id="if0004" file="imgf0004.tif" wi="111" he="120" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="42"> -->
<figure id="f0005" num="5"><img id="if0005" file="imgf0005.tif" wi="136" he="226" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="43"> -->
<figure id="f0006" num="6"><img id="if0006" file="imgf0006.tif" wi="111" he="148" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="44"> -->
<figure id="f0007" num="7"><img id="if0007" file="imgf0007.tif" wi="138" he="226" img-content="drawing" img-format="tif"/></figure>
</drawings>
<ep-reference-list id="ref-list">
<heading id="ref-h0001"><b>REFERENCES CITED IN THE DESCRIPTION</b></heading>
<p id="ref-p0001" num=""><i>This list of references cited by the applicant is for the reader's convenience only. It does not form part of the European patent document. Even though great care has been taken in compiling the references, errors or omissions cannot be excluded and the EPO disclaims all liability in this regard.</i></p>
<heading id="ref-h0002"><b>Patent documents cited in the description</b></heading>
<p id="ref-p0002" num="">
<ul id="ref-ul0001" list-style="bullet">
<li><patcit id="ref-pcit0001" dnum="US20170352012A1"><document-id><country>US</country><doc-number>20170352012</doc-number><kind>A1</kind><date>20171207</date></document-id></patcit><crossref idref="pcit0001">[0007]</crossref></li>
</ul></p>
<heading id="ref-h0003"><b>Non-patent literature cited in the description</b></heading>
<p id="ref-p0003" num="">
<ul id="ref-ul0002" list-style="bullet">
<li><nplcit id="ref-ncit0001" npl-type="s" url="https://www.redbooks.ibm.com/redbooks/pdfs/sg248069.pdf"><article><author><name>WYATT, T. ROB et al.</name></author><atl/><serial><sertitle>Secure Messaging Scenarios with WebSphere MQ</sertitle><pubdate><sdate>20121101</sdate><edate/></pubdate></serial><location><pp><ppf>1</ppf><ppl>366</ppl></pp></location></article></nplcit><crossref idref="ncit0001">[0008]</crossref></li>
</ul></p>
</ep-reference-list>
</ep-patent-document>
