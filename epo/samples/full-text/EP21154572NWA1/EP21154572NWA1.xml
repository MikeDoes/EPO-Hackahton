<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE ep-patent-document PUBLIC "-//EPO//EP PATENT DOCUMENT 1.5.1//EN" "ep-patent-document-v1-5-1.dtd">
<!-- This XML data has been generated under the supervision of the European Patent Office -->
<ep-patent-document id="EP21154572A1" file="EP21154572NWA1.xml" lang="en" country="EP" doc-number="3889755" kind="A1" date-publ="20211006" status="n" dtd-version="ep-patent-document-v1-5-1">
<SDOBI lang="en"><B000><eptags><B001EP>ATBECHDEDKESFRGBGRITLILUNLSEMCPTIESILTLVFIROMKCYALTRBGCZEEHUPLSKBAHRIS..MTNORSMESMMAKHTNMD..........</B001EP><B005EP>J</B005EP><B007EP>BDM Ver 2.0.12 (4th of August) -  1100000/0</B007EP><B053EP>Amended claims in accordance with Rule 137(2) EPC.</B053EP></eptags></B000><B100><B110>3889755</B110><B120><B121>EUROPEAN PATENT APPLICATION</B121></B120><B130>A1</B130><B140><date>20211006</date></B140><B190>EP</B190></B100><B200><B210>21154572.8</B210><B220><date>20210201</date></B220><B240><B241><date>20210723</date></B241></B240><B250>en</B250><B251EP>en</B251EP><B260>en</B260></B200><B300><B310>202063003151 P</B310><B320><date>20200331</date></B320><B330><ctry>US</ctry></B330><B310>202016886713</B310><B320><date>20200528</date></B320><B330><ctry>US</ctry></B330></B300><B400><B405><date>20211006</date><bnum>202140</bnum></B405><B430><date>20211006</date><bnum>202140</bnum></B430></B400><B500><B510EP><classification-ipcr sequence="1"><text>G06F   3/06        20060101AFI20210629BHEP        </text></classification-ipcr><classification-ipcr sequence="2"><text>G06F   9/50        20060101ALI20210629BHEP        </text></classification-ipcr></B510EP><B520EP><classifications-cpc><classification-cpc sequence="1"><text>G06F   3/0635      20130101 LI20210623BHEP        </text></classification-cpc><classification-cpc sequence="2"><text>G06F   3/0613      20130101 LI20210623BHEP        </text></classification-cpc><classification-cpc sequence="3"><text>G06F   9/50        20130101 LI20210623BHEP        </text></classification-cpc><classification-cpc sequence="4"><text>G06F   3/0683      20130101 FI20210623BHEP        </text></classification-cpc><classification-cpc sequence="5"><text>G06F2206/1012      20130101 LA20210623BHEP        </text></classification-cpc><classification-cpc sequence="6"><text>G06F   3/0659      20130101 LI20210623BHEP        </text></classification-cpc></classifications-cpc></B520EP><B540><B541>de</B541><B542>SKALIERLEISTUNG IN EINEM SPEICHERSERVER MIT SPEICHERVORRICHTUNGEN</B542><B541>en</B541><B542>SCALING PERFORMANCE IN A STORAGE SERVER WITH STORAGE DEVICES</B542><B541>fr</B541><B542>MISE À L'ÉCHELLE DE PERFORMANCE DANS UN SERVEUR DE STOCKAGE AVEC DES DISPOSITIFS DE STOCKAGE</B542></B540><B590><B598>1</B598></B590></B500><B700><B710><B711><snm>Samsung Electronics Co., Ltd.</snm><iid>101883687</iid><irf>SS00C60</irf><adr><str>129, Samsung-ro 
Yeongtong-gu 
Gyeonggi-do</str><city>Suwon-si 16677</city><ctry>KR</ctry></adr></B711></B710><B720><B721><snm>ARUL DHAS, Benixon</snm><adr><str>3655 North First Street</str><city>San Jose, CA, 95134</city><ctry>US</ctry></adr></B721><B721><snm>PANDIAN, Ramaraj</snm><adr><str>3655 North First Street</str><city>San Jose, CA, 95134</city><ctry>US</ctry></adr></B721><B721><snm>LEE, Ronald</snm><adr><str>3655 North First Street</str><city>San Jose, CA, 95134</city><ctry>US</ctry></adr></B721></B720><B740><B741><snm>Kuhnen &amp; Wacker 
Patent- und Rechtsanwaltsbüro PartG mbB</snm><iid>101158360</iid><adr><str>Prinz-Ludwig-Straße 40A</str><city>85354 Freising</city><ctry>DE</ctry></adr></B741></B740></B700><B800><B840><ctry>AL</ctry><ctry>AT</ctry><ctry>BE</ctry><ctry>BG</ctry><ctry>CH</ctry><ctry>CY</ctry><ctry>CZ</ctry><ctry>DE</ctry><ctry>DK</ctry><ctry>EE</ctry><ctry>ES</ctry><ctry>FI</ctry><ctry>FR</ctry><ctry>GB</ctry><ctry>GR</ctry><ctry>HR</ctry><ctry>HU</ctry><ctry>IE</ctry><ctry>IS</ctry><ctry>IT</ctry><ctry>LI</ctry><ctry>LT</ctry><ctry>LU</ctry><ctry>LV</ctry><ctry>MC</ctry><ctry>MK</ctry><ctry>MT</ctry><ctry>NL</ctry><ctry>NO</ctry><ctry>PL</ctry><ctry>PT</ctry><ctry>RO</ctry><ctry>RS</ctry><ctry>SE</ctry><ctry>SI</ctry><ctry>SK</ctry><ctry>SM</ctry><ctry>TR</ctry></B840><B844EP><B845EP><ctry>BA</ctry></B845EP><B845EP><ctry>ME</ctry></B845EP></B844EP><B848EP><B849EP><ctry>KH</ctry></B849EP><B849EP><ctry>MA</ctry></B849EP><B849EP><ctry>MD</ctry></B849EP><B849EP><ctry>TN</ctry></B849EP></B848EP></B800></SDOBI>
<abstract id="abst" lang="en">
<p id="pa01" num="0001">Provided is a method of packet processing, the method including receiving an input/output (IO) request from a host, selecting a drive corresponding to the IO request using a hashing algorithm or a round-robin technique, and establishing a connection between the host and the drive.
<img id="iaf01" file="imgaf001.tif" wi="124" he="100" img-content="drawing" img-format="tif"/></p>
</abstract>
<description id="desc" lang="en"><!-- EPO <DP n="1"> -->
<heading id="h0001">CROSS-REFERENCE TO RELATED APPLICATION(S)</heading>
<p id="p0001" num="0001">This application claim priority to, and the benefit of, <patcit id="pcit0001" dnum="US63003151"><text>U.S. Provisional Application Serial No. 63/003,151, filed March 31, 2020</text></patcit>, entitled LINEARLY SCALING PERFORMANCE IN A NON-VOLATILE MEMORY EXPRESS (NVME) OVER FABRICS STORAGE SERVER WITH NVME KEY VALUE DRIVES, the content of which being incorporated herein in its entirety.</p>
<heading id="h0002">FIELD</heading>
<p id="p0002" num="0002">One or more aspects of embodiments of the present disclosure relate generally to data storage, and to improving performance of a storage server having storage devices.</p>
<heading id="h0003">BACKGROUND</heading>
<p id="p0003" num="0003">As data storage devices continue to advance, such as with key-value based drives including key-value solid state drives (KVSSDs), the speed at which the storage devices are able operate continues to increase. The speed of these storage devices may limit the rate at which a data storage system (e.g., a non-volatile memory express (NVME) over fabrics storage server) is able to operate. However, due to the improved performance of the storage devices, and also due to the increased scale at which storage systems must operate, one or more central processing units (CPUs) may be overloaded. The CPUs may be for processing input/output (IO) requests and for coordinating data transfer within the system among multiple storage devices and multiple clients and hosts. The overloading of the CPUs may cause a bottleneck in the system at the CPU.<!-- EPO <DP n="2"> --></p>
<p id="p0004" num="0004">The above information disclosed in this Background section is only for enhancement of understanding of the background of the disclosure, and therefore may contain information that does not form the prior art.</p>
<heading id="h0004">SUMMARY</heading>
<p id="p0005" num="0005">Embodiments described herein provide improvements to data storage.</p>
<p id="p0006" num="0006">According to embodiments of the present disclosure, there is provided a method of packet processing, the method including receiving an input/output (IO) request from a host, selecting a drive corresponding to the IO request using a hashing algorithm or a round-robin technique, and establishing a connection between the host and the drive.</p>
<p id="p0007" num="0007">The hashing algorithm that is used may be a Rendezvous hashing algorithm based on a key corresponding to the IO request, and a drive ID of the drive.</p>
<p id="p0008" num="0008">Receiving the IO request from the host may include receiving the IO request at a network-processing module associated with a processor for establishing the connection.</p>
<p id="p0009" num="0009">The method may further include forwarding the IO request from the network-processing module associated with the processor to a drive-processing module associated with the processor that is configured to select the drive corresponding to the IO request using the hashing algorithm.</p>
<p id="p0010" num="0010">The method may further include using a remote direct memory access protocol by the network-processing module for processing the IO request, and using a transmission control protocol by the drive-processing module for processing data corresponding to the IO request.</p>
<p id="p0011" num="0011">The method may further include forwarding the IO request between the network-processing module and a drive-processing module using an atomic ring buffer.</p>
<p id="p0012" num="0012">The method may further include assigning one or more other IO requests to one or more respective cores of the processor using the round-robin technique to balance one<!-- EPO <DP n="3"> --> or more connections between one or more hosts and one or more drives, and to balance a loading of the cores of the processor.</p>
<p id="p0013" num="0013">According other embodiments of the present disclosure, there is provided a system for packet processing, the system including a processor including a plurality of cores, and a drive-processing module, wherein one of the cores is configured to receive an input/output (IO) request from a host, the drive-processing module is configured to select a drive corresponding to the IO request using a hashing algorithm or a round-robin technique, and the processor is configured to establish a connection between the host and the drive.</p>
<p id="p0014" num="0014">The hashing algorithm that is used may be a Rendezvous hashing algorithm based on a key corresponding to the IO request, and a drive ID of the drive.</p>
<p id="p0015" num="0015">The system may further include a network-processing module, wherein the one of the cores is configured to receive the IO request from the host by receiving the IO request at the network-processing module for establishing the connection.</p>
<p id="p0016" num="0016">The network-processing module may be configured to forward the IO request to the drive-processing module, which is further configured to select the drive corresponding to the IO request using the hashing algorithm.</p>
<p id="p0017" num="0017">The network-processing module may be further configured to use a remote direct memory access protocol for processing the IO request, and the drive-processing module may be further configured to use a transmission control protocol for processing data corresponding to the IO request.</p>
<p id="p0018" num="0018">The system may further include an atomic ring buffer that is configured to forward the IO request between the network-processing module and a drive-processing module.</p>
<p id="p0019" num="0019">The network-processing module may be further configured to assign one or more other IO requests to one or more respective cores of the processor using the round-robin<!-- EPO <DP n="4"> --> technique to balance one or more connections between one or more hosts and one or more drives, and to balance a loading of the cores of the processor.</p>
<p id="p0020" num="0020">According to yet other embodiments of the present disclosure, there is provided a non-transitory computer readable medium implemented on a system for packet processing, the non-transitory computer readable medium having computer code that, when executed on a processor, implements a method of packet processing, the method including receiving an input/output (IO) request from a host, selecting a drive corresponding to the IO request using a hashing algorithm or a round-robin technique, and establishing a connection between the host and the drive.</p>
<p id="p0021" num="0021">The hashing algorithm that is used may be a Rendezvous hashing algorithm based on a key corresponding to the IO request, and a drive ID of the drive.</p>
<p id="p0022" num="0022">Receiving the IO request from the host may include receiving the IO request at a network-processing module associated with a processor for establishing the connection.</p>
<p id="p0023" num="0023">The computer code, when executed by the processor, may be further configured to implement the method of packet processing by causing the network-processing module associated with the processor to forward the IO request to a drive-processing module associated with the processor, and by causing the drive-processing module to select the drive corresponding to the IO request using the hashing algorithm.</p>
<p id="p0024" num="0024">The computer code, when executed by the processor, may be further configured to implement the method of packet processing by causing an atomic ring buffer to forward the IO request between the network-processing module and a drive-processing module.</p>
<p id="p0025" num="0025">The computer code, when executed by the processor, may be further configured to implement the method of packet processing by causing the network-processing module to assign one or more other IO requests to one or more respective cores of the processor using the round-robin technique to balance one or more<!-- EPO <DP n="5"> --> connections between one or more hosts and one or more drives, and to balance a loading of the cores of the processor.</p>
<p id="p0026" num="0026">Accordingly, the system and method of embodiments of the present disclosure is able reduce or eliminate CPU bottlenecking to improve data storage by balancing loads among CPU cores and storage devices.</p>
<heading id="h0005">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p0027" num="0027">Non-limiting and non-exhaustive embodiments of the present embodiments are described with reference to the following figures, wherein like reference numerals refer to like parts throughout the various views unless otherwise specified.
<ul id="ul0001" list-style="none" compact="compact">
<li><figref idref="f0001">FIG. 1</figref> shows a block diagram depicting a connection between a host and a storage device using a multi-CPU storage appliance for storing data on multiple storage devices, according to some embodiments of the present disclosure;</li>
<li><figref idref="f0002">FIG. 2</figref> shows a block diagram of a server including two CPUs in a multi-CPU storage appliance for storing data on multiple storage devices, according to some embodiments of the present disclosure;</li>
<li><figref idref="f0003">FIG. 3</figref> depicts an architecture for a multi-CPU storage appliance for storing data on multiple storage devices, according to some embodiments of the present disclosure; and</li>
<li><figref idref="f0004">FIG. 4</figref> shows a flowchart depicting a method of packet processing.</li>
</ul></p>
<p id="p0028" num="0028">Corresponding reference characters indicate corresponding components throughout the several views of the drawings. Skilled artisans will appreciate that elements in the figures are illustrated for simplicity and clarity, and have not necessarily been drawn to scale. For example, the dimensions of some of the elements, layers, and regions in the figures may be exaggerated relative to other elements, layers, and regions to help to improve clarity and understanding of various embodiments. Also, common but<!-- EPO <DP n="6"> --> well-understood elements and parts not related to the description of the embodiments might not be shown in order to facilitate a less obstructed view of these various embodiments and to make the description clear.</p>
<heading id="h0006">DETAILED DESCRIPTION</heading>
<p id="p0029" num="0029">Features of the inventive concept and methods of accomplishing the same may be understood more readily by reference to the detailed description of embodiments and the accompanying drawings. Hereinafter, embodiments will be described in more detail with reference to the accompanying drawings. The described embodiments, however, may be embodied in various different forms, and should not be construed as being limited to only the illustrated embodiments herein. Rather, these embodiments are provided as examples so that this disclosure will be thorough and complete, and will fully convey the aspects and features of the present inventive concept to those skilled in the art. Accordingly, processes, elements, and techniques that are not necessary to those having ordinary skill in the art for a complete understanding of the aspects and features of the present inventive concept may not be described.</p>
<p id="p0030" num="0030">Unless otherwise noted, like reference numerals denote like elements throughout the attached drawings and the written description, and thus, descriptions thereof will not be repeated. Further, parts not related to the description of the embodiments might not be shown to make the description clear. In the drawings, the relative sizes of elements, layers, and regions may be exaggerated for clarity.</p>
<p id="p0031" num="0031">In the detailed description, for the purposes of explanation, numerous specific details are set forth to provide a thorough understanding of various embodiments. It is apparent, however, that various embodiments may be practiced without these specific details or with one or more equivalent arrangements. In other instances, well-known<!-- EPO <DP n="7"> --> structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring various embodiments.</p>
<p id="p0032" num="0032">It will be understood that, although the terms "first," "second," "third," etc., may be used herein to describe various elements, components, regions, layers and/or sections, these elements, components, regions, layers and/or sections should not be limited by these terms. These terms are used to distinguish one element, component, region, layer or section from another element, component, region, layer or section. Thus, a first element, component, region, layer or section described below could be termed a second element, component, region, layer or section, without departing from the spirit and scope of the present disclosure.</p>
<p id="p0033" num="0033">The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the present disclosure. As used herein, the singular forms "a" and "an" are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms "comprises," "comprising," "have," "having," "includes," and "including," when used in this specification, specify the presence of the stated features, integers, steps, operations, elements, and/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and/or groups thereof. As used herein, the term "and/or" includes any and all combinations of one or more of the associated listed items.</p>
<p id="p0034" num="0034">As used herein, the term "substantially," "about," "approximately," and similar terms are used as terms of approximation and not as terms of degree, and are intended to account for the inherent deviations in measured or calculated values that would be recognized by those of ordinary skill in the art. "About" or "approximately," as used herein, is inclusive of the stated value and means within an acceptable range of deviation for the particular value as determined by one of ordinary skill in the art, considering the<!-- EPO <DP n="8"> --> measurement in question and the error associated with measurement of the particular quantity (i.e., the limitations of the measurement system). For example, "about" may mean within one or more standard deviations, or within ± 30%, 20%, 10%, 5% of the stated value. Further, the use of "may" when describing embodiments of the present disclosure refers to "one or more embodiments of the present disclosure."</p>
<p id="p0035" num="0035">When a certain embodiment may be implemented differently, a specific process order may be performed differently from the described order. For example, two consecutively described processes may be performed substantially at the same time or performed in an order opposite to the described order.</p>
<p id="p0036" num="0036">The electronic or electric devices and/or any other relevant devices or components according to embodiments of the present disclosure described herein may be implemented utilizing any suitable hardware, firmware (e.g. an application-specific integrated circuit), software, or a combination of software, firmware, and hardware. For example, the various components of these devices may be formed on one integrated circuit (IC) chip or on separate IC chips. Further, the various components of these devices may be implemented on a flexible printed circuit film, a tape carrier package (TCP), a printed circuit board (PCB), or formed on one substrate.</p>
<p id="p0037" num="0037">Further, the various components of these devices may be a process or thread, running on one or more processors, in one or more computing devices, executing computer program instructions and interacting with other system components for performing the various functionalities described herein. The computer program instructions are stored in a memory which may be implemented in a computing device using a standard memory device, such as, for example, a random access memory (RAM). The computer program instructions may also be stored in other non-transitory computer readable media such as, for example, a CD-ROM, flash drive, or the like. Also, a person of skill in the art should recognize that the functionality of various computing<!-- EPO <DP n="9"> --> devices may be combined or integrated into a single computing device, or the functionality of a particular computing device may be distributed across one or more other computing devices without departing from the spirit and scope of the embodiments of the present disclosure.</p>
<p id="p0038" num="0038">Unless otherwise defined, all terms (including technical and scientific terms) used herein have the same meaning as commonly understood by one of ordinary skill in the art to which the present inventive concept belongs. It will be further understood that terms, such as those defined in commonly used dictionaries, should be interpreted as having a meaning that is consistent with their meaning in the context of the relevant art and/or the present specification, and should not be interpreted in an idealized or overly formal sense, unless expressly so defined herein.</p>
<p id="p0039" num="0039">In a storage server, when a host establishes a connection, one or more cores of a CPU of the server may be used for processing all requests from the connection, and may forward all of the requests to a single storage drive. Accordingly, the connection established with the host may be able to access all of the drives of a storage system. That is, once a connection is established with a qualified name, then any of the multiple drives can be accessed.</p>
<p id="p0040" num="0040">Because a large number of drives are being served, the drives may handle millions of input/output (IO) requests. However, the CPU itself (e.g., the core) may be able to process only a limited number of requests per second (e.g., one million requests per second). Upon reaching this limit, the CPU/core may be a bottleneck of the system if a client tries to access the same connection because the CPU is unable to process more requests at the same time. That is, even if the system supports a 100 Gigabyte network, such throughput may be unable to be achieved due to the bottleneck at the CPU, and some of the available cores may be underutilized.<!-- EPO <DP n="10"> --></p>
<p id="p0041" num="0041">Accordingly, some of the embodiments disclosed herein provide an architecture for providing improved packet processing using a message-passing architecture.</p>
<p id="p0042" num="0042"><figref idref="f0001">FIG. 1</figref> shows a block diagram depicting a connection between a host and a storage device using a multi-CPU storage appliance for storing data on multiple storage devices, according to some embodiments of the present disclosure.</p>
<p id="p0043" num="0043">Referring to <figref idref="f0001">FIG. 1</figref>, as mentioned above, as storage device performance increases, bottlenecks in a storage system (e.g., a non-volatile memory express (NVME) over fabrics storage server) may more frequently occur at the central processing unit(s) (CPU(s)) responsible for coordinating IO requests and data transfer associated with multiple IO threads from one or more host applications. As described below, embodiments of the present disclosure improve data storage technology by reducing inefficiencies associated with the coordination handled by the CPU(s), thereby improving overall network performance.</p>
<p id="p0044" num="0044">An example memory application or software, which is used as a target of the some embodiments of the present disclosure, may be designed for storage devices, such as block drives 108. As shown, the storage system or network includes a CPU 103 having multiple cores 102, a network interface controller (NIC) 104, a memory 106, and multiple drives 108. The drives 108 may include SSDs, Ethernet SSDs, KVSSDs, etc., although it should be noted that Ethernet SSDs and KVSSDs are subsets of the different types of devices that can be used in the storage system. The memory 106 may include multiple volatile dynamic random-access memory (DRAM) modules 207 (e.g., see <figref idref="f0002">FIG. 2</figref>).</p>
<p id="p0045" num="0045">When a host establishes a connection via the NIC 104, one of the cores 102a of the CPU 103 may be used for processing all of the requests 112 (e.g., IO requests) from the connection to the host, and may forward all of the requests 112 to a single drive 108a. Accordingly, the host is able to access all of the drives 108 via the connection. That is,<!-- EPO <DP n="11"> --> once a connection by the host is established with a qualified name, then any of the multiple drives 108 can be accessed.</p>
<p id="p0046" num="0046">Because a relatively large number of storage devices or drives 108 may be served, the drives 108 may handle a quantity (e.g., millions) of IO requests 112 from various hosts. However, the CPU 103 itself (e.g., one or more cores 102 of the CPU 103) may be able to only process a limited number of requests 112 per second (e.g., up to one million requests per second). Upon reaching this limit, the CPU 103, or the core 102s, may effectively become a bottleneck in the system, because the CPU 103 may be unable to concurrently process further additional requests 112 if a client attempts to access the same connection via the NIC 104. Accordingly, even if the storage system supports, for example, a 100-Gigabyte network, such throughput might not be able to be fully achieved due to the bottleneck at the CPU 103. Accordingly, even though many cores 102 are available, some of the cores 102 may be underutilized.</p>
<p id="p0047" num="0047">Accordingly, as described below, embodiments of the present disclosure provide improved methods and systems for improving latency, and for reducing bottlenecking at the CPU 103, by using modules having allocated CPU resources to enable load balancing among CPU cores and storage devices (e.g., to ensure that none of the CPU cores or storage devices have significantly higher workloads than others of the CPU cores or storage devices while some of the CPU cores or storage devices are underutilized).</p>
<p id="p0048" num="0048"><figref idref="f0002">FIG. 2</figref> shows a block diagram of a server including two CPUs in a multi-CPU storage appliance for storing data on multiple storage devices, according to some embodiments of the present disclosure, and <figref idref="f0003">FIG. 3</figref> depicts an architecture for a multi-CPU storage appliance for storing data on multiple storage devices, according to some embodiments of the present disclosure.<!-- EPO <DP n="12"> --></p>
<p id="p0049" num="0049">Referring to <figref idref="f0002">FIG. 2</figref>, in the present example, a server 200 may provide hardware architecture representing two different non-uniform memory access (NUMA) nodes 214, each NUMA node 214 corresponding to a NIC 204, a memory 206 comprising multiple memory modules 207 (e.g., DRAM modules), a CPU 203, and multiple storage devices 208.</p>
<p id="p0050" num="0050">NUMA may refer to a method that may be used in a symmetric multiprocessing (SMP) system, where the memory access time is influenced by the location of the memory relative to the processor. NUMA may allow for configuring a cluster of microprocessors in a multiprocessing system so that the microprocessors can share memory locally. Under NUMA, a processor may access its own local memory faster than it is able to access non-local memory (e.g., faster than it is able to access memory that is local to another processor, or memory that is shared between processors). Benefits of NUMA may be most notable for workloads on servers where the data is often associated strongly with certain tasks or users. Accordingly, NUMA may improve performance and enable expansion of the system to be expanded.</p>
<p id="p0051" num="0051">Accordingly, the server 200 may have multiple CPU cores at each of the respective CPUs 203 and multiple storage devices 208 (e.g., drives). As described further with respect to <figref idref="f0003">FIG. 3</figref>, some embodiments of the present disclosure provide one or more protocols or mechanisms that may be implemented to ensure that the workload experienced by the cores and the storage is balanced. That is, as described below, the disclosed embodiments prevent one or more of the cores and/or one or more of the storage devices 208 from being overloaded as a result of multiple IO requests while others of the cores and/or storage devices 208 are unused or underutilized. By avoiding the overloading of some cores and/or storage devices 208 and the underutilization of other cores and/or storage devices 208, bottlenecks at the corresponding CPU 203 that may otherwise restrict data flow may be reduced or eliminated.<!-- EPO <DP n="13"> --></p>
<p id="p0052" num="0052">Referring to <figref idref="f0003">FIG. 3</figref>, embodiments of the present disclosure may provide a software architecture for providing high-performance packet processing using a message-passing architecture using the hardware architecture shown in <figref idref="f0001">FIGS. 1</figref> and <figref idref="f0002">2</figref>. A system of embodiments of the present disclosure may include multiple CPU sockets. The CPU sockets have memory 306 that is bound to each NUMA socket to ensure that each IO request 312 is processed despite bottleneck in the CPU 203. In the present example, a server for implementing embodiments of the present disclosure may have two NUMA sockets. However, it should be noted that the design disclosed herein could be extended to a server including additional NUMA sockets.</p>
<p id="p0053" num="0053">Software for implementing embodiments of the present disclosure may be designed to process packets from the network including a storage system. Also, the software may be distributed across multiple NVME drives 308. For example, for KV-based drives, a drive 308 may be selected by a drive-processing module 324 (described further below) of the CPU 303 using any suitable hashing algorithm such as a Rendezvous hashing algorithm (e.g., a highest random weight (HRW) algorithm). The Rendezvous hashing algorithm may use two parameters - a key (e.g., an object key corresponding to a value to be stored on a drive 308), and a drive ID (e.g., a unique identifier or an input/output (IO) identification corresponding to the drive 308 on which the data is to be stored). The suitable hashing algorithm may be used when an associated request processing has associated metadata that is sought to be preserved across multiple IO request to a same key.</p>
<p id="p0054" num="0054">For example, there may be a list of storage devices or drives 308, with one of the drives 308 to be ultimately selected for use for access or storage of a given key. Accordingly, for each drive 308, there may be an identification/string that represents the drive id, each drive 308 having a unique drive id. To select a drive 308 for storing the key, a Rendezvous hash may be calculated for each of the drives 308 on the list based on the<!-- EPO <DP n="14"> --> input of the key and each respective drive ID. Similarly, for any incoming request 312, the request 312 may be identified by the hash calculated by the Rendezvous hashing algorithm, which will be unique for every key-drive combination. Accordingly, the system can avoid implementing a separate table stored on a drive for mapping which drives store which keys, thereby further improving system efficiency.</p>
<p id="p0055" num="0055">Accordingly, if data is written, and a readback command for the data is issued, the Rendezvous hashing algorithm ensures that the same data is accessed by ensuring access the same drive 308. In more detail, this may be accomplished by computing a number (e.g., a number between 0 and 1) for each drive 308 corresponding to a hash of a combination of the key of the IO request 312 and the respective drive ID of each drive 308, by then comparing all of the numbers, and by then selecting the highest computed number as corresponding to the drive 308 that is to be selected for that particular IO request 312. Although a Rendezvous hashing algorithm is discussed herein, it should be noted that other hashing algorithms or functions may be used in accordance with other embodiments of the present disclosure.</p>
<p id="p0056" num="0056">The software running on the CPU 303 may be sub-divided into different components. Each component may be tasked with the responsibility of perform a given action or set of actions on all of the packets processed in the storage system. Two main components may be 1) the module 322 that processes the IO requests 312 arriving at the NIC 304 (e.g., for performing network processing), and 2) the module 324 that processes the NVME queues of the drives 308 (e.g., for performing drive processing or drive IO processing). Herein, these modules may be respectively referred to as a network-processing module 322 and a drive-processing module 324. The network-processing module 322 may use an RDMA (remote direct memory access) protocol for processing requests, while the drive-processing module 324 may use TCP (transmission control protocol) for data processing.<!-- EPO <DP n="15"> --></p>
<p id="p0057" num="0057">Accordingly, by using the individual modules, embodiments of the present disclosure may improve IO performance by reducing a likelihood of a bottleneck restricting data flow due to the limitations of the CPU 303. Each of the modules 322, 324 may use an amount (e.g., a specified amount) of bounded CPU resources. That is, each of the modules 322, 324 may allocate a respective set of cores 302 to be used by the modules 322, 324 to achieve improved or optimized performance.</p>
<p id="p0058" num="0058">For instance, in the present example, each NIC 304 may use about four cores running at 2.10GHz to provide the full throughput of a 100G network while transferring 2MB objects using NVME over TCP. It should be noted, however, that the number used in the present example may change according to the specifications of the system.</p>
<p id="p0059" num="0059">For inbound network connections, a given number of cores 302 of the CPU 303 may be preallocated for an NIC 304 with affinity to a NUMA node 314 at which the NIC 304 is attached. The NUMA nodes 314 may be referred to as a respective CPU-memory couples. For example, the CPU socket and the selected memory 306/bank of drives 308 build a respective NUMA node 314. Conventionally, whenever a CPU sought to access the memory of a different NUMA node, the CPU could not directly access the memory of the other NUMA node, and was instead required to access the memory of the other NUMA node by going through a separate CPU that owned the memory.</p>
<p id="p0060" num="0060">In embodiments of the present disclosure, however, all connections may be processed by using a set of preallocated cores 302 of the CPU 303. The network-processing module 322 for processing the requests 312 arriving at the NIC 304 may respectively allocate all of the connections by using a round-robin allocation scheme combined with usage monitoring (e.g., for monitoring the number of connections on each core 302) to enable stateless processing. That is, each of the connections corresponding to the requests 312 may be assigned to the cores 302 on a round-robin basis to balance the loading of the cores 302 to thereby improve bandwidth from the drives 308. If the<!-- EPO <DP n="16"> --> drive-processing module 324 determines that a given core 302 is underperforming or is otherwise unable to handle any additional connections, the drive-processing module 324 can ensure no additional connections are made with the given core 302. Accordingly, assuming each client is trying to share the bandwidth of the network equally, the storage system can ensure that the load is balanced across all available cores 302.</p>
<p id="p0061" num="0061">Similarly, for processing the requests 312 to the NVME queues, a respective drive-processing module 324 may run on a dedicated set of cores 302 on both of the NUMA sockets of the server (e.g., in the storage server, the drives 308 will be on both of the NUMA sockets). Because each request 312 may be distributed to any drive 308, some otherwise undesirable cross-NUMA memory copying by the drives 308 may occur (e.g., between the memory 306 of the first NUMA node 314a and the drives 308 of the second NUMA node 314b, and vice versa). However, because the Rendezvous hashing algorithm is used for selecting the drive 308, the distribution may be balanced for normal usage scenarios.</p>
<p id="p0062" num="0062">Accordingly, a system with cross-NUMA transfer bandwidth (corresponding to cross-NUMA transfer requests 320) that is more than half of the NIC bandwidth (corresponding to the IO requests 312) may be able to run without degradation in system performance. An IO module (e.g., the drive-processing module 324) may handle requests to the drives 308 from all of the connections. Also, the drive-processing module 324 may use a bounded number of CPU cores 302, which may be based on the number of available drives 308 on the server.</p>
<p id="p0063" num="0063">Further, the requests 312 that are forwarded to IO threads 316 (e.g., the threads 116 shown in <figref idref="f0001">FIG. 1</figref>) may be selected by any suitable algorithm such as a round-robin algorithm. For example, the requests 312 may be forwarded between the network-processing module 322 and the drive-processing module 324 using an atomic ring buffer 118 (see <figref idref="f0001">FIG. 1</figref>). That is, once one of the modules 322, 324 has completed processing of<!-- EPO <DP n="17"> --> data of a request 312 in accordance with its role, the request 316 may be forwarded to the other one of the modules 322, 324. The atomic ring buffer 118 enables a lockless design, thereby achieving relatively high throughput. The atomic ring buffer 118 uses a cooperative thread-scheduling without blocking calls in any function.</p>
<p id="p0064" num="0064">Embodiments of the present disclosure may also accommodate the addition of other modules for performing other tasks. Further, a different algorithm may be used to distribute the requests 312 across the threads 316 of a given module. Also, an entirety of a design of embodiments of the present disclosure may be based on a logical framework that allows different modules to run on the same core 302, which may be useful if the core 302 has a sufficient number of CPU cycles allotted for processing a number of requests 312 that exceeds that which is required by the module.</p>
<p id="p0065" num="0065">As described above, because each IO thread 316 can communicate directly to all of the queues of the drives 308, and because there may be another set of queues for each core 302, embodiments of the present disclosure are able to omit locking synchronization that would otherwise may be needed, as each IO thread 316 is able to access its own individual queues to the drives 308.</p>
<p id="p0066" num="0066">Further, when any new IO request 312 occurs, the system is able to select between the numerous IO cores 302. In a NUMA-based system, according to some embodiments, selection of one of the IO cores 302 having a smallest physical distance to the corresponding memory/DRAM 306 may be a criteria to help ensure sufficient performance.</p>
<p id="p0067" num="0067">Accordingly, by going in a round robin fashion, or by balancing across all of the cores 302, improved bandwidth of the drives 308 may be achieved.</p>
<p id="p0068" num="0068">Additionally, because each CPU 303 is provided with a channel to access each associated memory 306 and bank of drives 308, the system is able to avoid the limited<!-- EPO <DP n="18"> --> bandwidth otherwise associated with the bottlenecking that comes with cross-NUMA channel access 320.</p>
<p id="p0069" num="0069"><figref idref="f0004">FIG. 4</figref> shows a flowchart depicting a method of packet processing.</p>
<p id="p0070" num="0070">Referring to <figref idref="f0004">FIG. 4</figref>, at S401, a core of a processor may receive an input/output (IO) request from a host (e.g., one of the cores 102a of the CPU 103 of <figref idref="f0001">FIG. 1</figref> may receive the IO request 312 of <figref idref="f0003">FIG. 3</figref>). The core of the processor may receive the IO request at a network-processing module associated with a processor for establishing the connection (e.g., the network-processing module 322 of <figref idref="f0003">FIG. 3</figref>). At S402, a drive-processing module (e.g., the drive-processing module 324 of <figref idref="f0003">FIG. 3</figref>) may select a drive corresponding to the IO request (e.g., one of the drives 108 or 308 of <figref idref="f0001">FIGS. 1</figref> and <figref idref="f0003">3</figref>) using a hashing algorithm or a round-robin technique. In some embodiments, the hashing algorithm that is used may be a Rendezvous hashing algorithm based on a key corresponding to the IO request and a drive ID of the drive. At S403, a connection may be established between the host and the selected drive.</p>
<p id="p0071" num="0071">At S404, the network-processing module may forward the IO request associated with the processor to the drive-processing module associated with the processor that is configured to select the drive corresponding to the IO request using the hashing algorithm. At S405, the network-processing module may use a remote direct memory access protocol for processing the IO request. At S406, the drive-processing module may use a transmission control protocol for processing data corresponding to the IO request.</p>
<p id="p0072" num="0072">At S407, an atomic ring buffer (e.g., the atomic ring buffer 118 of <figref idref="f0001">FIG. 1</figref>) may forward the IO request between the network-processing module and a drive-processing module.</p>
<p id="p0073" num="0073">At S408, the network-processing module may assign other IO requests to respective cores of the processor using the round-robin technique to balance connections<!-- EPO <DP n="19"> --> between one or more hosts and one or more drives and to balance a loading of the cores of the CPU.</p>
<p id="p0074" num="0074">Thus, embodiments of the present disclosure are able to reduce or eliminate CPU bottlenecking by using modules having allocated CPU resources to balance loads among CPU cores and storage devices, thereby improving data storage technology.</p>
<p id="p0075" num="0075">While the present disclosure has been particularly shown and described with reference to some example embodiments thereof, it will be understood by those of ordinary skill in the art that various changes in form and details may be made therein without departing from the spirit and scope of the present disclosure as set forth in the following claims and their equivalents.</p>
</description>
<claims id="claims01" lang="en"><!-- EPO <DP n="20"> -->
<claim id="c-en-0001" num="0001">
<claim-text>A method of packet processing, the method comprising:
<claim-text>receiving an input/output (IO) request from a host;</claim-text>
<claim-text>selecting a drive corresponding to the IO request using a hashing algorithm or a round-robin technique; and</claim-text>
<claim-text>establishing a connection between the host and the drive.</claim-text></claim-text></claim>
<claim id="c-en-0002" num="0002">
<claim-text>The method of claim 1, wherein the hashing algorithm that is used is a Rendezvous hashing algorithm based on a key corresponding to the IO request, and a drive ID of the drive.</claim-text></claim>
<claim id="c-en-0003" num="0003">
<claim-text>The method of claim 1, wherein receiving the IO request from the host comprises receiving the IO request at a network-processing module associated with a processor for establishing the connection.</claim-text></claim>
<claim id="c-en-0004" num="0004">
<claim-text>The method of claim 3, further comprising forwarding the IO request from the network-processing module associated with the processor to a drive-processing module associated with the processor that is configured to select the drive corresponding to the IO request using the hashing algorithm.</claim-text></claim>
<claim id="c-en-0005" num="0005">
<claim-text>The method of claim 4, further comprising using a remote direct memory access protocol by the network-processing module for processing the IO request; and<br/>
using a transmission control protocol by the drive-processing module for processing data corresponding to the IO request.</claim-text></claim>
<claim id="c-en-0006" num="0006">
<claim-text>The method of claim 3, further comprising forwarding the IO request between the network-processing module and a drive-processing module using an atomic ring buffer.</claim-text></claim>
<claim id="c-en-0007" num="0007">
<claim-text>The method of claim 3, further comprising assigning one or more other IO requests to one or more respective cores of the processor using the round-robin<!-- EPO <DP n="21"> --> technique to balance one or more connections between one or more hosts and one or more drives, and to balance a loading of the cores of the processor.</claim-text></claim>
<claim id="c-en-0008" num="0008">
<claim-text>A system for packet processing, the system comprising a processor comprising a plurality of cores, and a drive-processing module, wherein:
<claim-text>one of the cores is configured to receive an input/output (IO) request from a host;</claim-text>
<claim-text>the drive-processing module is configured to select a drive corresponding to the IO request using a hashing algorithm or a round-robin technique; and</claim-text>
<claim-text>the processor is configured to establish a connection between the host and the drive.</claim-text></claim-text></claim>
<claim id="c-en-0009" num="0009">
<claim-text>The system of claim 8, wherein the hashing algorithm that is used is a Rendezvous hashing algorithm based on a key corresponding to the IO request, and a drive ID of the drive.</claim-text></claim>
<claim id="c-en-0010" num="0010">
<claim-text>The system of claim 8, further comprising a network-processing module, wherein the one of the cores is configured to receive the IO request from the host by receiving the IO request at the network-processing module for establishing the connection.</claim-text></claim>
<claim id="c-en-0011" num="0011">
<claim-text>The system of claim 10, wherein the network-processing module is configured to forward the IO request to the drive-processing module, which is further configured to select the drive corresponding to the IO request using the hashing algorithm.</claim-text></claim>
<claim id="c-en-0012" num="0012">
<claim-text>The system of claim 11, wherein the network-processing module is further configured to use a remote direct memory access protocol for processing the IO request; and<br/>
wherein the drive-processing module is further configured to use a transmission control protocol for processing data corresponding to the IO request.</claim-text></claim>
<claim id="c-en-0013" num="0013">
<claim-text>The system of claim 10, further comprising an atomic ring buffer that is configured to forward the IO request between the network-processing module and the drive-processing module.<!-- EPO <DP n="22"> --></claim-text></claim>
<claim id="c-en-0014" num="0014">
<claim-text>The system of claim 10, wherein the network-processing module is further configured to assign one or more other IO requests to one or more respective cores of the processor using the round-robin technique to balance one or more connections between one or more hosts and one or more drives, and to balance a loading of the cores of the processor.</claim-text></claim>
<claim id="c-en-0015" num="0015">
<claim-text>A non-transitory computer readable medium implemented on a system for packet processing, the non-transitory computer readable medium having computer code that, when executed on a processor, implements a method of packet processing, the method comprising:
<claim-text>receiving an input/output (IO) request from a host;</claim-text>
<claim-text>selecting a drive corresponding to the IO request using a hashing algorithm or a round-robin technique; and</claim-text>
<claim-text>establishing a connection between the host and the drive.</claim-text></claim-text></claim>
<claim id="c-en-0016" num="0016">
<claim-text>The non-transitory computer readable medium of claim 15, wherein the hashing algorithm that is used is a Rendezvous hashing algorithm based on a key corresponding to the IO request, and a drive ID of the drive.</claim-text></claim>
<claim id="c-en-0017" num="0017">
<claim-text>The non-transitory computer readable medium of claim 15, wherein receiving the IO request from the host comprises receiving the IO request at a network-processing module associated with a processor for establishing the connection.</claim-text></claim>
<claim id="c-en-0018" num="0018">
<claim-text>The non-transitory computer readable medium of claim 17, wherein the computer code, when executed by the processor, is further configured to implement the method of packet processing by causing the network-processing module associated with the processor to forward the IO request to a drive-processing module associated with the processor, and by causing the drive-processing module to select the drive corresponding to the IO request using the hashing algorithm.</claim-text></claim>
<claim id="c-en-0019" num="0019">
<claim-text>The non-transitory computer readable medium of claim 17, wherein the computer code, when executed by the processor, is further configured to implement the<!-- EPO <DP n="23"> --> method of packet processing by causing an atomic ring buffer to forward the IO request between the network-processing module and a drive-processing module.</claim-text></claim>
<claim id="c-en-0020" num="0020">
<claim-text>The non-transitory computer readable medium of claim 17, wherein the computer code, when executed by the processor, is further configured to implement the method of packet processing by causing the network-processing module to assign one or more other IO requests to one or more respective cores of the processor using the round-robin technique to balance one or more connections between one or more hosts and one or more drives, and to balance a loading of the cores of the processor.</claim-text></claim>
</claims>
<amended-claims id="aclaims" lang="en" amend-claim-type="EPC">
<heading id="h0007">Amended claims in accordance with Rule 137(2) EPC.</heading>
<claim id="ac-en-0001" num="0001">
<claim-text>A method of packet processing, the method comprising:
<claim-text>receiving (S401) an input/output, IO, request from a host;</claim-text>
<claim-text>selecting (S402) a drive corresponding to the IO request using a hashing algorithm or a round-robin technique; and</claim-text>
<claim-text>establishing (S403) a connection between the host and the drive.</claim-text></claim-text></claim>
<claim id="ac-en-0002" num="0002">
<claim-text>The method of claim 1, wherein the hashing algorithm that is used is a Rendezvous hashing algorithm based on a key corresponding to the IO request, and a drive ID of the drive.</claim-text></claim>
<claim id="ac-en-0003" num="0003">
<claim-text>The method of claim 1, wherein receiving the IO request from the host comprises receiving the IO request at a network-processing module associated with a processor for establishing the connection.</claim-text></claim>
<claim id="ac-en-0004" num="0004">
<claim-text>The method of claim 3, further comprising forwarding (S404) the IO request from the network-processing module associated with the processor to a drive-processing module associated with the processor that is configured to select the drive corresponding to the IO request using the hashing algorithm.</claim-text></claim>
<claim id="ac-en-0005" num="0005">
<claim-text>The method of claim 4, further comprising using (S405) a remote direct memory access protocol by the network-processing module for processing the IO request; and<br/>
using (S406) a transmission control protocol by the drive-processing module for processing data corresponding to the IO request.</claim-text></claim>
<claim id="ac-en-0006" num="0006">
<claim-text>The method of claim 3, further comprising forwarding (S407) the IO request between the network-processing module and a drive-processing module using an atomic ring buffer.</claim-text></claim>
<claim id="ac-en-0007" num="0007">
<claim-text>The method of claim 3, further comprising assigning (S408) one or more other IO requests to one or more respective cores of the processor using the round-robin technique to balance one or more connections between one or more hosts and one or more drives, and to balance a loading of the cores of the processor.</claim-text></claim>
<claim id="ac-en-0008" num="0008">
<claim-text>A system for packet processing, the system comprising a processor comprising a plurality of cores, and a drive-processing module, wherein:
<claim-text>one of the cores is configured to receive (S401) an input/output, IO, request from a host;</claim-text>
<claim-text>the drive-processing module is configured to select (S402) a drive corresponding to the IO request using a hashing algorithm or a round-robin technique; and</claim-text>
<claim-text>the processor is configured to establish (S403) a connection between the host and the drive.</claim-text></claim-text></claim>
<claim id="ac-en-0009" num="0009">
<claim-text>The system of claim 8, wherein the hashing algorithm that is used is a Rendezvous hashing algorithm based on a key corresponding to the IO request, and a drive ID of the drive.</claim-text></claim>
<claim id="ac-en-0010" num="0010">
<claim-text>The system of claim 8, further comprising a network-processing module, wherein the one of the cores is configured to receive the IO request from the host by receiving the IO request at the network-processing module for establishing the connection.</claim-text></claim>
<claim id="ac-en-0011" num="0011">
<claim-text>The system of claim 10, wherein the network-processing module is configured to forward (S404) the IO request to the drive-processing module, which is further configured to select the drive corresponding to the IO request using the hashing algorithm.</claim-text></claim>
<claim id="ac-en-0012" num="0012">
<claim-text>The system of claim 11, wherein the network-processing module is further configured to use (S405) a remote direct memory access protocol for processing the IO request; and<br/>
wherein the drive-processing module is further configured to use (S406) a transmission control protocol for processing data corresponding to the IO request.</claim-text></claim>
<claim id="ac-en-0013" num="0013">
<claim-text>The system of claim 10, further comprising an atomic ring buffer that is configured to forward (S407) the IO request between the network-processing module and the drive-processing module.</claim-text></claim>
<claim id="ac-en-0014" num="0014">
<claim-text>The system of claim 10, wherein the network-processing module is further configured to assign (S408) one or more other IO requests to one or more respective cores of the processor using the round-robin technique to balance one or more connections between one or more hosts and one or more drives, and to balance a loading of the cores of the processor.</claim-text></claim>
<claim id="ac-en-0015" num="0015">
<claim-text>A non-transitory computer readable medium implemented on a system for packet processing, the non-transitory computer readable medium having computer code that, when executed on a processor, implements a method of packet processing, the method comprising:
<claim-text>receiving (S401) an input/output, IO, request from a host;</claim-text>
<claim-text>selecting (S402) a drive corresponding to the IO request using a hashing algorithm or a round-robin technique; and</claim-text>
<claim-text>establishing (S403) a connection between the host and the drive.</claim-text></claim-text></claim>
<claim id="ac-en-0016" num="0016">
<claim-text>The non-transitory computer readable medium of claim 15, wherein the hashing algorithm that is used is a Rendezvous hashing algorithm based on a key corresponding to the IO request, and a drive ID of the drive.</claim-text></claim>
<claim id="ac-en-0017" num="0017">
<claim-text>The non-transitory computer readable medium of claim 15, wherein receiving the IO request from the host comprises receiving the IO request at a network-processing module associated with a processor for establishing the connection.</claim-text></claim>
<claim id="ac-en-0018" num="0018">
<claim-text>The non-transitory computer readable medium of claim 17, wherein the computer code, when executed by the processor, is further configured to implement the method of packet processing by causing the network-processing module associated with the processor to forward (S404) the IO request to a drive-processing module associated with the processor, and by causing the drive-processing module to select the drive corresponding to the IO request using the hashing algorithm.</claim-text></claim>
<claim id="ac-en-0019" num="0019">
<claim-text>The non-transitory computer readable medium of claim 17, wherein the computer code, when executed by the processor, is further configured to implement the method of packet processing by causing an atomic ring buffer to forward (S407) the IO request between the network-processing module and a drive-processing module.</claim-text></claim>
<claim id="ac-en-0020" num="0020">
<claim-text>The non-transitory computer readable medium of claim 17, wherein the computer code, when executed by the processor, is further configured to implement the method of packet processing by causing the network-processing module to assign (S408) one or more other IO requests to one or more respective cores of the processor using the round-robin technique to balance one or more connections between one or more hosts and one or more drives, and to balance a loading of the cores of the processor.</claim-text></claim></amended-claims>
<drawings id="draw" lang="en"><!-- EPO <DP n="24"> -->
<figure id="f0001" num="1"><img id="if0001" file="imgf0001.tif" wi="142" he="182" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="25"> -->
<figure id="f0002" num="2"><img id="if0002" file="imgf0002.tif" wi="135" he="184" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="26"> -->
<figure id="f0003" num="3"><img id="if0003" file="imgf0003.tif" wi="153" he="233" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="27"> -->
<figure id="f0004" num="4"><img id="if0004" file="imgf0004.tif" wi="135" he="221" img-content="drawing" img-format="tif"/></figure>
</drawings>
<search-report-data id="srep" lang="en" srep-office="EP" date-produced=""><doc-page id="srep0001" file="srep0001.tif" wi="157" he="233" type="tif"/><doc-page id="srep0002" file="srep0002.tif" wi="155" he="233" type="tif"/></search-report-data><search-report-data date-produced="20210625" id="srepxml" lang="en" srep-office="EP" srep-type="ep-sr" status="n"><!--
 The search report data in XML is provided for the users' convenience only. It might differ from the search report of the PDF document, which contains the officially published data. The EPO disclaims any liability for incorrect or incomplete data in the XML for search reports.
 -->

<srep-info><file-reference-id>SS00C60</file-reference-id><application-reference><document-id><country>EP</country><doc-number>21154572.8</doc-number></document-id></application-reference><applicant-name><name>Samsung Electronics Co., Ltd.</name></applicant-name><srep-established srep-established="yes"/><srep-invention-title title-approval="yes"/><srep-abstract abs-approval="yes"/><srep-figure-to-publish figinfo="by-applicant"><figure-to-publish><fig-number>1</fig-number></figure-to-publish></srep-figure-to-publish><srep-info-admin><srep-office><addressbook><text>DH</text></addressbook></srep-office><date-search-report-mailed><date>20210705</date></date-search-report-mailed></srep-info-admin></srep-info><srep-for-pub><srep-fields-searched><minimum-documentation><classifications-ipcr><classification-ipcr><text>G06F</text></classification-ipcr></classifications-ipcr></minimum-documentation></srep-fields-searched><srep-citations><citation id="sr-cit0001"><patcit dnum="US2019324662A1" id="sr-pcit0001" url="http://v3.espacenet.com/textdoc?DB=EPODOC&amp;IDX=US2019324662&amp;CY=ep"><document-id><country>US</country><doc-number>2019324662</doc-number><kind>A1</kind><name>YU SI [CN] ET AL</name><date>20191024</date></document-id></patcit><category>Y</category><rel-claims>1-20</rel-claims><rel-passage><passage>* paragraph [0053] - paragraph [0128]; claim 8 *</passage><passage>* figures 2A, 2B, 3 *</passage></rel-passage></citation><citation id="sr-cit0002"><patcit dnum="US2006195698A1" id="sr-pcit0002" url="http://v3.espacenet.com/textdoc?DB=EPODOC&amp;IDX=US2006195698&amp;CY=ep"><document-id><country>US</country><doc-number>2006195698</doc-number><kind>A1</kind><name>PINKERTON JAMES T [US] ET AL</name><date>20060831</date></document-id></patcit><category>Y</category><rel-claims>1-20</rel-claims><rel-passage><passage>* paragraph [0027] - paragraph [0044] *</passage><passage>* figure 2 *</passage></rel-passage></citation><citation id="sr-cit0003"><patcit dnum="US2017149878A1" id="sr-pcit0003" url="http://v3.espacenet.com/textdoc?DB=EPODOC&amp;IDX=US2017149878&amp;CY=ep"><document-id><country>US</country><doc-number>2017149878</doc-number><kind>A1</kind><name>MUTNURU RISHI K [US]</name><date>20170525</date></document-id></patcit><category>A</category><rel-claims>1-20</rel-claims><rel-passage><passage>* paragraph [0012] - paragraph [0108] *</passage><passage>* figures 1A, 1B, 2, 4 *</passage></rel-passage></citation></srep-citations><srep-admin><examiners><primary-examiner><name>Kochev, Miroslav</name></primary-examiner></examiners><srep-office><addressbook><text>The Hague</text></addressbook></srep-office><date-search-completed><date>20210625</date></date-search-completed></srep-admin><!--							The annex lists the patent family members relating to the patent documents cited in the above mentioned European search report.							The members are as contained in the European Patent Office EDP file on							The European Patent Office is in no way liable for these particulars which are merely given for the purpose of information.							For more details about this annex : see Official Journal of the European Patent Office, No 12/82						--><srep-patent-family><patent-family><priority-application><document-id><country>US</country><doc-number>2019324662</doc-number><kind>A1</kind><date>20191024</date></document-id></priority-application><family-member><document-id><country>CN</country><doc-number>110073321</doc-number><kind>A</kind><date>20190730</date></document-id></family-member><family-member><document-id><country>EP</country><doc-number>3550421</doc-number><kind>A1</kind><date>20191009</date></document-id></family-member><family-member><document-id><country>JP</country><doc-number>6773229</doc-number><kind>B2</kind><date>20201021</date></document-id></family-member><family-member><document-id><country>JP</country><doc-number>2020503613</doc-number><kind>A</kind><date>20200130</date></document-id></family-member><family-member><document-id><country>US</country><doc-number>2019324662</doc-number><kind>A1</kind><date>20191024</date></document-id></family-member><family-member><document-id><country>WO</country><doc-number>2018119899</doc-number><kind>A1</kind><date>20180705</date></document-id></family-member></patent-family><patent-family><priority-application><document-id><country>US</country><doc-number>2006195698</doc-number><kind>A1</kind><date>20060831</date></document-id></priority-application><text>NONE</text></patent-family><patent-family><priority-application><document-id><country>US</country><doc-number>2017149878</doc-number><kind>A1</kind><date>20170525</date></document-id></priority-application><family-member><document-id><country>US</country><doc-number>9571570</doc-number><kind>B1</kind><date>20170214</date></document-id></family-member><family-member><document-id><country>US</country><doc-number>2017149878</doc-number><kind>A1</kind><date>20170525</date></document-id></family-member></patent-family></srep-patent-family></srep-for-pub></search-report-data>
<ep-reference-list id="ref-list">
<heading id="ref-h0001"><b>REFERENCES CITED IN THE DESCRIPTION</b></heading>
<p id="ref-p0001" num=""><i>This list of references cited by the applicant is for the reader's convenience only. It does not form part of the European patent document. Even though great care has been taken in compiling the references, errors or omissions cannot be excluded and the EPO disclaims all liability in this regard.</i></p>
<heading id="ref-h0002"><b>Patent documents cited in the description</b></heading>
<p id="ref-p0002" num="">
<ul id="ref-ul0001" list-style="bullet">
<li><patcit id="ref-pcit0001" dnum="US63003151" dnum-type="L"><document-id><country>US</country><doc-number>63003151</doc-number><date>20200331</date></document-id></patcit><crossref idref="pcit0001">[0001]</crossref></li>
</ul></p>
</ep-reference-list>
</ep-patent-document>
