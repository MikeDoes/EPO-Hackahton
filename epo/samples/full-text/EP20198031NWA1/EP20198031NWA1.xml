<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE ep-patent-document PUBLIC "-//EPO//EP PATENT DOCUMENT 1.5.1//EN" "ep-patent-document-v1-5-1.dtd">
<!-- This XML data has been generated under the supervision of the European Patent Office -->
<ep-patent-document id="EP20198031A1" file="EP20198031NWA1.xml" lang="en" country="EP" doc-number="3889793" kind="A1" date-publ="20211006" status="n" dtd-version="ep-patent-document-v1-5-1">
<SDOBI lang="en"><B000><eptags><B001EP>ATBECHDEDKESFRGBGRITLILUNLSEMCPTIESILTLVFIROMKCYALTRBGCZEEHUPLSKBAHRIS..MTNORSMESMMAKHTNMD..........</B001EP><B005EP>J</B005EP><B007EP>BDM Ver 2.0.12 (4th of August) -  1100000/0</B007EP></eptags></B000><B100><B110>3889793</B110><B120><B121>EUROPEAN PATENT APPLICATION</B121></B120><B130>A1</B130><B140><date>20211006</date></B140><B190>EP</B190></B100><B200><B210>20198031.5</B210><B220><date>20200924</date></B220><B250>en</B250><B251EP>en</B251EP><B260>en</B260></B200><B300><B310>202063004554 P</B310><B320><date>20200403</date></B320><B330><ctry>US</ctry></B330><B310>202016984303</B310><B320><date>20200804</date></B320><B330><ctry>US</ctry></B330></B300><B400><B405><date>20211006</date><bnum>202140</bnum></B405><B430><date>20211006</date><bnum>202140</bnum></B430></B400><B500><B510EP><classification-ipcr sequence="1"><text>G06F  16/21        20190101AFI20210309BHEP        </text></classification-ipcr></B510EP><B520EP><classifications-cpc><classification-cpc sequence="1"><text>G06F  16/21        20190101 FI20210303BHEP        </text></classification-cpc></classifications-cpc></B520EP><B540><B541>de</B541><B542>VORVERARBEITUNG BEI DER DATENBANKSYSTEMARBEITSLASTERFASSUNG UND -WIEDERGABE</B542><B541>en</B541><B542>PREPROCESSING IN DATABASE SYSTEM WORKLOAD CAPTURE AND REPLAY</B542><B541>fr</B541><B542>PRÉTRAITEMENT LORS D'UNE CAPTURE ET D'UNE LECTURE DE CHARGE DE TRAVAIL DE SYSTÈME DE BASE DE DONNÉES</B542></B540><B590><B598>1</B598></B590></B500><B700><B710><B711><snm>SAP SE</snm><iid>101471558</iid><irf>S14987EU - hb</irf><adr><str>Dietmar-Hopp-Allee 16</str><city>69190 Walldorf</city><ctry>DE</ctry></adr></B711></B710><B720><B721><snm>LEE, Juchang</snm><adr><str>SAP Global IP Group
Dietmar-Hopp-Allee 16</str><city>69190 Walldorf</city><ctry>DE</ctry></adr></B721><B721><snm>PARK, Myunggon</snm><adr><str>SAP Global IP Group
Dietmar-Hopp-Allee 16</str><city>69190 Walldorf</city><ctry>DE</ctry></adr></B721><B721><snm>LIM, Jihwan</snm><adr><str>SAP Global IP Group
Dietmar-Hopp-Allee 16</str><city>69190 Walldorf</city><ctry>DE</ctry></adr></B721><B721><snm>HWANG, YoungSeok</snm><adr><str>SAP Global IP Group
Dietmar-Hopp-Allee 16</str><city>69190 Walldorf</city><ctry>DE</ctry></adr></B721></B720><B740><B741><snm>Müller-Boré &amp; Partner 
Patentanwälte PartG mbB</snm><iid>100060440</iid><adr><str>Friedenheimer Brücke 21</str><city>80639 München</city><ctry>DE</ctry></adr></B741></B740></B700><B800><B840><ctry>AL</ctry><ctry>AT</ctry><ctry>BE</ctry><ctry>BG</ctry><ctry>CH</ctry><ctry>CY</ctry><ctry>CZ</ctry><ctry>DE</ctry><ctry>DK</ctry><ctry>EE</ctry><ctry>ES</ctry><ctry>FI</ctry><ctry>FR</ctry><ctry>GB</ctry><ctry>GR</ctry><ctry>HR</ctry><ctry>HU</ctry><ctry>IE</ctry><ctry>IS</ctry><ctry>IT</ctry><ctry>LI</ctry><ctry>LT</ctry><ctry>LU</ctry><ctry>LV</ctry><ctry>MC</ctry><ctry>MK</ctry><ctry>MT</ctry><ctry>NL</ctry><ctry>NO</ctry><ctry>PL</ctry><ctry>PT</ctry><ctry>RO</ctry><ctry>RS</ctry><ctry>SE</ctry><ctry>SI</ctry><ctry>SK</ctry><ctry>SM</ctry><ctry>TR</ctry></B840><B844EP><B845EP><ctry>BA</ctry></B845EP><B845EP><ctry>ME</ctry></B845EP></B844EP><B848EP><B849EP><ctry>KH</ctry></B849EP><B849EP><ctry>MA</ctry></B849EP><B849EP><ctry>MD</ctry></B849EP><B849EP><ctry>TN</ctry></B849EP></B848EP></B800></SDOBI>
<abstract id="abst" lang="en">
<p id="pa01" num="0001">Methods, systems, and computer-readable storage media for receiving a capture file, the capture file including data representative of a workload executed in a source database system, and processing the capture file to provide a replay file, the replay file being in a format that is executable by a replayer to replay the workload in a target database system, processing the capture file including: processing the capture file to provide a set of intermediate files, and processing the set of intermediate files using in-memory merge sort operations to generate a set of replay files.
<img id="iaf01" file="imgaf001.tif" wi="138" he="99" img-content="drawing" img-format="tif"/></p>
</abstract>
<description id="desc" lang="en"><!-- EPO <DP n="1"> -->
<heading id="h0001"><b>CLAIM OF PRIORITY</b></heading>
<p id="p0001" num="0001">This application claims the benefit of and priority to <patcit id="pcit0001" dnum="US63004554"><text>U.S. App. No. 63/004,554, filed on April 3, 2020</text></patcit>, the disclosure of which is expressly incorporated herein by reference in the entirety.</p>
<heading id="h0002"><b>BACKGROUND</b></heading>
<p id="p0002" num="0002">Enterprises leverage database systems to store and access data, and, often, significant amounts of data. Some database systems store thousands to millions of records that are frequently accessed. For example, transactions can be repeatedly executed to access and/or manipulate data stored within a database system. In some examples, transactions include queries that are issued to the database system by clients (e.g., users, applications). Queries can be received as query statements written in a query language (e.g., structured query language (SQL)).</p>
<p id="p0003" num="0003">There is a drive to optimize performance of database systems. Optimization can improve execution time of transactions, as well as reduce the load on technical resources (e.g., processors, memory) during execution of transactions. In some instances, optimization can be achieved by changing operational parameters of the database system, and/or changing versions of software implementing the database system. However, in some cases, such changes can have a negative impact on the performance.</p>
<p id="p0004" num="0004">In view of this, prior to changing database system parameters and/or software, it can be useful to evaluate the performance of a target database system that implements the changes to compare its performance with a source database system (e.g., a database system that does not include the changes). In some instances, a simulated or emulated workload is run on the target database system. To achieve this, a capture file records a workload executed within the source database system, and one or more replay files are generated based on the capture file. The workload is replayed within the target database system using the one or more replay files. However, generation of replay files from capture files can be a time-consuming and resource-intensive task, which significantly impacts consumption of memory and processing power. In some instances, the process to<!-- EPO <DP n="2"> --> generate replay files fails due to an out-of-memory (OOM) condition, when a computing device executing the process has insufficient memory to handle the data.</p>
<heading id="h0003"><b>SUMMARY</b></heading>
<p id="p0005" num="0005">Implementations of the present disclosure are directed to capture and replay of workloads in database systems. More particularly, implementations of the present disclosure are directed to preprocessing of capture files to provide replay files for workload capture and replay in database systems.</p>
<p id="p0006" num="0006">In some implementations, actions include receiving a capture file, the capture file including data representative of a workload executed in a source database system, and processing the capture file to provide a replay file, the replay file being in a format that is executable by a replayer to replay the workload in a target database system, processing the capture file including: processing the capture file to provide a set of intermediate files, and processing the set of intermediate files using in-memory merge sort operations to generate a set of replay files. Other implementations of this aspect include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices.</p>
<p id="p0007" num="0007">These and other implementations can each optionally include one or more of the following features: the set of intermediate files are partially sorted in a session-wise file hierarchy based on session identifiers (IDs) of respective sessions executed during execution of the workload in the source database system; the in-memory merge sort operations include sorting elements of sub-sets of intermediate files a time in main memory and merging elements in max heap memory; processing the capture file to provide the set of intermediate files at least partially includes reading data of service files in-memory and joining at least portions of the data; processing the capture file to provide the set of intermediate files at least partially includes decompressing the capture file and processing the capture file using a set of executor threads to provide a set of service files, the set of intermediate files being generated using the set of service files; each replay file is associated with a respective session executed during execution of the workload in the source database system based on a respective session identifier (ID); and actions further<!-- EPO <DP n="3"> --> include executing one or more manipulations after merging a sub-set of intermediate files.</p>
<p id="p0008" num="0008">The present disclosure also provides a computer-readable storage medium coupled to one or more processors and having instructions stored thereon which, when executed by the one or more processors, cause the one or more processors to perform operations in accordance with implementations of the methods provided herein.</p>
<p id="p0009" num="0009">The present disclosure further provides a system for implementing the methods provided herein. The system includes one or more processors, and a computer-readable storage medium coupled to the one or more processors having instructions stored thereon which, when executed by the one or more processors, cause the one or more processors to perform operations in accordance with implementations of the methods provided herein.</p>
<p id="p0010" num="0010">It is appreciated that methods in accordance with the present disclosure can include any combination of the aspects and features described herein. That is, methods in accordance with the present disclosure are not limited to the combinations of aspects and features specifically described herein, but also include any combination of the aspects and features provided.</p>
<p id="p0011" num="0011">The details of one or more implementations of the present disclosure are set forth in the accompanying drawings and the description below. Other features and advantages of the present disclosure will be apparent from the description and drawings, and from the claims.</p>
<heading id="h0004"><b>DESCRIPTION OF DRAWINGS</b></heading>
<p id="p0012" num="0012">
<ul id="ul0001" list-style="none" compact="compact">
<li><figref idref="f0001">FIG. 1</figref> depicts an example architecture that can be used to execute implementations of the present disclosure.</li>
<li><figref idref="f0002">FIG. 2</figref> depicts a conceptual architecture providing capture and replay functionality.</li>
<li><figref idref="f0003">FIG. 3</figref> depicts a workload capture file schema for storing context data and performance data recorded during execution of a workload in a source database system.<!-- EPO <DP n="4"> --></li>
<li><figref idref="f0004">FIG. 4</figref> depicts a process for converting a workload capture file into a replay file for execution in a target database system.</li>
<li><figref idref="f0005">FIG. 5A</figref> depicts an example structure of a capture file.</li>
<li><figref idref="f0006">FIG. 5B</figref> depicts an example structure of a replay file that is provided by a pre-processor processing the capture file of <figref idref="f0005">FIG. 5A</figref>.</li>
<li><figref idref="f0007">FIG. 6A</figref> depicts a process for efficiently converting a workload capture file into a replay file for execution in a target database system in accordance with implementations of the present disclosure.</li>
<li><figref idref="f0008">FIG. 6B</figref> depicts an example of partially sorted intermediate file structure in a session-wise file hierarchy.</li>
<li><figref idref="f0009">FIG. 7</figref> depicts detail of a portion of the process for efficiently converting a workload capture file into a replay file of <figref idref="f0007">FIG. 6A</figref>.</li>
<li><figref idref="f0010">FIG. 8</figref> depicts an example process that can be executed in accordance with implementations of the present disclosure.</li>
<li><figref idref="f0011">FIG. 9</figref> is a schematic illustration of example computer systems that can be used to execute implementations of the present disclosure.</li>
</ul></p>
<p id="p0013" num="0013">Like reference symbols in the various drawings indicate like elements.</p>
<heading id="h0005"><b>DETAILED DESCRIPTION</b></heading>
<p id="p0014" num="0014">Implementations of the present disclosure are directed to capture and replay of workloads in database systems. More particularly, implementations of the present disclosure are directed to preprocessing of capture files to provide replay files for workload capture and replay in database systems. Implementations can include actions of receiving a capture file, the capture file including data representative of a workload executed in a source database system, and processing the capture file to provide a replay file, the replay file being in a format that is executable by a replayer to replay the workload in a target database system, processing the capture file including: processing the capture file to provide a set of intermediate files, and processing the set of intermediate files using in-memory merge sort operations to generate a set of replay files.<!-- EPO <DP n="5"> --></p>
<p id="p0015" num="0015">Implementations of the present disclosure are described in further detail with reference to an example database system. The example database system is provided as the SAP HANA in-memory database system provided by SAP SE of Walldorf, Germany. SAP HANA can be described as a data platform that processes transactions and analytics at the same time on any data type, with built-in advanced analytics and multi-model data processing engines. More particularly, SAP HANA is an in-memory database system. In some examples, an in-memory database system can be described as a database system that uses main memory for data storage. In some examples, main memory includes random access memory (RAM) that communicates with one or more processors (e.g., central processing units (CPUs)), over a memory bus. An-memory database can be contrasted with database management systems that employ a disk storage mechanism. In some examples, in-memory databases are faster than disk storage databases, because internal optimization algorithms can be simpler and execute fewer CPU instructions (e.g., require reduced CPU consumption). In some examples, accessing data in an in-memory database eliminates seek time when querying the data, which provides faster and more predictable performance than disk-storage databases. While SAP HANA is used as an example herein, it is contemplated, however, that implementations of the present disclosure can be realized in any appropriate database system.</p>
<p id="p0016" num="0016"><figref idref="f0001">FIG. 1</figref> depicts an example architecture 100 in accordance with implementations of the present disclosure. In the depicted example, the example architecture 100 includes a client device 102, a network 106, and a server system 104. The server system 104 includes one or more server devices and databases 108 (e.g., processors, memory). In the depicted example, a user 112 interacts with the client device 102.</p>
<p id="p0017" num="0017">In some examples, the client device 102 can communicate with the server system 104 over the network 106. In some examples, the client device 102 includes any appropriate type of computing device such as a desktop computer, a laptop computer, a handheld computer, a tablet computer, a personal digital assistant (PDA), a cellular telephone, a network appliance, a camera, a smart phone, an enhanced general packet radio service (EGPRS) mobile phone, a media player, a navigation device, an email device, a game console, or an appropriate combination of any two or more of these<!-- EPO <DP n="6"> --> devices or other data processing devices. In some implementations, the network 106 can include a large computer network, such as a local area network (LAN), a wide area network (WAN), the Internet, a cellular network, a telephone network (e.g., PSTN) or an appropriate combination thereof connecting any number of communication devices, mobile computing devices, fixed computing devices and server systems.</p>
<p id="p0018" num="0018">In some implementations, the server system 104 includes at least one server and at least one data store. In the example of <figref idref="f0001">FIG. 1</figref>, the server system 104 is intended to represent various forms of servers including, but not limited to a web server, an application server, a proxy server, a network server, and/or a server pool. In general, server systems accept requests for application services and provides such services to any number of client devices (e.g., the client device 102 over the network 106).</p>
<p id="p0019" num="0019">In accordance with implementations of the present disclosure, and as noted above, the server system 104 can host an in-memory database system (e.g., SAP HANA). In addition, and as described in further detail herein, the server system 104 can host a source database system, a target database system, and a workload capture and replay system that enables a workload of the source database system to be recorded (captured) and replayed in the target database system. The capture and replay system provides pause and resume functionality for request-specific replay to provide granular results in accordance with implementations of the present disclosure. In some examples, a workload includes a set of requests (e.g., <i>R</i><sub>1</sub>, ... <i>R<sub>m</sub></i>, where <i>m</i> is a number of requests <i>R</i> in the set of requests). In some examples, a workload operates on a database system to induce changes in the database system through query statements (e.g., structured query language (SQL) statements) that come from client interfaces (e.g., Java Database Connectivity (JDBC), Open Database Connectivity (ODBC), database shared library (DBSL)). A workload can be created by applications or clients.</p>
<p id="p0020" num="0020">In some examples, a request is a smaller unit than a query statement (e.g., SQL statement). For example, a query statement can include (or result in) a set of requests (one or more requests). Example requests can include, without limitation, Connect, Disconnect, PrepareStatement, ExecuteStatement, Fetch, AbortTransaction, CommitTransaction, Get LOB Piece, Put LOB Piece, and the like.<!-- EPO <DP n="7"> --></p>
<p id="p0021" num="0021">To provide further context for implementations of the present disclosure, and as introduced above, there is a drive to optimize performance of database systems. Optimization can improve execution time of transactions, as well as reduce the load on technical resources (e.g., processors, memory) during execution of transactions. In some instances, optimization can be achieved by changing operational parameters of the database system, and/or changing versions of software implementing the database system. However, in some cases, such changes can have a negative impact on the performance.</p>
<p id="p0022" num="0022">In view of this, prior to changing database system parameters and/or software, it can be useful to evaluate the performance of a target database system (e.g., a test database system) that implements the changes to compare its performance with a source database system (e.g., a production database system) that does not include the changes. In some instances, a simulated or emulated workload is run on the target database system. However, the simulated or emulated workload may not accurately reflect the workload experienced by the source database system. Accordingly, results from the target database system may not accurately reflect the performance of the source database system under the changes.</p>
<p id="p0023" num="0023">To address this issue, capture and replay systems have been developed that enables capturing (recording) of production workloads (actual, real-world workloads) at a source database system, replaying a captured workload at a target database system, and comparing the performance of target database system to the performance of the source database system. An example includes the SAP HANA Capture and Replay tool provided by SAP SE. Although the SAP HANA Capture and Replay tool is referenced herein by way of example, it is contemplated that implementations of the present disclosure can be realized with any appropriate capture and replay system.</p>
<p id="p0024" num="0024">In general, the capture and replay system is a fully- or semi-automated tool for integrated testing in the context of a database system (e.g., SAP HANA). The capture and replay system reduces effort needed for creating tests and performs a more accurate replay than is possible with other approaches. In some examples, the capture and replay system enables similar concurrency, memory allocation and CPU usage in the target<!-- EPO <DP n="8"> --> database system as seen in the source database system, from which the captured workload is provided.</p>
<p id="p0025" num="0025"><figref idref="f0002">FIG. 2</figref> depicts a conceptual architecture 200 providing capture and replay functionality. In the example of <figref idref="f0002">FIG. 2</figref>, the conceptual architecture 200 includes a source environment 202 and a target environment 204. The source environment 202 includes one or more clients 210, one or more application servers 212, and a source database system 214. The target environment 204 includes a target database system 216.</p>
<p id="p0026" num="0026">In some examples, during production use, the clients 210 interact with the source database system 214 through the application servers 212. For example, a client 210 can instigate a transaction that is to be executed on the source database system 214, which transaction can access, add, modify, and/or delete data within the source database system 214. It can be determined that a configuration and/or software of the target database system 214 are to be changed. Example changes can include changing configuration settings and/or updating the software of the target database system 214 from a first version (VI) to a second version (V2). Prior to implementing the changes in production, the changes are evaluated within the target environment 204.</p>
<p id="p0027" num="0027">To evaluate the change, a capture and replay system is used to capture a workload (e.g., one or more transactions) executed within the source environment 202 to replay in the target environment 204. In the example of <figref idref="f0002">FIG. 2</figref>, the capture and replay system includes a workload capture module 220, a workload pre-processing module 222, and a replay module 224 (also referred to herein as a replayer). In the example of <figref idref="f0002">FIG. 2</figref>, the workload capture module 220 is executed directly within the source database system 214, and the replay module 224 is executed directly within the target database system 216.</p>
<p id="p0028" num="0028">In some examples, prior to executing the workload that is to be captured, at least a portion of the data stored within the source database system 214 is copied to a database capture store 230. For example, data (e.g., stored in one or more tables) that is to be accessed by the workload is stored in the database capture store. In some examples, configuration parameters of the source database system are stored in the database capture store 230. In some examples, the data and configuration parameters recorded in the database capture store 230 provide a snapshot of a state of the source database system<!-- EPO <DP n="9"> --> 214 immediately prior to execution of the workload. Prior to replay of the workload in the target system 204, the information from the database capture store 230 can be provided to the target system 204. In this manner, the target database system 216 can be initialized to the state of the source database system 214 before manipulation through replay of the workload in the target database system 216. In some examples, after replay of the workload in the target database system 216, the target database system 216 can be re-initialized to the state of the source database system 214 (e.g., to replay the workload again in the target database system 216).</p>
<p id="p0029" num="0029">As introduced above, during production use, the one or more clients 210 issue transactions (also referred to herein as requests for database operations) to the one or more application servers 212. The one or more application servers 212 send the requests for database operations to be carried out by the source database system 214. Further, during production use, the source database system 214 can generate information about the requests, which is recorded in one or more capture files stored within a capture file store 232. In some examples, the capture files are generated by the workload capture module 220 and can include information regarding the request (including the request), data, including metadata, generated during execution of the request, the results of the request, and information about the source system 202 (e.g., the clients 210, the application servers 212, and/or the source database system 214).</p>
<p id="p0030" num="0030">In some examples, a capture file is provided as a tape archive (TAR) file, which can be described as a file format that is used to store multiple files in a single file (i.e., the capture file). A TAR file includes a manifest file that provides information on the contents of the TAR file. As a TAR file, an example capture file can be provided as:
<tables id="tabl0001" num="0001">
<table frame="all">
<tgroup cols="1" colsep="0">
<colspec colnum="1" colname="col1" colwidth="58mm" colsep="1"/>
<thead>
<row>
<entry align="center" valign="top">ABC.cpt (TAR file)</entry></row></thead>
<tbody>
<row>
<entry>HEADER</entry></row>
<row>
<entry> CONTENTS (MANIFEST)</entry></row>
<row>
<entry>HEADER</entry></row>
<row>
<entry> CONTENTS (AAA.gzip)</entry></row>
<row>
<entry>HEADER</entry></row>
<row>
<entry> CONTENTS (BBB.gzip)</entry></row><!-- EPO <DP n="10"> -->
<row>
<entry>...</entry></row></tbody></tgroup>
</table>
</tables>
Also as a TAR file, the manifest file can be read without having to be extracted. In some examples, the capture file is compressed (e.g., a compressed TAR file). Still, the manifest file can be read without first uncompressing (or un-TAR'ing) the capture file.</p>
<p id="p0031" num="0031">In some examples, a capture file, or a set of capture files, includes data associated with, and organized by, a capture unit. The capture unit can be, for example, a session between a client 210 and the source database system 214, which is mediated by an application server 212. The session can include one or more requests for database operations, such as one or more statements in a query processing language. In some examples, a capture file, or a set of capture files, represents another processing unit, such as a statement, or a set of statements over a time period.</p>
<p id="p0032" num="0032">In some examples, the capture files are pre-processed by the workload pre-processing module 222 to provide one or more replay files that are stored in a replay file store 234. Each replay file enables a workload, or a portion of a workload, to be replayed within the target database system 216 (e.g., by the replay module 224). In some examples, the replay files include decompressed information captured in the capture files, or otherwise include data of one or more capture files provided in a form that is more easily executed at the target database system 216. In addition to information used for replaying requests for database operations, the capture files can include information that is used to evaluate the performance of the target database system 216. In some examples, the replay module 224 processes the replay files to send requests for database operations to the target database system 216, the requests emulating the requests issued by the clients 210 to the source database system 214.</p>
<p id="p0033" num="0033"><figref idref="f0003">FIG. 3</figref> depicts a workload capture file schema 300 for storing context data and performance data recorded during execution of a workload in a source database system (e.g., the source database system 214 of <figref idref="f0002">FIG. 2</figref>).</p>
<p id="p0034" num="0034">In some instances, the volume of information that can be collected for a workload can be large. The volume of information can be reduced by only including a portion of the information, such as a portion of context information, in the capture files. Further, to assist with organization and compression of the information, the information<!-- EPO <DP n="11"> --> can be organized in a schema or a dimensional model, such as a star schema. For example, measures and facts can be used as a central fact table or tables, which reference as points one or more dimensions, each dimension including one or more contexts. In some examples, each point represents a discrete context, and, in addition to any facts or measures, the fact table includes identifiers for corresponding information in the dimensions.</p>
<p id="p0035" num="0035"><figref idref="f0003">FIG. 3</figref> depicts a capture file 305 that includes a fact table 310 correlated with a set of dimensions 315. In the example of <figref idref="f0003">FIG. 3</figref>, the fact table 310 is shown as associated with dimensions 315 representing contexts for a session 320, a statement 325, an application 330, a transaction 335, a thread 340, a plan (such as a query execution plan) 345, and other parameters 350. The fact table 310 includes various measures, such as elapsed time and any counters associated with the capture unit associated with the capture file 305 or collection of capture files (such as a session). The fact table 310 also includes dimension identifiers (DIMIDs) used to correlate entries in the fact table 310 with each of the dimensional contexts 320, 325, 330, 335, 340, 345, 350. Although a single fact table 310 is shown, multiple fact tables 310 can be included in a capture file.</p>
<p id="p0036" num="0036">In some examples, the fact table 310 and the dimension tables 315 can include records for a plurality of capture units (e.g., sessions) of the source database system. In some cases, the fact table 310 and each of the dimension tables 315 can be stored as separate files. In some examples, the capture file 305 can be compressed using any appropriate compression algorithm. In examples, where a database system from which a workload is captured includes more than one server or node, the capture file 305 can record data representative of activity occurring at a single node of the source database system.</p>
<p id="p0037" num="0037">In some examples, the capture file 305 can include additional information. In the example of <figref idref="f0003">FIG. 3</figref>, the capture file 305 includes manifest information 355. Manifest information 355 can include, for example, information related to the source database system, such as a identifier for the program version used to implement the source database system and information relating to the computing system used to implement the source database system (e.g., the number and type of processors, amount and organization of memory and physical storage, information related to networked devices<!-- EPO <DP n="12"> --> implementing the source database system, or configuration information for the source database system or its components). The manifest information 355 can also include a timestamp associated with the capture file 305 (e.g., a time the capture file was generated, a time the workload capture was initiated, a time workload capture was discontinued). If filters were used to select workload elements to capture, the filter information can also be included in the manifest information 355. When used to store information related to multiple database nodes, the fact table 310 and/or the dimension tables 315 can include information regarding which of the multiple database nodes was involved in executing operations of the workload capture unit, or a subcomponent thereof (such as in executing a statement associated with a particular session). In some examples, the manifest information 355 can be stored in a file, such as a compressed file, and included within the capture file 305.</p>
<p id="p0038" num="0038">In some examples, the capture file 305 can also include hash information 360. For example, query language statements in the fact table 310 or the dimension tables 315 can be represented by a hash value. The hash information 360 can include a hash table correlating hash values to query language statements. By only storing the hash value of the query language statement in the measure file 310 or one or more of the context files 315, the amount of memory needed to store the workload capture can be reduced. In some examples, hash values can be used to confirm that execution of requests for database operations at the target database system produced the same results as when originally executed at the source database system. In some examples, the granularity of hashing can be specified, such as by a user, in such cases, the hash level can be included in the capture file 305, such as in the manifest information 355.</p>
<p id="p0039" num="0039">In some examples, the fact table 310 and the dimension or context tables 315 can be stored as files, and the fact or dimension files grouped together in the context file 305, optionally including a file for the manifest information 355 or a file for the hash information 360. In some examples, each of the context tables 315 is stored as a separate file within the capture file 305. Each of the capture files 305 can include a DIMID field, and one or more value fields. In a specific example, the values can be written in comma separated value format (.csv). Similarly, each measure can be stored as a separate file within the capture file 305. Each of the measure files can include a chronological<!-- EPO <DP n="13"> --> identifier, such as a clock timestamp (such as for the overall database system from which the workload was captured). The chronological identifier can be used, for example, in staging replay of the capture units (such as sessions) represented in the capture file 305. The measure file can also include multiple DIMID fields to associate measures for a particular workload capture unit with its associated dimensions, and one or more numerical fields (such as performance or execution parameters or values). In particular examples, the DIMID or numerical fields can be written in comma separated value format.</p>
<p id="p0040" num="0040">In some examples, context files and one or more measure files can be stored for each of a plurality of services in a database system. The set of context files and one or more measure files for each of the services can be included in the capture file 305 (which, in at least some examples, represents a single database server or node, such as when the database system is distributed among multiple servers or nodes). For example, a database system can have separate services that include query language processing components and data stores, that produce information regarding the distribution of information (including database records) and database system components in the database system, that are responsible for handling certain types of client communications, such as web or hypertext transfer protocol (HTTP) -based interactions, that manage various memory stores (such as transferring data between persistent storage and in-memory storage), and that monitor resource (such as CPU or memory) use in the database system (including across multiple database servers, when the database system is a distributed system).</p>
<p id="p0041" num="0041">As introduced above, for a workload to be replayed in a target database system, one or more capture files, representative of the workload, are pre-processed to provide one or more replay files. A replayer processes the replay files to replay the workload in the target database system. As described herein, the pre-processor processes the capture files to provide the replay files. More particularly, the pre-processor converts the capture file from the fact table and dimension tables schema (as described above with reference to <figref idref="f0003">FIG. 3</figref>) using joining requests from the fact table and dimension tables and globally sorting by operation sequence IDs within a session, where a dependency graph is aligned by the operation sequence ID.<!-- EPO <DP n="14"> --></p>
<p id="p0042" num="0042"><figref idref="f0004">FIG. 4</figref> graphically depicts a process 400 for pre-processing to convert a workload capture file into a replay file for execution in a target database system. The process 400 includes an extraction sub-process 410, a loading sub-process 412, a queuing sub-process 414, and a writing sub-process 416.</p>
<p id="p0043" num="0043">In the extraction sub-process 410, a capture file 420 is read by one or more executor threads 422. In some examples, the executor thread(s) 422 read the capture file 420 sequentially. The executor thread(s) 422 can decompress a portion of the capture file 420 into files for various database services (e.g., a service providing query language processing, a service providing location information for data and database system components). The executor thread(s) 422 can write the content of the capture file 420 as one or more files 426, such as compressed files, associated with a service. Each service can include a plurality of files 426. For example, a particular service may be associated with one or more context files (dimension files) and one or more measure files (fact files).</p>
<p id="p0044" num="0044">In some examples, the files 426 can be placed in a queue 430 in the loading sub-process 412. In the loading sub-process 412, each service may be associated with a loader thread group 432. Each loader thread group 432 can read appropriate files 426 from the queue 430 to determine which elements of the files 426 are associated with a particular capture unit (e.g., a session). In some examples, elements of files 426 from different loading processes (such as from different services) can be combined based on their capture unit. In some examples, the capture unit can be represented in an encoded format (e.g., as a hash value). In some examples, a particular request for database operations can include nested statements or operations. These statements or operations can, in some examples, be executed in parallel at multiple nodes of the database system. In such examples, the statements may be included in multiple workload capture files 420, but can be combined during processing of the capture file(s) 420 during conversion to replay data.</p>
<p id="p0045" num="0045">In some examples, as the files are loaded by the loader thread groups 432, context and measure information related to individual captures units (and their component operations) can be retrieved or collected by the loader thread groups 432 and added to a queue 438 in the queuing sub-process 414. In some examples, the queue 438<!-- EPO <DP n="15"> --> holds the information until the information is ready to be written to individual stores, such as files, for the session. For example, multiple stores may be generated for context information, organized in a format useable by a replay component (e.g., the replayer 224 of <figref idref="f0002">FIG. 2</figref>) to replay the workload at a second database system (e.g., the target database system 216).</p>
<p id="p0046" num="0046">In some examples, the queue 438 can be a table partitioned by session. Information in the queue 438 can be structured in a similar manner as context and measure information was associated with the session at the capture database system (e.g., the source database system 214 of <figref idref="f0002">FIG. 2</figref>). For example, the queue 438 can use the star schema of <figref idref="f0003">FIG. 3</figref>.</p>
<p id="p0047" num="0047">In some examples, the loader thread groups 432 can maintain information about the minimum timestamp (e.g., a system timestamp, commit timestamp, or other identifier) of information to be read by the loader thread groups 432 for their particular service. The loader thread groups 432 can update a global timestamp 436, which represents the minimum timestamp among all of the services being processed by the loader thread groups 432. The global timestamp 436 can be compared with a timestamp for the session (or other capture unit). When the global timestamp 436 is greater than or equal to the timestamp for a session, the session can be written to a store.</p>
<p id="p0048" num="0048">In some examples, as a session (or other capture unit) is completed, and writer threads 440 of the writing sub-process 416 are available, each session can be written (such as to a file or in memory) as request data 444 and parameter data 446. In some examples, the request data 444 and the parameter data 446 can be provided in one or more replay files. In some examples, the request data 444 can include context and measure information used to replay the session (including requests for database operations within the session). In some examples, the request data 444 can include performance data usable to compare execution of the requests with the execution of the requests at the workload capture database system. In some examples, the parameter data 446 can include parameters used in executing the requests, such as a statement string and parameter values used in executing query language operations.</p>
<p id="p0049" num="0049">In some examples, the writer threads 440 can combine context and measure data from the queue 438 as appropriate for the sessions, and requests for database<!-- EPO <DP n="16"> --> operations thereof. Within a session, requests for database operations, and components thereof (such as statements, and operations associated with statements), can be ordered by the writer threads 440 during the writing process 416, such as chronologically (such as by using timestamps, for example, a system timestamp, a commit timestamp, or another identifier). In this manner, the requests will reproduce the workload of the first database system (e.g., the source database system 214 where the requests were captured) when the requests are carried out by a second database system (e.g., the target database system 216). For example, statements (or operations thereof) can be ordered within a session by a system clock timestamp or a global commit timestamp.</p>
<p id="p0050" num="0050">In some examples, when a session is written to a replay file (e.g., one or more replay files including the request data 444 and the parameter data 446), the data can be removed from the queue 438, which can limit the amount of memory or storage needed for the queue. In some examples, the queue 438 can be persisted, such as for use in comparing the performance of the database system where the workload is replayed to the performance of the workload capture database system.</p>
<p id="p0051" num="0051">In some examples, the request data 444 can include information to be replayed, the parameter data 446 can include performance measures associated with execution of the session (or other unit) at the first database system, to be compared with performance measures generated during execution of the workload at the second database system. In some examples, the request data 444 and the parameter data 446 can be replayed and used for comparison purposes multiple times. For example, the request data 444 can be replayed at the second database system using different performance or operational settings. The performance at the various settings of the second database system can be compared with one another, and with the parameter data 446.</p>
<p id="p0052" num="0052"><figref idref="f0005">FIG. 5A</figref> depicts an example structure of a capture file. <figref idref="f0006">FIG. 5B</figref> depicts an example structure of a replay file that is provided by a pre-processor processing the capture file of <figref idref="f0005">FIG. 5A</figref>.</p>
<p id="p0053" num="0053">Capture and replay systems, such as that described herein with reference to <figref idref="f0002 f0003 f0004">FIGs. 2-4</figref>, are described in further detail in commonly assigned <patcit id="pcit0002" dnum="US10552413B"><text>U.S. 10,552,413</text></patcit>, which is expressly incorporated herein by reference in the entirety for all purposes.<!-- EPO <DP n="17"> --></p>
<p id="p0054" num="0054">As introduced above, capture and replay systems can be used for problem detection and reproduction in database systems. For example, capture and replay can be used to replay a workload of a source database system to help resolve one or more issues (e.g., an issue in the source database system, an issue in a target database system). However, to replay a workload in a target database system, capture files are preprocessed to provide replay files (e.g., as described above with reference to <figref idref="f0004">FIG. 4</figref>). The preprocessing of the capture files can be time-consuming and inefficient in terms of technical resources (e.g., processing power, memory) expended to perform the preprocessing. In some instances, if the capture file is too large, preprocessing can fail due to lack of memory. Further, previous approaches are absent global sorting of replay files, which can result in errors occurring during replay. In some traditional approaches, the capture files are provided in a network file system (NFS) and unstable networks could result in crashing of the database system. Traditional approaches also are absent controlling of numbers of threads used to process capture files and difficulties in identifying causes of errors when preprocessing fails.</p>
<p id="p0055" num="0055">Accordingly, implementations of the present disclosure provide improved preprocessing of capture files to provide replay files for workload capture and replay in database systems. More particularly, and as described herein, implementations of the present disclosure provide more efficient preprocessing of capture files than achieved in some approaches (e.g., the preprocessing described above with reference to <figref idref="f0004">FIG. 4</figref>). That is, the preprocessing of the present disclosure is faster and more efficient in terms of technical resources (e.g., computing power, memory) expended to perform the preprocessing. Further, implementations of the present disclosure</p>
<p id="p0056" num="0056">As described in further detail herein, implementations of the present disclosure include processing of capture files (e.g., storing fact tables and dimension tables) to join dimension data into respective requests, which are globally sorted on a file system as replay files. The joined and sorted replay files are grouped by session identifier (ID). Further, implementations of the present disclosure execute in-memory merge sort for sorting intermediate files that the replay files originate from. In-memory merge sort can be described as a sorting algorithm that can handle relatively large amounts of data,<!-- EPO <DP n="18"> --> the data (e.g., intermediate files) being loaded in-memory of a database system (e.g., SAP HANA) for processing.</p>
<p id="p0057" num="0057">Implementations of the present disclosure further include a capture file reader framework, also referred to herein as reader framework, that enables resource-efficient ingestion and processing of capture files. In some implementations, the reader framework enables application of user-defined analytics on the workloads recorded in capture files. In some implementations, the reader framework enables users to define in what order and how workloads are read/joined and processed, as described herein. An example use case can include a table group advisor requesting a statement list analysis. An example statement list analysis can include, without limitation, a list of statements/queries and respective statistics (e.g., total execution time/count, related tables, internal timestamps). Another example use case can include reading specific types of workloads. For example, reading dimensions in parallel and loading these into database tables (e.g., as used in the replay portion of capture and replay, described herein.</p>
<p id="p0058" num="0058"><figref idref="f0007">FIG. 6A</figref> depicts a process 600 for efficiently converting a workload capture file into a replay file for execution in a target database system in accordance with implementations of the present disclosure. More particularly, <figref idref="f0007">FIG. 6A</figref> graphically depicts preprocessing in accordance with implementations of the present disclosure, which includes processing capture files through a reader framework, joining dimension data into a single request that is globally sorted on the file system. The input to the preprocessing includes capture files that record fact tables and dimension tables, and the preprocessing provides output of replay files that are joined and sorted, and that are grouped by session ID.</p>
<p id="p0059" num="0059">The example process 600 of the present disclosure includes a first pass 602 and a second pass 604. As described herein, the first pass 602 includes an extraction sub-process 610, a reading and joining sub-process 612, and a writing sub-process 614, and the second pass 604 includes an in-memory merge sort and manipulations sub-process 616. As described herein, the first pass 602 processes a capture file 620 to provide intermediate files 644, and the second pass 604 processes the intermediate files 644 to provide replay files 652. In some implementations, the first pass 602 includes reading the capture file 620 (e.g., using the reader framework of the present disclosure) and joining<!-- EPO <DP n="19"> --> data in parallel to provide the intermediate files 644 as partially sorted intermediate files. Additional jobs can be inserted while reading the data. The second pass 604 includes reading the intermediate files 644 and sorting by using a merge sort (e.g., an in-memory merge sort process). Additional jobs (e.g., joining result files, manipulating outputs) can be executed while sorting is performed.</p>
<p id="p0060" num="0060">Referring again to <figref idref="f0007 f0008">FIG. 6</figref>, the capture file 620 is read by one or more executor threads 622 in the extraction sub-process 610. As described herein, the capture file 620 includes a fact table (e.g., SQL measures) and a set of dimension tables (e.g., application context). In some examples, the executor thread(s) 622 read the capture file 620 in parallel and decompress the capture file 620 into files for various database services (e.g., a service providing query language processing, a service providing parameter information, a service for providing request information, etc.). The executor thread(s) 622 can write the content of the capture file 620 as one or more files 626, such as compressed files, associated with a service. Each service can include a plurality of files 626. For example, a particular service may be associated with one or more context files (dimension files) and one or more measure files (fact files). In accordance with implementations of the present disclosure, the executor thread(s) 622 write the one or more files 626 in parallel. In some examples, the files 626 can be placed in a queue 630 in the reading and joining sub-process 612.</p>
<p id="p0061" num="0061">In accordance with implementations of the present disclosure, the dimensions provided from the capture file 620 are read (loaded) in-memory 634 within the target environment. In some examples, the data include various types of data. Example types of data include application data, request data, session data, statement data (e.g., SQL statements), parameter data, and the like. The data has been generated across multiple sessions during execution of the workload in the source database system. In general, the reading and joining sub-process 612 can be described as an in-memory join and sort process, in which metadata information is stored in-memory and, while reading the information, join and sort of the data is performed. After the data is processed by the respective services 632a, 632b the data is read into buffers 636 for subsequent writing to the intermediate files 644.<!-- EPO <DP n="20"> --></p>
<p id="p0062" num="0062">In the reading and joining sub-process 612, each service may be associated with a loader thread group 632a, 632b, also referred to herein a. Although two loader thread groups are depicted in <figref idref="f0007">FIG. 6A</figref>, it is contemplated that additional loader thread groups can be provided. Each loader thread group 632a, 632b can read appropriate files 626 from the queues 630 to determine which elements of the files 626 are associated with a particular capture unit (e.g., a session). That is, each loader thread group 632a, 632b is specific to a type of data (e.g., SQL statements, parameters (Prm)). In some examples, elements of files 626 from different loading processes (such as from different services) can be combined based on their capture unit. In some examples, the capture unit can be represented in an encoded format (e.g., as a hash value). In some examples, a particular request for database operations can include nested statements or operations. These statements or operations can, in some examples, be executed in parallel at multiple nodes of the database system. In such examples, the statements may be included in multiple workload capture files 620, but can be combined during processing of the capture file(s) 620 during conversion to replay data.</p>
<p id="p0063" num="0063"><figref idref="f0008">FIG. 6B</figref> depicts an example of partially sorted intermediate file structure 680 in a session-wise file hierarchy. For example, the partially sorted intermediate file structure 680 is an example of intermediate files (e.g., intermediate files 644 of <figref idref="f0007">FIG. 6A</figref>) for a session having the session ID 303382 assigned thereto.</p>
<p id="p0064" num="0064">In some implementations, the first pass 602 is at least partially executed using the reader framework of the present disclosure. In some examples, in processing a capture file, the reader framework includes phases of checking a manifest file, setting parameters and creating and executing job nodes, un-compressing the capture file, and executing capture readers to read data from the files. As described herein, the intermediate files 644 are provided, which are processed through the second pass 604 to provide the replay files 652 as globally-sorted.</p>
<p id="p0065" num="0065">In further detail, in the checking the manifest file phase, the reader framework reads the manifest file of the capture file (e.g., compressed TAR file) and information is extracted. For example, and without limitation:
<pre listing-type="program-listing">   fileType1 : columnName1 : &lt;columnIndex, columnTypeName&gt;<!-- EPO <DP n="21"> -->
                   columnName2 : &lt;columnIndex, columnTypeName&gt;
                   columnName3 : &lt;-columnIndex, columnTypeName&gt;
    fileType2 : columnName4 : ccolumnIndex, columnTypeName&gt;
                   columnName5 : &lt;columnIndex, columnTypeName&gt;
    statement : DIMID : &lt;0, BIGINT&gt;
                   STATEMENT_HASH : &lt;2, VARCHAR(32)&gt;
                   SATEMENT_ID : &lt;1, BIGINT&gt;</pre></p>
<p id="p0066" num="0066">In the un-compressing phase, the reader framework un-compresses the capture file by un-archiving (e.g., un-TAR'ing) and un-compressing each of the archived files in parallel (e.g., reading the headers, and gathering file numbers, file pointer locations, and the like). In some examples, the reader framework executes multiple threads, each thread reading and un-compressing file contents and write to a file. This is depicted in the extracting phase 610 of <figref idref="f0007 f0008">FIG. 6</figref>, resulting in the files 626.</p>
<p id="p0067" num="0067">In the executing capture readers phase, data from the files 626 is read using a set of capture readers. In some examples, the loader thread groups 632a, 632b are respective capture readers described herein. In some examples, each capture reader is specific to a file type and can include one or more threads for reading the respective files. In some implementations, an order is provided for reading the files. An example order can include a first list and a second list, in which the first list is read then the second list is read. An example first list (also referred to herein as a reader order list) includes, without limitation, Application, Request, Session, Statement, Service, OutParam, SqlTypeInfo, Hsh, Ndf, and an example second list includes, without limitation, Sql, Rst, Prm, Abap, Transaction. This example order can be provided as a default order that is executed, unless a customized order is provided, as discussed in further detail below.</p>
<p id="p0068" num="0068">In some implementations, and as introduced above, a user-defined customized order can be provided, which processes the files based on the customized order. In some examples, the customized order is programmatically defined within the flow manager. For example, the following pseudo-code can be included in the flow manager:
<pre listing-type="program-listing">   FlowManager::start(FlowManagerBuilder(captureId)<!-- EPO <DP n="22"> -->
       •setReaderOrderList(
              {{CaptureFileType::Request,
                       CaptureFileType::Statement,
                       CaptureFileType::Hsh,CaptureFileType: :Obj},
                     {CaptureFileType: :Sql},
                     {CaptureFileType: :Transaction}
              })
       .setCustomizedReaderList(
              {{CaptureFileType::Sql, [](CaptureReaderBuilder&amp;
                       b, CaptureFileType type){return
                       b.createReader&lt;CustomizedSqlReader&gt; (type);}},
                     {CaptureFileType: :Transaction,
                      [](CaptureReaderBuilder&amp; b,
                       CaptureFileType type){return
                      b.createReader&lt;CustomizedTransactionReader&gt;
                      (type); } }
              })
...</pre>
In this example, the setReaderOrderList defines a reader order list (first list) that the capture file types Request, Statement, Hsh, and Obj are first processed (e.g., read, parsed) in parallel, then the capture file type Sql is processed, and then the capture files of type Transaction are read. In some examples, file types not included in the reader order list are not read from the capture files. Also in the above example, the setCustomizedReader List provides user-defined behavior of capture readers for one or more file types identified in the setReaderOrderList, here the file type Sql and the file type transaction. In some examples, for file types not included in the setCustomized ReaderList, default capture reading are executed. In some examples, customization<!-- EPO <DP n="23"> --> (user-defined behavior) can include whether a single thread or multiple threads is/are to be sued in processing the respective file type.</p>
<p id="p0069" num="0069">In some implementations, and with respect to the first list, data of the files are loaded in-memory (e.g., loaded in-memory of a database system, such as SAP HANA). In some examples, capture readers process files of respective file types to selectively return records. For example, a capture reader can execute hasKey (CaptureFileType fileType, dimId), which returns true, if a dimId record exists for filetype. In response, the capture reader can execute getValueMap (CaptureFileType f ileType, dimId) to return the record. For example, an example file can include XXX.obj.0.apx, which records 131081; SYS; RS_TABLES_; TABLE; 0; 0. In this example, hasKey (ObjType, 131081) returns true, and getValueMap (ObjType, 131081) returns SYS; RS_TABLES_; TABLE; 0; 0.</p>
<p id="p0070" num="0070">To briefly summarize the above discussion, the first pass 602 includes extracting data from the capture file 620 in the extraction sub-process 610, load the dimension data in-memory and executing join/sort on the dimension data in-memory in the a reading and joining sub-process 612, and flushing out partially sorted files as the intermediate files 644 in the writing sub-process 614.</p>
<p id="p0071" num="0071">In the second pass 604, the intermediate files 644 are provided to a file-sort executor thread 660, which sorts the intermediate files 644 in the in-memory merge sort and manipulations sub-process 616. The sorted intermediate files are provided as input to a session directories queue 662 and are then processed by one or more sort executor threads 664.</p>
<p id="p0072" num="0072">The output of the sort executor threads 664 is provided as the replay files 652. In some examples, the replay files 652 are provided in a format that is achieved by joining of requests from the fact table and the dimension tables of the capture file 620 through the first pass 602, and global sorting by operation sequence IDs within each session and aligning the TC dependency graph by the operation sequence IDs through the second pass 604. The replay files 652 can be described as joined and sorted files that are grouped by session ID.</p>
<p id="p0073" num="0073"><figref idref="f0009">FIG. 7</figref> depicts detail of a portion 700 of the process 600 for efficiently converting the capture file 644 into the replay file 652 of <figref idref="f0007">FIG. 6A</figref>. More particularly, the<!-- EPO <DP n="24"> --> portion 700 is a representation of at least part of the in-memory merge sort and manipulations sub-process 616. In the example of <figref idref="f0009">FIG. 7</figref>, a sub-set of intermediate files 644' is processed to provide a sub-set of replay files 652'. In the depicted example, the sub-set of intermediate files 644' includes request files provided in the intermediate files 644 from the capture file 620, and the sub-set of replay files 652' includes respective request replay files provided from the in-memory merge sort, as described herein.</p>
<p id="p0074" num="0074">In <figref idref="f0009">FIG. 7</figref>, the example portion 700 includes sets of sorted elements 702, a merge 704 of the set of sorted elements, and a set of globally sorted elements 706. In some examples, and as described herein, the sub-set of intermediate files 644' is processed by the in-memory merge sort to sort the intermediate files of the sub-set of intermediate files 644' into the respective sets of sorted elements 702. In some examples, and as described herein, the merge 704 merges the sets of sorted elements 702 to provide the set of globally sorted elements 706.</p>
<p id="p0075" num="0075">In general, during the in-memory merge sort (e.g., conceptually depicted as the example portion 700 of <figref idref="f0009">FIG. 7</figref>), session directories and collect request, parameter, result, table parameter directories (e.g., RequestInfo, ParameterInfo, TableParameterInfo, ResultRowCountInfo) are collected and are put into a vector that is specific to a respective session (e.g., vector<sub>session#1</sub> [session#1/requests, session#1/parameters, session#1/result_row_counts, session#1/tableParameters?, session#2/requests, ...]). An atomic index is incremented by the next thread in the thread pool, where each thread handles a sessionDirectory/filetype directory. In some examples, each thread reads all of the partially sorted files into individual memory (queue) up to an entry count (e.g., load_buffer_entry_size_per_partial_sort_file (default 5000). When the memory is empty, the corresponding file is again loaded in-memory. In some examples, a heap memory is provided (e.g., for execution of the merge 704 of <figref idref="f0009">FIG. 7</figref>), and is provided as the size of all of the files. The two sort columns are copied for an entry of each loaded memory of files and heap sort is executed. The files in the heap memory are flushed as a file when the sorted memory reaches a configured value (e.g., write_buffer_size_for_global_sort (default 1MB)).</p>
<p id="p0076" num="0076">In some implementations, one or more manipulations can be executed to data stored in the files that are flushed from the heap memory into the set of globally sorted<!-- EPO <DP n="25"> --> elements 706 (buffer), an example manipulation can include, but is not limited to, revising values of data. For example, during a manipulation, values of the data can be read to determine whether the values correspond to expected values and/or expected format. That is, for example, values of the data can be evaluated to identify instances of erroneous data. In some examples, if erroneous data is identified, a manipulation can include changing a value and/or format of the data to be non-erroneous.</p>
<p id="p0077" num="0077"><figref idref="f0010">FIG. 8</figref> depicts an example process 800 that can be executed in accordance with implementations of the present disclosure. The example process 800 can be executed by one or more computer-executable programs executed using one or more computing devices. In <figref idref="f0010">FIG. 8</figref>, boundaries having dashed lines depict optional activities.</p>
<p id="p0078" num="0078">A capture file is received (802). For example, and as described herein with reference to <figref idref="f0002">FIG. 2</figref>, a capture file can be generated by the source environment 202 and can be transmitted to the target environment 204. With reference to <figref idref="f0007">FIG. 6A</figref>, the capture file 620 is received for processing in the first pass 602. A set of service files is provided (804). For example, and as described herein, the executor thread(s) 622 read the capture file 620 in parallel and decompress the capture file 620 into files for various database services (e.g., a service providing query language processing, a service providing parameter information, a service for providing request information, etc.). The executor thread(s) 622 can write the content of the capture file 620 as one or more files 626 (also referred to herein as service files), each file associated with a service.</p>
<p id="p0079" num="0079">The set of service files is processed to generate intermediate files (806). For example, and as described herein, the reading and joining sub-process 612 of <figref idref="f0007">FIG. 6A</figref> executes an in-memory join and sort process, in which metadata information is stored in-memory and, while reading the information, join and sort of the data is performed. This enables writing of the intermediate files 644 as partially sorted in a session-wise file hierarchy based on session identifiers (IDs) of respective sessions executed during execution of the workload in the source database system.</p>
<p id="p0080" num="0080">An in-memory merge sort is executed over the intermediate files (808). For example, and as described herein, the in-memory merge sort of <figref idref="f0007">FIG. 6A</figref> leverages external memory to execute a k-way merge by sorting chunks of data, each chunk fitting in RAM, and merging the sorted chunks together. In some examples, one or more<!-- EPO <DP n="26"> --> manipulations are performed (810). A set of replay files is output (812). For example, and as described herein, the replay files are globally sorted based on session ID. That is, each replay file is associated with a respective sessions executed during execution of the workload in the source database system based on a respective session ID.</p>
<p id="p0081" num="0081">Implementations of the present disclosure achieve one or more technical advantages. For example, implementations of the present disclosure have been tested using a test machine and a set of capture files, the test results indicating significant technical improvements in generating replay files from capture files. The test machine included a logical core 144, Intel® Xeon® CPU E7-8890 v3 @ 2.50GHz with 1TB of memory. A first capture file included a file size of 27GB (compressed) and 84GB (uncompressed) recording an example workload generated using a HANA/S4 ER3 scenario. The example workload of the first capture file included 12,635 sessions, 91,165,116 statements, and 2,879,745 transactions. A second capture file included a file size of 129GB (compressed) and 544GB (uncompressed) recording an example workload generated using the HANA/S4 ER3 scenario. The example workload of the second capture file included 49,979 sessions, 397,002,644 statements, and 6,522,754 transactions. A third capture file included a file size of 201GB (compressed) and 700GB (uncompressed) recording an example workload generated using the HANA/S4 ER3 scenario. The example workload of the third capture file included 61,566 sessions, 1,013,784,111 statements, and 16,516,976 transactions. The tables below summarize results of implementations of the present disclosure as compared with a traditional approach:
<tables id="tabl0002" num="0002">
<table frame="all">
<title>Table 1: Example Results based on First Capture File</title>
<tgroup cols="4">
<colspec colnum="1" colname="col1" colwidth="32mm"/>
<colspec colnum="2" colname="col2" colwidth="26mm"/>
<colspec colnum="3" colname="col3" colwidth="25mm"/>
<colspec colnum="4" colname="col4" colwidth="19mm"/>
<thead>
<row>
<entry align="center" valign="top"/>
<entry align="center" valign="top">Duration</entry>
<entry align="center" valign="top">Memory Peak</entry>
<entry align="center" valign="top">CPU Peak</entry></row></thead>
<tbody>
<row>
<entry align="center">Traditional Process</entry>
<entry align="center">1 hour (H)</entry>
<entry align="center">293GB</entry>
<entry align="center">76%</entry></row>
<row>
<entry align="center">New Process</entry>
<entry align="center">39 minutes (M)</entry>
<entry align="center">120GB</entry>
<entry align="center">29%</entry></row></tbody></tgroup>
</table>
</tables><!-- EPO <DP n="27"> -->
<tables id="tabl0003" num="0003">
<table frame="all">
<title>Table 2: Example Results based on Second Capture File</title>
<tgroup cols="4">
<colspec colnum="1" colname="col1" colwidth="33mm"/>
<colspec colnum="2" colname="col2" colwidth="21mm"/>
<colspec colnum="3" colname="col3" colwidth="24mm"/>
<colspec colnum="4" colname="col4" colwidth="20mm"/>
<thead>
<row>
<entry align="center" valign="top"/>
<entry align="center" valign="top">Duration</entry>
<entry align="center" valign="top">Memory Peak</entry>
<entry align="center" valign="top">CPU Peak</entry></row></thead>
<tbody>
<row>
<entry align="center">Traditional Process</entry>
<entry align="center">2H 46M</entry>
<entry align="center">600GB</entry>
<entry align="center">76%</entry></row>
<row>
<entry align="center">New Process</entry>
<entry align="center">2H 20M</entry>
<entry align="center">175GB</entry>
<entry align="center">30%</entry></row></tbody></tgroup>
</table>
</tables>
<tables id="tabl0004" num="0004">
<table frame="all">
<title>Table 3: Example Results based on Third Capture File</title>
<tgroup cols="4">
<colspec colnum="1" colname="col1" colwidth="32mm"/>
<colspec colnum="2" colname="col2" colwidth="24mm"/>
<colspec colnum="3" colname="col3" colwidth="25mm"/>
<colspec colnum="4" colname="col4" colwidth="19mm"/>
<thead>
<row>
<entry align="center" valign="top"/>
<entry align="center" valign="top">Duration</entry>
<entry align="center" valign="top">Memory Peak</entry>
<entry align="center" valign="top">CPU Peak</entry></row></thead>
<tbody>
<row>
<entry align="center">Traditional Process</entry>
<entry align="center">Failed (OOM)</entry>
<entry align="center">n/a</entry>
<entry align="center">n/a</entry></row>
<row>
<entry align="center">New Process</entry>
<entry align="center">8H</entry>
<entry align="center">430GB</entry>
<entry align="center">50%</entry></row></tbody></tgroup>
</table>
</tables></p>
<p id="p0082" num="0082">The example results of Table 1 indicate that the new process (i.e., the process in accordance with implementations of the present disclosure) reduces the duration by approximately 35%, reduces memory consumption by approximately 60%, and reduces CPU load by approximately 62% over the traditional process (e.g., as depicted in <figref idref="f0004">FIG. 4</figref>). The example results of Table 2 indicate that the new process reduces the duration by approximately 16%, reduces memory consumption by approximately 70%, and reduces CPU load by approximately 60% over the traditional process. The example results of Table 2 indicate that the traditional process failed due to an out-of-memory (OOM) condition (e.g., memory peak exceeded 1TB of the test machine), while the new process was able to handle the third capture file.</p>
<p id="p0083" num="0083">Referring now to <figref idref="f0011">FIG. 9</figref>, a schematic diagram of an example computing system 900 is provided. The system 900 can be used for the operations described in association with the implementations described herein. For example, the system 900 may be included in any or all of the server components discussed herein. The system 900 includes a processor 910, a memory 920, a storage device 930, and an input/output device 940. The components 910, 920, 930, 940 are interconnected using a system bus 950. The processor 910 is capable of processing instructions for execution within the system 900. In some implementations, the processor 910 is a single-threaded processor. In some implementations, the processor 910 is a multi-threaded processor. The processor 910 is capable of processing instructions stored in the memory 920 or on the storage device 930 to display graphical information for a user interface on the input/output device 940.<!-- EPO <DP n="28"> --></p>
<p id="p0084" num="0084">The memory 920 stores information within the system 900. In some implementations, the memory 920 is a computer-readable medium. In some implementations, the memory 920 is a volatile memory unit. In some implementations, the memory 920 is a non-volatile memory unit. The storage device 930 is capable of providing mass storage for the system 900. In some implementations, the storage device 930 is a computer-readable medium. In some implementations, the storage device 930 may be a floppy disk device, a hard disk device, an optical disk device, or a tape device. The input/output device 940 provides input/output operations for the system 900. In some implementations, the input/output device 940 includes a keyboard and/or pointing device. In some implementations, the input/output device 940 includes a display unit for displaying graphical user interfaces.</p>
<p id="p0085" num="0085">The features described can be implemented in digital electronic circuitry, or in computer hardware, firmware, software, or in combinations of them. The apparatus can be implemented in a computer program product tangibly embodied in an information carrier (e.g., in a machine-readable storage device, for execution by a programmable processor), and method steps can be performed by a programmable processor executing a program of instructions to perform functions of the described implementations by operating on input data and generating output. The described features can be implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from, and to transmit data and instructions to, a data storage system, at least one input device, and at least one output device. A computer program is a set of instructions that can be used, directly or indirectly, in a computer to perform a certain activity or bring about a certain result. A computer program can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.</p>
<p id="p0086" num="0086">Suitable processors for the execution of a program of instructions include, by way of example, both general and special purpose microprocessors, and the sole processor or one of multiple processors of any kind of computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory<!-- EPO <DP n="29"> --> or both. Elements of a computer can include a processor for executing instructions and one or more memories for storing instructions and data. Generally, a computer can also include, or be operatively coupled to communicate with, one or more mass storage devices for storing data files; such devices include magnetic disks, such as internal hard disks and removable disks; magneto-optical disks; and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, such as EPROM, EEPROM, and flash memory devices; magnetic disks such as internal hard disks and removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, ASICs (application-specific integrated circuits).</p>
<p id="p0087" num="0087">To provide for interaction with a user, the features can be implemented on a computer having a display device such as a CRT (cathode ray tube) or LCD (liquid crystal display) monitor for displaying information to the user and a keyboard and a pointing device such as a mouse or a trackball by which the user can provide input to the computer.</p>
<p id="p0088" num="0088">The features can be implemented in a computer system that includes a back-end component, such as a data server, or that includes a middleware component, such as an application server or an Internet server, or that includes a front-end component, such as a client computer having a graphical user interface or an Internet browser, or any combination of them. The components of the system can be connected by any form or medium of digital data communication such as a communication network. Examples of communication networks include, for example, a LAN, a WAN, and the computers and networks forming the Internet.</p>
<p id="p0089" num="0089">The computer system can include clients and servers. A client and server are generally remote from each other and typically interact through a network, such as the described one. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.</p>
<p id="p0090" num="0090">In addition, the logic flows depicted in the figures do not require the particular order shown, or sequential order, to achieve desirable results. In addition, other steps<!-- EPO <DP n="30"> --> may be provided, or steps may be eliminated, from the described flows, and other components may be added to, or removed from, the described systems. Accordingly, other implementations are within the scope of the following claims.</p>
<p id="p0091" num="0091">A number of implementations of the present disclosure have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the present disclosure. Accordingly, other implementations are within the scope of the following claims.</p>
</description>
<claims id="claims01" lang="en"><!-- EPO <DP n="31"> -->
<claim id="c-en-0001" num="0001">
<claim-text>A computer-implemented method for preprocessing of capture files for replay of a workload in a target database system, the method being executed by one or more processors and comprising:
<claim-text>receiving a capture file, the capture file comprising data representative of a workload executed in a source database system; and</claim-text>
<claim-text>processing the capture file to provide a replay file, the replay file being in a format that is executable by a replayer to replay the workload in a target database system, processing the capture file comprising:
<claim-text>processing the capture file to provide a set of intermediate files, and</claim-text>
<claim-text>processing the set of intermediate files using in-memory merge sort operations to generate a set of replay files.</claim-text></claim-text></claim-text></claim>
<claim id="c-en-0002" num="0002">
<claim-text>The method of claim 1, wherein the set of intermediate files are partially sorted in a session-wise file hierarchy based on session identifiers (IDs) of respective sessions executed during execution of the workload in the source database system.</claim-text></claim>
<claim id="c-en-0003" num="0003">
<claim-text>The method of claim 1 or 2, wherein the in-memory merge sort operations comprise sorting elements of sub-sets of intermediate files a time in main memory and merging elements in max heap memory.</claim-text></claim>
<claim id="c-en-0004" num="0004">
<claim-text>The method of any one of the preceding claims, wherein processing the capture file to provide the set of intermediate files at least partially comprises reading data of service files in-memory and joining at least portions of the data.</claim-text></claim>
<claim id="c-en-0005" num="0005">
<claim-text>The method of any one of the preceding claims, wherein processing the capture file to provide the set of intermediate files at least partially comprises decompressing the capture file and processing the capture file using a set of executor threads to provide a set of service files, the set of intermediate files being generated using the set of service files.<!-- EPO <DP n="32"> --></claim-text></claim>
<claim id="c-en-0006" num="0006">
<claim-text>The method of any one of the preceding claims, wherein each replay file is associated with a respective session executed during execution of the workload in the source database system based on a respective session identifier (ID).</claim-text></claim>
<claim id="c-en-0007" num="0007">
<claim-text>The method of any one of the preceding claims, further comprising executing one or more manipulations after merging a sub-set of intermediate files.</claim-text></claim>
<claim id="c-en-0008" num="0008">
<claim-text>A non-transitory computer-readable storage medium coupled to one or more processors and having instructions stored thereon which, when executed by the one or more processors, cause the one or more processors to perform operations according to a method of any one of claims 1 to 7.</claim-text></claim>
<claim id="c-en-0009" num="0009">
<claim-text>A system, comprising:
<claim-text>a computing device; and</claim-text>
<claim-text>a computer-readable storage device coupled to the computing device and having instructions stored thereon which, when executed by the computing device, cause the computing device to perform operations according to any one of claims 1 to 7.</claim-text></claim-text></claim>
</claims>
<drawings id="draw" lang="en"><!-- EPO <DP n="33"> -->
<figure id="f0001" num="1"><img id="if0001" file="imgf0001.tif" wi="107" he="172" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="34"> -->
<figure id="f0002" num="2"><img id="if0002" file="imgf0002.tif" wi="158" he="199" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="35"> -->
<figure id="f0003" num="3"><img id="if0003" file="imgf0003.tif" wi="155" he="169" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="36"> -->
<figure id="f0004" num="4"><img id="if0004" file="imgf0004.tif" wi="140" he="233" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="37"> -->
<figure id="f0005" num="5A"><img id="if0005" file="imgf0005.tif" wi="83" he="215" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="38"> -->
<figure id="f0006" num="5B"><img id="if0006" file="imgf0006.tif" wi="98" he="188" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="39"> -->
<figure id="f0007" num="6A"><img id="if0007" file="imgf0007.tif" wi="165" he="232" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="40"> -->
<figure id="f0008" num="6B"><img id="if0008" file="imgf0008.tif" wi="100" he="142" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="41"> -->
<figure id="f0009" num="7"><img id="if0009" file="imgf0009.tif" wi="160" he="147" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="42"> -->
<figure id="f0010" num="8"><img id="if0010" file="imgf0010.tif" wi="107" he="152" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="43"> -->
<figure id="f0011" num="9"><img id="if0011" file="imgf0011.tif" wi="153" he="220" img-content="drawing" img-format="tif"/></figure>
</drawings>
<search-report-data id="srep" lang="en" srep-office="EP" date-produced=""><doc-page id="srep0001" file="srep0001.tif" wi="157" he="233" type="tif"/><doc-page id="srep0002" file="srep0002.tif" wi="155" he="233" type="tif"/></search-report-data><search-report-data date-produced="20210304" id="srepxml" lang="en" srep-office="EP" srep-type="ep-sr" status="n"><!--
 The search report data in XML is provided for the users' convenience only. It might differ from the search report of the PDF document, which contains the officially published data. The EPO disclaims any liability for incorrect or incomplete data in the XML for search reports.
 -->

<srep-info><file-reference-id>S14987EU - hb</file-reference-id><application-reference><document-id><country>EP</country><doc-number>20198031.5</doc-number></document-id></application-reference><applicant-name><name>SAP SE</name></applicant-name><srep-established srep-established="yes"/><srep-invention-title title-approval="yes"/><srep-abstract abs-approval="yes"/><srep-figure-to-publish figinfo="by-applicant"><figure-to-publish><fig-number>1</fig-number></figure-to-publish></srep-figure-to-publish><srep-info-admin><srep-office><addressbook><text>BE</text></addressbook></srep-office><date-search-report-mailed><date>20210315</date></date-search-report-mailed></srep-info-admin></srep-info><srep-for-pub><srep-fields-searched><minimum-documentation><classifications-ipcr><classification-ipcr><text>G06F</text></classification-ipcr></classifications-ipcr></minimum-documentation></srep-fields-searched><srep-citations><citation id="sr-cit0001"><nplcit id="sr-ncit0001" medium="online" npl-type="w"><online><author><name>Sap</name></author><online-title>SAP HANA Administration with SAP HANA Cockpit</online-title><pubdate>20190124</pubdate><location><pp><ppf>280</ppf><ppl>301</ppl></pp></location><avail>ttps://help.sap.com/doc/85e9352c24fc4fcc816d41524a582b7a/2.11.0.0/en-US/SAP_HANA_Administration_with_SAP_HANA_Cockpit_en.pdf</avail><srchdate><date>20210303</date></srchdate><refno>XP055781759</refno></online></nplcit><category>X</category><rel-claims>1-9</rel-claims><rel-passage><passage>* the whole document *</passage></rel-passage></citation><citation id="sr-cit0002"><patcit dnum="US2012005174A1" id="sr-pcit0001" url="http://v3.espacenet.com/textdoc?DB=EPODOC&amp;IDX=US2012005174&amp;CY=ep"><document-id><country>US</country><doc-number>2012005174</doc-number><kind>A1</kind><name>VORA KRISHNA [IN]</name><date>20120105</date></document-id></patcit><category>X</category><rel-claims>1-9</rel-claims><rel-passage><passage>* abstract *</passage><passage>* paragraph [0059] - paragraph [0110]; figures 1, 2 *</passage></rel-passage></citation><citation id="sr-cit0003"><patcit dnum="US2014006358A1" id="sr-pcit0002" url="http://v3.espacenet.com/textdoc?DB=EPODOC&amp;IDX=US2014006358&amp;CY=ep"><document-id><country>US</country><doc-number>2014006358</doc-number><kind>A1</kind><name>WANG YUJUN [US] ET AL</name><date>20140102</date></document-id></patcit><category>X</category><rel-claims>1-9</rel-claims><rel-passage><passage>* abstract *</passage><passage>* paragraph 40 - line 80; figures 1-4 *</passage></rel-passage></citation></srep-citations><srep-admin><examiners><primary-examiner><name>Barieux, Marc</name></primary-examiner></examiners><srep-office><addressbook><text>Berlin</text></addressbook></srep-office><date-search-completed><date>20210304</date></date-search-completed></srep-admin><!--							The annex lists the patent family members relating to the patent documents cited in the above mentioned European search report.							The members are as contained in the European Patent Office EDP file on							The European Patent Office is in no way liable for these particulars which are merely given for the purpose of information.							For more details about this annex : see Official Journal of the European Patent Office, No 12/82						--><srep-patent-family><patent-family><priority-application><document-id><country>US</country><doc-number>2012005174</doc-number><kind>A1</kind><date>20120105</date></document-id></priority-application><text>NONE</text></patent-family><patent-family><priority-application><document-id><country>US</country><doc-number>2014006358</doc-number><kind>A1</kind><date>20140102</date></document-id></priority-application><text>NONE</text></patent-family></srep-patent-family></srep-for-pub></search-report-data>
<ep-reference-list id="ref-list">
<heading id="ref-h0001"><b>REFERENCES CITED IN THE DESCRIPTION</b></heading>
<p id="ref-p0001" num=""><i>This list of references cited by the applicant is for the reader's convenience only. It does not form part of the European patent document. Even though great care has been taken in compiling the references, errors or omissions cannot be excluded and the EPO disclaims all liability in this regard.</i></p>
<heading id="ref-h0002"><b>Patent documents cited in the description</b></heading>
<p id="ref-p0002" num="">
<ul id="ref-ul0001" list-style="bullet">
<li><patcit id="ref-pcit0001" dnum="US63004554" dnum-type="L"><document-id><country>US</country><doc-number>63004554</doc-number><date>20200403</date></document-id></patcit><crossref idref="pcit0001">[0001]</crossref></li>
<li><patcit id="ref-pcit0002" dnum="US10552413B"><document-id><country>US</country><doc-number>10552413</doc-number><kind>B</kind></document-id></patcit><crossref idref="pcit0002">[0053]</crossref></li>
</ul></p>
</ep-reference-list>
</ep-patent-document>
