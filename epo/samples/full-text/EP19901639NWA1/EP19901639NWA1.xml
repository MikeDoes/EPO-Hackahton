<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE ep-patent-document PUBLIC "-//EPO//EP PATENT DOCUMENT 1.5.1//EN" "ep-patent-document-v1-5-1.dtd">
<!-- This XML data has been generated under the supervision of the European Patent Office -->
<ep-patent-document id="EP19901639A1" file="EP19901639NWA1.xml" lang="en" country="EP" doc-number="3889785" kind="A1" date-publ="20211006" status="n" dtd-version="ep-patent-document-v1-5-1">
<SDOBI lang="en"><B000><eptags><B001EP>ATBECHDEDKESFRGBGRITLILUNLSEMCPTIESILTLVFIROMKCYALTRBGCZEEHUPLSKBAHRIS..MTNORSMESMMAKHTNMD..........</B001EP><B005EP>J</B005EP><B007EP>BDM Ver 2.0.12 (4th of August) -  1100000/0</B007EP></eptags></B000><B100><B110>3889785</B110><B120><B121>EUROPEAN PATENT APPLICATION</B121><B121EP>published in accordance with Art. 153(4) EPC</B121EP></B120><B130>A1</B130><B140><date>20211006</date></B140><B190>EP</B190></B100><B200><B210>19901639.5</B210><B220><date>20190829</date></B220><B240><B241><date>20210702</date></B241></B240><B250>zh</B250><B251EP>en</B251EP><B260>en</B260></B200><B300><B310>201811589151</B310><B320><date>20181225</date></B320><B330><ctry>CN</ctry></B330></B300><B400><B405><date>20211006</date><bnum>202140</bnum></B405><B430><date>20211006</date><bnum>202140</bnum></B430></B400><B500><B510EP><classification-ipcr sequence="1"><text>G06F  12/00        20060101AFI20200703BHEP        </text></classification-ipcr></B510EP><B520EP><classifications-cpc><classification-cpc sequence="1"><text>G06F  12/00        20130101 LI20200725BCEP        </text></classification-cpc><classification-cpc sequence="2"><text>G06F   3/06        20130101 LI20200725BCEP        </text></classification-cpc></classifications-cpc></B520EP><B540><B541>de</B541><B542>STRIPE-REKONSTRUKTIONSVERFAHREN IN EINEM SPEICHERSYSTEM UND STRIPING-SERVER</B542><B541>en</B541><B542>STRIPE RECONSTRUCTION METHOD IN STORAGE SYSTEM AND STRIPING SERVER</B542><B541>fr</B541><B542>PROCÉDÉ DE RECONSTRUCTION DE SEGMENT DANS UN SYSTÈME DE STOCKAGE, ET SERVEUR DE SEGMENTATION</B542></B540><B590><B598>7</B598></B590></B500><B700><B710><B711><snm>Huawei Technologies Co., Ltd.</snm><iid>101903059</iid><irf>219EP 2009 ME</irf><adr><str>Huawei Administration Building, 
Bantian, Longgang District</str><city>Shenzhen Guangdong 518129</city><ctry>CN</ctry></adr></B711></B710><B720><B721><snm>ZHAN, Yun</snm><adr><str>Huawei Administration Building, Bantian,Longgang 
District</str><city>Shenzhen, Guangdong 518129</city><ctry>CN</ctry></adr></B721><B721><snm>XIE, Huiyun</snm><adr><str>Huawei Administration Building, Bantian,Longgang 
District</str><city>Shenzhen, Guangdong 518129</city><ctry>CN</ctry></adr></B721><B721><snm>WANG, Tonglei</snm><adr><str>Huawei Administration Building, Bantian,Longgang 
District</str><city>Shenzhen, Guangdong 518129</city><ctry>CN</ctry></adr></B721></B720><B740><B741><snm>Pfenning, Meinig &amp; Partner mbB</snm><iid>100060642</iid><adr><str>Patent- und Rechtsanwälte 
Theresienhöhe 11a</str><city>80339 München</city><ctry>DE</ctry></adr></B741></B740></B700><B800><B840><ctry>AL</ctry><ctry>AT</ctry><ctry>BE</ctry><ctry>BG</ctry><ctry>CH</ctry><ctry>CY</ctry><ctry>CZ</ctry><ctry>DE</ctry><ctry>DK</ctry><ctry>EE</ctry><ctry>ES</ctry><ctry>FI</ctry><ctry>FR</ctry><ctry>GB</ctry><ctry>GR</ctry><ctry>HR</ctry><ctry>HU</ctry><ctry>IE</ctry><ctry>IS</ctry><ctry>IT</ctry><ctry>LI</ctry><ctry>LT</ctry><ctry>LU</ctry><ctry>LV</ctry><ctry>MC</ctry><ctry>MK</ctry><ctry>MT</ctry><ctry>NL</ctry><ctry>NO</ctry><ctry>PL</ctry><ctry>PT</ctry><ctry>RO</ctry><ctry>RS</ctry><ctry>SE</ctry><ctry>SI</ctry><ctry>SK</ctry><ctry>SM</ctry><ctry>TR</ctry></B840><B844EP><B845EP><ctry>BA</ctry></B845EP><B845EP><ctry>ME</ctry></B845EP></B844EP><B848EP><B849EP><ctry>KH</ctry></B849EP><B849EP><ctry>MA</ctry></B849EP><B849EP><ctry>MD</ctry></B849EP><B849EP><ctry>TN</ctry></B849EP></B848EP><B860><B861><dnum><anum>CN2019103281</anum></dnum><date>20190829</date></B861><B862>zh</B862></B860><B870><B871><dnum><pnum>WO2020134143</pnum></dnum><date>20200702</date><bnum>202027</bnum></B871></B870></B800></SDOBI>
<abstract id="abst" lang="en">
<p id="pa01" num="0001">A stripe reassembling method is provided, including: A stripe server selects stripes (701); uses data strips (D<sub>21</sub>, D<sub>32</sub> and D<sub>13</sub>) including valid data in the stripes S<sub>1</sub>, S<sub>2</sub>, and S<sub>3</sub> as data strips in a new stripe S<sub>4</sub>, and generates data of a parity strip P<sub>41</sub> for data of a data strip in S<sub>4</sub> according to an EC algorithm the same as that of S<sub>1</sub>, S<sub>2</sub>, and S<sub>3</sub> (702); and stores the parity data of the parity strip P<sub>41</sub> on a parity storage node N<sub>1</sub> (703). In a plurality of selected to-be-reassembled stripes, a maximum of one data strip includes valid data in data strips distributed on a same data storage node, a data strip that includes valid data and that is in the plurality of stripes is used as data of a data strip in a new stripe, parity data of a parity strip is generated for the data of the data strip in the new stripe, and the parity data of the parity strip is stored in a corresponding parity storage node.<img id="iaf01" file="imgaf001.tif" wi="113" he="79" img-content="drawing" img-format="tif"/></p>
</abstract>
<description id="desc" lang="en"><!-- EPO <DP n="1"> -->
<heading id="h0001"><b>TECHNICAL FIELD</b></heading>
<p id="p0001" num="0001">The present invention relates to the field of information technologies, and in particular, to a stripe reassembling method in a storage system and a stripe server.</p>
<heading id="h0002"><b>BACKGROUND</b></heading>
<p id="p0002" num="0002">A distributed storage system includes a plurality of storage nodes. When a client receives a write request sent by a host and writes data into the distributed storage system, the data is stored in a corresponding storage node in a form of a stripe. For example, according to an erasure coding (Erasure Coding, EC) algorithm, a quantity of data strips in a stripe is N, a quantity of parity strips in the stripe is M, and a length of the stripe is N+M, where both N and M are positive integers. In the distributed storage system, a stripe with a length of N+M includes N+M strips with a same length, and each strip is distributed on one storage node in the distributed storage system. Therefore, one strip is distributed on N+M storage nodes.</p>
<p id="p0003" num="0003">The client receives a data write request, where the write request is used to modify data of a data strip that has been stored in a stripe. Generally, the client writes the data of the data write request to a new stripe, to mark data of a data strip in an original stripe as invalid. When a quantity of data strips that store invalid data in a stripe reaches a specific value, the distributed storage system reassembles the stripe, and reassembles valid data of data strips in a plurality of stripes into a new stripe. In this process, valid data needs to be migrated across storage nodes.</p>
<heading id="h0003"><b>SUMMARY</b></heading>
<p id="p0004" num="0004">This application provides a stripe reassembling method in a storage system and a computer program product, to reduce cross-node migration of valid data in a stripe reassembling process.<!-- EPO <DP n="2"> --></p>
<p id="p0005" num="0005">According to a first aspect, this application provides a stripe reassembling method in a storage system. The storage system includes N data storage nodes that store data strips and M parity storage nodes that store parity strips. R stripes are distributed on the N+M storage nodes, each stripe S<sub>i</sub> includes N data strips and M parity strips, a data strip D<sub>ix</sub> is distributed on an x<sup>th</sup> storage node in the N data storage nodes, and a parity strip P<sub>iy</sub> is distributed on a y<sup>th</sup> storage node in the M parity storage nodes. N, M, and R are positive integers, R is not less than 2, a value of i is an integer ranging from 1 to R, a value of x is an integer ranging from 1 to N, and a value of y is an integer ranging from 1 to M. A stripe server selects the R stripes, where a maximum of one data strip includes valid data in data strips D<sub>ix</sub> that are in the R stripes and that are distributed on a same data storage node. In this solution, the stripe server generates parity data of a parity strip P<sub>Ky</sub> in a new stripe S<sub>K</sub> for data of the data strip including valid data in the R stripes, where K is an integer different from 1 to R. The new stripe S<sub>K</sub> includes the data strip including valid data in the R stripes and the parity strip P<sub>Ky</sub>. The stripe server stores the parity data of the parity strip P<sub>Ky</sub> on the y<sup>th</sup> storage node in the M parity storage nodes. In the stripe reassembling method, a data strip including valid data in a plurality of stripes is used as a data strip in a new stripe. In addition, a maximum of one data strip includes valid data in data strips D<sub>x</sub> that are in the plurality of stripes and that are on distributed a same data storage node. Therefore, data of the data strip does not need to be migrated across storage nodes during stripe reassembling.</p>
<p id="p0006" num="0006">With reference to the first aspect of this application, in a possible implementation, the method further includes: After the stripe server stores the parity data of the parity strip P<sub>Ky</sub> on the y<sup>th</sup> parity storage node in the M parity storage nodes, the stripe server indicates a data storage node on which a data strip that stores garbage data of the R stripes is distributed to perform garbage collection. In another implementation, the data storage node checks a status of stored data of a data strip, and starts garbage collection when the data of the data strip is determined as garbage data. In a specific implementation, when storing the data of the data strip, the data storage node creates a mapping between a host access address of the data of the data strip and an identifier of the data strip. When the data of the data strip is garbage data, the mapping between the host access address of the data of the data strip and the identifier of the data strip is marked as invalid, so that the data of the data strip is determined as garbage data. Further, the data storage node may perform garbage collection in the data strip after the stripe server releases a stripe including the data strip. In another implementation, the data storage node may determine, based on an amount of garbage data of the<!-- EPO <DP n="3"> --> data strip stored in the data storage node, to start garbage collection. Alternatively, a parity storage node may determine, based on whether data of a parity strip is garbage data, whether to start garbage collection, or perform garbage collection based on an indication of the stripe server.</p>
<p id="p0007" num="0007">With reference to the first aspect of this application and the foregoing possible implementation of the first aspect, in another possible implementation, the stripe server records a mapping between the new stripe and a strip identifier, where the strip identifier includes an identifier of the data strip storing valid data in the R stripes and an identifier of the parity strip in the new stripe.</p>
<p id="p0008" num="0008">With reference to the first aspect of this application and the foregoing possible implementations of the first aspect, in another possible implementation, the stripe server releases the R stripes. After the stripe server releases the R stripes, the R stripes may be reallocated to newly written data.</p>
<p id="p0009" num="0009">With reference to the first aspect of this application and the foregoing possible implementations of the first aspect, in another possible implementation, the stripe server determines the stripe S<sub>i</sub>, where a quantity of data strips including garbage data in the stripe Si meets a reassembly threshold. The stripe server determines, based on a quantity of data strips including garbage data in a stripe, whether the reassembly threshold is reached in the stripe. The stripe server records a stripe in which the reassembly threshold is reached. In a specific implementation, an identifier of the stripe in which the reassembly threshold is reached may be recorded by using a link.</p>
<p id="p0010" num="0010">According to a second aspect, this application provides a stripe server. The stripe server is used in a storage system, and the storage system includes N data storage nodes storing data strips and M parity storage nodes storing parity strips. R stripes are distributed on the N+M storage nodes, each stripe S<sub>i</sub> includes N data strips and M parity strips, a data strip D<sub>ix</sub> is distributed on an x<sup>th</sup> storage node in the N data storage nodes, and a parity strip P<sub>iy</sub> is distributed on a y<sup>th</sup> storage node in the M parity storage nodes. N, M, and R are positive integers, R is not less than 2, a value of i is an integer ranging from 1 to R, a value of x is an integer ranging from 1 to N, and a value of y is an integer ranging from 1 to M. The stripe server includes an interface and a processor, the interface communicates with the processor, and the processor is configured to perform the first aspect of this application and the possible implementations of the first aspect.</p>
<p id="p0011" num="0011">According to a third aspect, this application provides a stripe server. The stripe server<!-- EPO <DP n="4"> --> is used in a storage system, and the storage system includes N data storage nodes storing data strips and M parity storage nodes storing parity strips. R stripes are distributed on the N+M storage nodes, each stripe S<sub>i</sub> includes N data strips and M parity strips, a data strip D<sub>ix</sub> is distributed on an x<sup>th</sup> storage node in the N data storage nodes, and a parity strip P<sub>iy</sub> is distributed on a y<sup>th</sup> storage node in the M parity storage nodes. N, M, and R are positive integers, R is not less than 2, a value of i is an integer ranging from 1 to R, a value of x is an integer ranging from 1 to N, and a value of y is an integer ranging from 1 to M. The stripe server includes corresponding units, and each unit is configured to perform corresponding operations of the first aspect of this application and the possible implementations of the first aspect.</p>
<p id="p0012" num="0012">According to a fourth aspect, this application provides a computer program product. The computer program product includes a computer instruction, the computer program product is used in a storage system, and the storage system includes N data storage nodes storing data strips and M parity storage nodes storing parity strips. R stripes are distributed on the N+M storage nodes, each stripe S<sub>i</sub> includes N data strips and M parity strips, a data strip D<sub>ix</sub> is distributed on an x<sup>th</sup> storage node in the N data storage nodes, and a parity strip P<sub>iy</sub> is distributed on a y<sup>th</sup> storage node in the M parity storage nodes. N, M, and R are positive integers, R is not less than 2, a value of i is an integer ranging from 1 to R, a value of x is an integer ranging from 1 to N, and a value of y is an integer ranging from 1 to M. A stripe server that is used in the storage system executes the computer instruction, to perform the first aspect of this application and the possible implementations of the first aspect.</p>
<heading id="h0004"><b>BRIEF DESCRIPTION OF DRAWINGS</b></heading>
<p id="p0013" num="0013">
<ul id="ul0001" list-style="none" compact="compact">
<li><figref idref="f0001">FIG. 1</figref> is a schematic diagram of a distributed storage system according to an embodiment of the present invention;</li>
<li><figref idref="f0002">FIG. 2</figref> is a schematic structural diagram of a server in a distributed block storage system according to an embodiment of the present invention;</li>
<li><figref idref="f0002">FIG. 3</figref> is a schematic diagram of a partition view of a distributed block storage system according to an embodiment of the present invention;</li>
<li><figref idref="f0003">FIG. 4</figref> is a schematic diagram of a relationship between a strip and a storage node in a distributed block storage system according to an embodiment of the present invention;<!-- EPO <DP n="5"> --></li>
<li><figref idref="f0003">FIG. 5</figref> is a schematic diagram of distribution of stripes according to an embodiment of the present invention;</li>
<li><figref idref="f0004">FIG. 6</figref> is a schematic diagram of garbage data in stripes according to an embodiment of the present invention;</li>
<li><figref idref="f0004">FIG. 7</figref> is a flowchart of a stripe reassembling method according to an embodiment of the present invention;</li>
<li><figref idref="f0005">FIG. 8</figref> is a schematic diagram of stripe reassembling distribution according to an embodiment of the present invention; and</li>
<li><figref idref="f0005">FIG. 9</figref> is a schematic structural diagram of a stripe server according to an embodiment of the present invention.</li>
</ul></p>
<heading id="h0005"><b>EMBODIMENTS OF THE PRESENT INVENTION</b></heading>
<p id="p0014" num="0014">A storage system in the embodiments of the present invention may be a distributed storage system, for example, FusionStorage® series or OceanStor® 9000 series of Huawei®. For example, as shown in <figref idref="f0001">FIG. 1</figref>, a distributed storage system includes a plurality of servers, such as a server 1, a server 2, a server 3, a server 4, a server 5, and a server 6. The servers communicate with each other through InfiniBand, the Ethernet, or the like. In the embodiments of the present invention, the server in the distributed storage system is also referred to as a storage node. In a practical application, a quantity of servers in the distributed storage system may be increased based on an actual requirement. This is not limited in the embodiments of the present invention. It should be noted that the storage node may alternatively be a hard disk (for example, a disk or a solid-state drive), a storage array, or a server chassis, provided that strips in a same stripe are located in different hard disks. The following uses an example in which the storage node is a server for description. In other cases, a principle is the same, and details are not described in the present invention.</p>
<p id="p0015" num="0015">The server in the distributed storage system is in a structure shown in <figref idref="f0002">FIG. 2</figref>. As shown in <figref idref="f0002">FIG. 2</figref>, each server in the distributed storage system includes a central processing unit (Central Processing Unit, CPU) 201, a memory 202, an interface 203, a hard disk 1, a hard disk 2, and a hard disk 3. The memory 202 stores a computer instruction, and the CPU 201 executes the computer instruction in the memory 202 to perform a corresponding operation. The interface 203<!-- EPO <DP n="6"> --> may be a hardware interface, for example, a network interface card (Network Interface Card, NIC) or a host bus adapter (Host Bus Adaptor, HBA), or may be a program interface module. A hard disk includes a solid-state drive (Solid State Disk, SSD), a hard disk drive, or a hybrid hard disk. In a hard disk drive such as an HDD (Hard Disk Drive), a hard disk interface may be a serial advanced technology attachment (Serial Advanced Technology Attachment, SATA) interface, a serial attached small computer system interface (Serial Attached Small Computer System Interface, SAS) interface, a fiber channel (Fiber Channel, FC) interface, a peripheral component interconnect-express (Peripheral Component Interconnect-Express, PCIe) interface, a non-volatile memory express (Non-Volatile Memory Express, NVMe) interface, or the like. The CPU 201 may be replaced by a field programmable gate array (Field Programmable Gate Array, FPGA) or other hardware, or an FPGA or other hardware and the CPU 201 jointly perform the foregoing corresponding operation. For ease of description, in the embodiments of the present invention, the CPU 201 and the memory 202 are referred to as a processor, or hardware that replaces the CPU 201 and the memory 202 is referred to as a processor, or a combination of the CPU 201, the memory 202, and other hardware is referred to as a processor.</p>
<p id="p0016" num="0016">A client in the distributed storage system writes data into the distributed storage system based on a write request of a host, or reads data from the distributed storage system based on a read request of the host. The server in the embodiments of the present invention may be used as a client. In addition, the client may also be a device independent of the server shown in <figref idref="f0002">FIG. 2</figref>. The host in the embodiments of the present invention may be a server, a virtual machine (Virtual Machine, VM), a terminal device, or the like. This is not limited in the embodiments of the present invention. The client in the distributed storage system provides a storage resource of the distributed storage system for the host. For example, in a distributed block storage system, a client provides a block resource such as a logical unit for a host, to provide a data access operation for the host. The logical unit is also referred to as a logical unit number (Logical Unit Number, LUN). In a distributed file storage system, a client provides a file resource for a host. In a distributed object storage system, a client provides an object resource for a host.</p>
<p id="p0017" num="0017">In the embodiments of the present invention, the distributed block storage system is used as an example. A client provides a block protocol access interface, so that the client provides a distributed block storage access point service. A host may access a storage resource in a storage resource pool in the distributed block storage system by using the client. Generally, the block<!-- EPO <DP n="7"> --> protocol access interface is configured to provide a logical unit for the host. A server runs a program of the distributed block storage system, so that a server that includes a hard disk is used as a storage node to store data of the client. For example, one hard disk may be used as one storage node by default in the server. When the server includes a plurality of hard disks, one server may be used as a plurality of storage nodes. In another implementation, the server runs the program of the distributed block storage system program to serve as one storage node. This is not limited in the embodiments of the present invention. Therefore, for a structure of the storage node, refer to <figref idref="f0002">FIG. 3</figref> and related description. During initialization of the distributed block storage system, hash space (for example, 0 to 2^32) is divided into N equal parts, each equal part is one partition (Partition), and the N equal parts are equally allocated based on a quantity of hard disks. For example, in the distributed block storage system, N is 3600 by default, to be specific, partitions are P1, P2, P3, ..., and P3600. Assuming that the distributed block storage system currently includes 18 disks (storage nodes), each storage node carries 200 partitions. A partition P includes M storage nodes N<sub>j</sub>. A correspondence between a partition and a storage node, that is, a mapping between a partition and a storage node N<sub>j</sub> included in the partition, is also referred to as a partition view. As shown in <figref idref="f0002">FIG. 3</figref>, in an example in which a partition includes four storage nodes N<sub>j</sub>, a partition view is "P2-a storage node N<sub>1</sub> (a data storage node)-a storage node N<sub>2</sub> (a data storage node)-a storage node N<sub>3</sub> (a data storage node)-a storage node N<sub>4</sub> (a parity storage node)", where j is an integer ranging from 1 to M. The partition view may be allocated during the initialization of the distributed block storage system, and may be subsequently adjusted based on a change of the quantity of hard disks in the distributed block storage system. The client saves the partition view.</p>
<p id="p0018" num="0018">Based on a reliability requirement of the distributed block storage system, data reliability may be improved by using an erasure coding (Erasure Coding, EC) algorithm. For example, a 3+1 mode is used, to be specific, a stripe includes three data strips and one parity strip. In the embodiments of the present invention, data is stored in a partition in a form of stripe, and one partition includes R stripes S<sub>i</sub>, where i is an integer ranging from 1 to R. In the embodiments of the present invention, P2 is used as an example for description.</p>
<p id="p0019" num="0019">It should be noted that a stripe (stripe) is logical storage space, the stripe (stripe) includes a plurality of strips, and a strip is also referred to as a strip unit (strip unit). "Data of a strip" is content stored in the strip.</p>
<p id="p0020" num="0020">Strips included in a stripe include a data strip (data strip) and a parity strip (parity strip).<!-- EPO <DP n="8"> --> A strip used to store data (based on application scenarios, data may be user data, service data, and application data) is referred to as a data strip, and a strip used to store parity data is referred to as a parity strip. There is a parity relationship between data and parity data. According to the EC algorithm, when content in some strips is faulty or cannot be read, content in the other strips may be used to restore. In the embodiments of the present invention, a storage node that stores data of a data strip is referred to as a data storage node, a storage node that stores parity data of a parity strip is referred to as a parity storage node, and the data storage node and the parity storage node are collectively referred to as storage nodes.</p>
<p id="p0021" num="0021">In the distributed block storage system, slice management is performed on the hard disk by 8 KB (Kilobyte, KB), and allocation information of each 8 KB slice is recorded in a metadata management area of the hard disk. Slices of the hard disk form a storage resource pool. The distributed block storage system includes a stripe server. A specific implementation may be that a stripe management program is run on one or more servers in the distributed block storage system. The stripe server allocates a stripe to a partition. For a structure of the stripe server, refer to the server structure shown in <figref idref="f0002">FIG. 2</figref>. Still using the partition view shown in <figref idref="f0003">FIG. 4</figref> as an example, the stripe server allocates a stripe with a length 4 based on the partition view shown in <figref idref="f0003">FIG 4</figref>. To be specific, the stripe includes three data strips and one parity strip. The stripe server allocates, to a stripe S<sub>i</sub> of a partition P2, a storage address, that is, storage space, from a data storage node N<sub>x</sub> that stores a data strip D<sub>ix</sub> corresponding to the partition, and a storage address from a parity storage node D<sub>iy</sub> of a parity strip P<sub>y</sub> corresponding to the partition. This specifically includes: allocating, to D<sub>i1</sub>, a storage address from a data storage node N<sub>1</sub> that stores data strips, allocating, to D<sub>i2</sub>, a storage address from a data storage node N<sub>2</sub> that stores data strips, allocating, to D<sub>i3</sub>, a storage address from a data storage node N<sub>3</sub> that stores data strips, and allocating, to P<sub>i1</sub>, a storage address from a parity storage node N<sub>1</sub> (to be specific, a storage node N<sub>4</sub> in <figref idref="f0003">FIG. 4</figref>) that stores parity strips. In another implementation, the stripe server does not allocate, to the stripe S<sub>i</sub> of the partition P<sub>2</sub>, a storage address from the data storage node N<sub>x</sub> that stores the data strip D<sub>ix</sub> corresponding to the partition, or a storage address from the storage node D<sub>iy</sub> of the parity strip P<sub>y</sub> corresponding to the partition. To be specific, when the client writes data to a storage node, the data storage node N<sub>x</sub> that stores data strips allocates a storage address to the data strip D<sub>ix</sub>, and the parity storage node N<sub>y</sub> that stores parity strips allocates a storage address to the parity strip P<sub>iy</sub>, where a value of x is an integer ranging from 1 to 3, and a value of y is 1. In the embodiments of the present invention,<!-- EPO <DP n="9"> --> a storage address allocated to a strip may be specifically a logical address of a hard disk in the storage node, for example, a logical block address (Logical Block Address, LBA) of the hard disk. In another implementation, in an SSD that supports an open channel (Open-channel), a storage address allocated to a strip may alternatively be a physical address of the SSD. In another implementation, when an LUN is mounted on a storage node, a storage address allocated to a strip is an LBA of the LUN. Stripe metadata records a mapping relationship between a stripe identifier and a strip identifier, to be specific, a correspondence between S<sub>i</sub>, the data strip D<sub>ix</sub>, and the parity strip P<sub>iy</sub>. A strip included in the stripe S<sub>i</sub> may be found based on the correspondence. The stripe server further records a correspondence between a strip and the stripe S<sub>i</sub>. Based on the correspondence, the stripe S<sub>i</sub> may be found by using the strip, so that stripe information, for example, all strips included in S<sub>i</sub>, is queried.</p>
<p id="p0022" num="0022">To reduce a quantity of strip identifiers managed by the stripe server, the stripe server allocates a version number to a strip identifier in a stripe. After a stripe is released, a version number of a strip identifier of a strip in the released stripe is updated, so that a version number of the strip identifier is used as a strip identifier of a strip in a new stripe. The stripe server pre-allocates a strip to the stripe S<sub>i</sub>, so that waiting time may be reduced when the client writes data, thereby improving write performance of the distributed block storage system. In the embodiments of the present invention, a strip in the stripe S<sub>i</sub> has a unique identifier in the distributed block storage system.</p>
<p id="p0023" num="0023">In the embodiments of the present invention, an example in which a stripe length is 4 is used. To be specific, the stripe includes three data strips and one parity strip. Distribution of stripes on storage nodes is shown in <figref idref="f0003">FIG. 5</figref>. A stripe Si includes data strips D<sub>11</sub>, D<sub>12</sub>, and D<sub>13</sub>, and a parity strip P<sub>11</sub>, a stripe S<sub>2</sub> includes data strips D<sub>21</sub>, D<sub>22</sub>, and D<sub>23</sub>, and a parity strip P<sub>21</sub>, and a stripe S<sub>3</sub> includes data strips D<sub>31</sub>, D<sub>32</sub>, and D<sub>33</sub> and a parity strip P<sub>31</sub>. Data of the data strips D<sub>11</sub>, D<sub>21</sub>, and D<sub>31</sub> is stored on a data storage node N<sub>1</sub> that stores data strips, data of the data strips D<sub>12</sub>, D<sub>22</sub>, and D<sub>32</sub> is stored on a data storage node N<sub>2</sub> that stores data strips, data of the data strip D<sub>13</sub>, D<sub>23</sub>, and D<sub>33</sub> is stored on a data storage node N<sub>3</sub> that stores data strips, and parity data of the parity strips P<sub>11</sub>, P<sub>21</sub>, and P<sub>31</sub> is stored on a parity storage node N<sub>1</sub> that stores parity strips. A host modifies stored data, for example, modifies data of the data strips D<sub>11</sub>, D<sub>12</sub>, D<sub>22</sub>, D<sub>23</sub>, D<sub>31</sub>, and D<sub>33</sub>. The storage system provided in the embodiments of the present invention supports only appending, to be specific, when existing data is modified only, modified data is stored in a new data strip, and<!-- EPO <DP n="10"> --> the modified data does not occupy a data strip used to store data before the modification. In an appending-based storage system, after data is modified in a data strip, data in a data strip that stores the data before the modification becomes garbage data, that is, invalid data. Therefore, as shown in <figref idref="f0004">FIG. 6</figref>, the data of the data strips D<sub>11</sub>, D<sub>12</sub>, D<sub>22</sub>, D<sub>23</sub>, D<sub>31</sub>, and D<sub>33</sub> is marked as garbage data. When an amount of garbage data in the stripe reaches a reassembly threshold, the stripe server starts a stripe reassembling operation. The stripe server determines, based on a quantity of data strips including garbage data in the stripe S<sub>i</sub>, that the stripe S<sub>i</sub> reaches the reassembly threshold. The stripe server determines, based on a quantity of data strips including garbage data in a stripe, whether the reassembly threshold is reached in the stripe. The stripe server records a stripe in which the reassembly threshold is reached. In a specific implementation, an identifier of the stripe in which the reassembly threshold is reached may be recorded by using a link.</p>
<p id="p0024" num="0024">In an embodiment of the present invention shown in <figref idref="f0004">FIG. 7</figref>, step 701: A stripe server selects stripes.</p>
<p id="p0025" num="0025">The selected stripes are to-be-reassembled stripes, and in the to-be- reassembled stripes, a maximum of one data strip includes valid data in data strips distributed on a same data storage node. For example, strip distribution of stripes S<sub>1</sub>, S<sub>2</sub>, and S<sub>3</sub> is the same, and there are three groups of data strips on three data storage nodes. A first group includes D<sub>11</sub>, D<sub>21</sub>, and D<sub>31</sub>, the second group includes D<sub>12</sub>, D<sub>22</sub>, and D<sub>32</sub>, and the third group includes D<sub>13</sub>, D<sub>23</sub>, and D<sub>33</sub>. As shown in <figref idref="f0004">FIG. 6</figref>, in the stripes S<sub>1</sub>, S<sub>2</sub>, and S<sub>3</sub>, only one data strip includes valid data in data strips distributed on a same data storage node. Therefore, the stripes S<sub>1</sub>, S<sub>2</sub>, and S<sub>3</sub> are selected for reassembling. In other words, S<sub>1</sub>, S<sub>2</sub>, and S<sub>3</sub> are selected for reassembling because: (1) the stripes participating in reassembling each have a data strip that stores valid data; and (2) the data strips including valid data in the stripes participating in reassembling are not distributed on a same data storage node, that is, y in D<sub>iy</sub> is different.</p>
<p id="p0026" num="0026">In this embodiment of the present invention, valid data is data whose host access address undergoes no write operation after the data is written into a data storage node.</p>
<p id="p0027" num="0027">Step 702: Use the data strips (D<sub>21</sub>, D<sub>32</sub>, and D<sub>13</sub>) including valid data in the stripes S<sub>1</sub>, S<sub>2</sub>, and S<sub>3</sub> as data strips in a new stripe S4, and generate data of a parity strip P<sub>41</sub> for data of the data strips in S<sub>4</sub> according to an EC algorithm the same as that of S<sub>1</sub>, S<sub>2</sub>, and S<sub>3</sub>.</p>
<p id="p0028" num="0028">Step 703: Store the parity data of the parity strip P<sub>41</sub> on a parity storage node N<sub>1</sub>.</p>
<p id="p0029" num="0029">The stripe server records a mapping between the stripe S<sub>4</sub> and the strips D<sub>21</sub>, D<sub>32</sub>, D<sub>13</sub>,<!-- EPO <DP n="11"> --> and P<sub>41</sub>, and the strips D<sub>21</sub>, D<sub>32</sub>, D<sub>13</sub>, and P<sub>41</sub> are strips in the stripe S<sub>4</sub>.</p>
<p id="p0030" num="0030">In the embodiment shown in <figref idref="f0004">FIG. 7</figref>, the data strips D<sub>21</sub>, D<sub>32</sub>, and D<sub>13</sub> are reassembled into the stripe S<sub>4</sub> shown in <figref idref="f0005">FIG. 8</figref>. In the stripe S<sub>4</sub> shown in <figref idref="f0005">FIG. 8</figref>, data of the data strips D<sub>21</sub>, D<sub>32</sub>, and D<sub>13</sub> does not need to be moved, and does not need to be migrated across storage nodes.</p>
<p id="p0031" num="0031">Further, the stripe server indicates a storage node on which a data strip that stores garbage data is distributed to perform garbage collection. In this embodiment of the present invention, the stripe server indicates data storage nodes that store data of the data strips D<sub>11</sub>, D<sub>12</sub>, D<sub>22</sub>, D<sub>23</sub>, D<sub>31</sub>, and D<sub>33</sub> to perform garbage collection. Further, parity data stored in P<sub>11</sub>, P<sub>21</sub>, and P<sub>31</sub> is meaningless. Therefore, the stripe server further indicates the parity storage node that stores the parity data of the parity strips P<sub>11</sub>, P<sub>21</sub>, and P<sub>31</sub> to perform garbage collection. After a storage node performs garbage collection, storage space occupied by garbage data on the storage node is released. In another implementation, a storage node performs garbage collection based on a status of stored data of a strip. For example, a data storage node checks a status of stored data of a data strip, and starts garbage collection when the data of the data strip is determined as garbage data. In a specific implementation, when storing the data of the data strip, the data storage node creates a mapping between a host access address of the data of the data strip and an identifier of the data strip. When the data of the data strip is garbage data, the mapping between the host access address of the data of the data strip and the identifier of the data strip is marked as invalid, so that the data of the data strip is determined as garbage data. Further, the data storage node may perform garbage collection in the data strip after the stripe server releases a stripe including the data strip. In another implementation, the data storage node may determine, based on an amount of garbage data in data strips stored in the data storage node, to start garbage collection. For example, a total quantity of data strips stored in the data storage node is 1000, and a quantity of data strips that stores garbage data is 600. If a threshold for starting garbage collection by the data storage node is 60%, to be specific, when a quantity of data strips that stores garbage data reaches 60%, the data storage node starts garbage collection. Therefore, each data storage node in a distributed system may independently perform garbage collection in a data strip. This embodiment of the present invention is also applicable to garbage collection by a parity storage node that stores parity strips. In this embodiment of the present invention, a stripe is reassembled with another stripe, data of a parity strip in the original stripe is garbage data, and garbage collection described in this embodiment of the present invention also needs to be performed. For a specific implementation, refer to garbage<!-- EPO <DP n="12"> --> collection in a data strip. In this embodiment of the present invention, a plurality of storage nodes may independently perform garbage collection in a strip by stripe reassembling.</p>
<p id="p0032" num="0032">The stripe server releases the stripes S<sub>1</sub>, S<sub>2</sub>, and S<sub>3</sub>. Specifically, that the stripe server releases the stripes S<sub>1</sub>, S<sub>2</sub>, and S<sub>3</sub> includes: The stripe server sets the stripes S<sub>1</sub>, S<sub>2</sub>, and S<sub>3</sub> to an idle state, so that new data may be subsequently allocated to the stripes S<sub>1</sub>, S<sub>2</sub>, and S<sub>3</sub>.</p>
<p id="p0033" num="0033">According to stripe reassembling method provided in this embodiment of the present invention, valid data does not need to be migrated across storage nodes, thereby improving stripe reassembling performance of a storage system.</p>
<p id="p0034" num="0034">In this embodiment of the present invention, in the selected to-be-reassembled stripes, a maximum of one data strip includes valid data in data strips distributed on a same data storage node. A specific implementation may be that in the to-be-reassembled stripes, no data strip includes valid data in data strips distributed on a same data storage node. In this scenario, data strips in a reassembled stripe include an idle data strip, to be specific, no data strip includes valid data at a same location, and content of the data strips at the same location is empty in a new stripe. In a specific implementation of this embodiment of the present invention, two stripes may be further reassembled.</p>
<p id="p0035" num="0035">Based on the foregoing description, an embodiment of the present invention further provides a stripe server, used in a storage system in the embodiments of the present invention, for example, a distributed storage system. The storage system includes N data storage nodes that store data strips and M parity storage nodes that store parity strips. R stripes are distributed on the N+M storage nodes, each stripe S<sub>i</sub> includes N data strips and M parity strips, a data strip D<sub>ix</sub> is distributed on an x<sup>th</sup> storage node in the N data storage nodes, and a parity strip P<sub>iy</sub> is distributed on a y<sup>th</sup> storage node in the M parity storage nodes. N, M, and R are positive integers, R is not less than 2, a value of i is an integer ranging from 1 to R, a value of x is an integer ranging from 1 to N, and a value of y is an integer ranging from 1 to M. As shown in <figref idref="f0005">FIG. 9</figref>, the stripe server includes a selection unit 901, a generation unit 902, and a storage unit 903. The selection unit 901 is configured to select the R stripes, where a maximum of one data strip includes valid data in data strips D<sub>ix</sub> that are in the R stripes and that are distributed on a same data storage node. The generation unit 902 is configured to generate parity data of a parity strip P<sub>Ky</sub> of a new stripe S<sub>K</sub> for data of the data strip including valid data in the R stripes, where K is an integer different from 1 to R, and the new stripe S<sub>K</sub> includes the data strip including valid data in the R stripes and the<!-- EPO <DP n="13"> --> parity strip P<sub>Ky</sub>. The storage unit 903 is configured to store the parity data of the parity strip P<sub>Ky</sub> on the y<sup>th</sup> storage node in the M parity storage nodes.</p>
<p id="p0036" num="0036">Further, the stripe server shown in <figref idref="f0005">FIG. 9</figref> further includes an indication unit, configured to indicate a data storage node on which a data strip that stores garbage data of the R stripes is distributed to perform garbage collection. Further, the stripe server shown in <figref idref="f0005">FIG. 9</figref> further includes a releasing unit, configured to release the R stripes. Further, the stripe server shown in <figref idref="f0005">FIG. 9</figref> further includes a determining unit, configured to determine the stripe S<sub>i</sub>, where a quantity of data strips including garbage data in the stripe S<sub>i</sub> meets a reassembly threshold.</p>
<p id="p0037" num="0037">For an implementation of the stripe server shown in <figref idref="f0005">FIG. 9</figref> in this embodiment of the present invention, refer to the foregoing described functions and structures of the stripe server in the embodiments of the present invention. Another implementation of the stripe server shown in <figref idref="f0005">FIG. 9</figref> in this embodiment of the present invention may be implemented by software modules, or implemented by a combination of software and hardware.</p>
<p id="p0038" num="0038">Correspondingly, an embodiment of the present invention further provides a computer-readable storage medium and a computer program product. The computer-readable storage medium and the computer program product include a computer instruction, to implement various solutions described in the embodiments of the present invention.</p>
<p id="p0039" num="0039">In the embodiments of the present invention, identifiers used to describe stripes, data strips, parity strips, and storage nodes are merely used to describe the embodiments of the present invention more clearly. In actual product implementation, similar identifiers are not necessarily required. Therefore, in the embodiments of the present invention, the identifiers used to describe the stripes, the data strips, the parity strips, and the storage nodes are not intended to limit the present invention.</p>
<p id="p0040" num="0040">In this embodiment of the present invention, that the stripe S<sub>i</sub> includes N data strips and M parity strips, a data strip D<sub>ix</sub> is distributed on an x<sup>th</sup> data storage node in the N data storage nodes, and a parity strip P<sub>iy</sub> is distributed on a y<sup>th</sup> parity storage node in the M parity storage nodes, means that the x<sup>th</sup> data storage node in the N data storage nodes provides a storage address for the data strip D<sub>ix</sub>, data of the data strip D<sub>ix</sub> is stored at the storage address provided by the x<sup>th</sup> data storage node in the N data storage nodes, the y<sup>th</sup> parity storage node in the M parity storage nodes provides a storage address for the parity strip P<sub>iy</sub>, and parity data of the parity strip P<sub>iy</sub> is stored at the storage address provided by the y<sup>th</sup> parity storage node in the M parity storage nodes. Therefore, this is<!-- EPO <DP n="14"> --> also referred to as that the stripe S<sub>i</sub> is distributed on the N+M storage nodes.</p>
<p id="p0041" num="0041">In the several embodiments provided in the present invention, it should be understood that the disclosed apparatus and method may be implemented in other manners. For example, division into the units in the described apparatus embodiment is merely logical function division and another division may be used in actual implementation. For example, a plurality of units or components may be combined or integrated into another system, or some features may be ignored or not performed. In addition, the displayed or discussed mutual couplings or direct couplings or communication connections may be implemented through some interfaces. The indirect couplings or communication connections between the apparatuses or units may be implemented in electronic, mechanical, or other forms.</p>
<p id="p0042" num="0042">The units described as separate parts may or may not be physically separate, and parts displayed as units may or may not be physical units, may be located in one position, or may be distributed on a plurality of network units. Some or all of the units may be selected according to actual requirements to achieve the objectives of the solutions of the embodiments.</p>
<p id="p0043" num="0043">In addition, functional units in the embodiments of the present invention may be integrated into one processing unit, or each of the units may exist alone physically, or two or more units are integrated into one unit.</p>
</description>
<claims id="claims01" lang="en"><!-- EPO <DP n="15"> -->
<claim id="c-en-0001" num="0001">
<claim-text>A stripe reassembling method in a storage system, wherein the storage system comprises N data storage nodes that store data strips and M parity storage nodes that store parity strips; R stripes are distributed on the N+M storage nodes, each stripe Si comprises N data strips and M parity strips, a data strip D<sub>ix</sub> is distributed on an x<sup>th</sup> data storage node in the N data storage nodes, and a parity strip P<sub>iy</sub> is distributed on a y<sup>th</sup> parity storage node in the M parity storage nodes; and N, M, and R are positive integers, R is not less than 2, a value of i is an integer ranging from 1 to R, a value of x is an integer ranging from 1 to N, and a value of y is an integer ranging from 1 to M; and<br/>
the method comprises:
<claim-text>selecting, by a stripe server, the R stripes, wherein a maximum of one data strip comprises valid data in data strips D<sub>ix</sub> that are in the R stripes and that are distributed on a same data storage node;</claim-text>
<claim-text>generating, by the stripe server, parity data of a parity strip P<sub>Ky</sub> of a new stripe S<sub>K</sub> for data of the data strip comprising valid data in the R stripes, wherein the new stripe S<sub>K</sub> comprises the data strip comprising valid data in the R stripes and the parity strip P<sub>Ky</sub>, and K is an integer different from 1 to R; and</claim-text>
<claim-text>storing, by the stripe server, the parity data of the parity strip P<sub>Ky</sub> on the y<sup>th</sup> parity storage node in the M parity storage nodes.</claim-text></claim-text></claim>
<claim id="c-en-0002" num="0002">
<claim-text>The method according to claim 1, wherein after the storing, by the stripe server, the parity data of the parity strip P<sub>Ky</sub> on the y<sup>th</sup> parity storage node in the M parity storage nodes, the method further comprises:<br/>
indicating, by the stripe server, a data storage node on which a data strip that stores garbage data of the R stripes is distributed to perform garbage collection.</claim-text></claim>
<claim id="c-en-0003" num="0003">
<claim-text>The method according to claim 2, wherein after the storing, by the stripe server, the parity data of the parity strip P<sub>Ky</sub> on the y<sup>th</sup> parity storage node in the M parity storage nodes, the method further comprises:<br/>
releasing, by the stripe server, the R stripes.</claim-text></claim>
<claim id="c-en-0004" num="0004">
<claim-text>The method according to claim 1, wherein before the selecting, by a stripe server, the R<!-- EPO <DP n="16"> --> stripes, the method further comprises:
<claim-text>determining, by the stripe server, the stripe S<sub>i</sub>, wherein a quantity of data strips comprising garbage data in the stripe S<sub>i</sub> meets a reassembly threshold.</claim-text></claim-text></claim>
<claim id="c-en-0005" num="0005">
<claim-text>A stripe server, wherein the stripe server is used in a storage system, and the storage system comprises N data storage nodes that store data strips and M parity storage nodes that store parity strips; R stripes are distributed on the N+M storage nodes, each stripe S<sub>i</sub> comprises N data strips and M parity strips, a data strip D<sub>ix</sub> is distributed on an x<sup>th</sup> storage node in the N data storage nodes, and a parity strip P<sub>iy</sub> is distributed on a y<sup>th</sup> storage node in the M parity storage nodes; N, M, and R are positive integers, R is not less than 2, a value of i is an integer ranging from 1 to R, a value of x is an integer ranging from 1 to N, and a value of y is an integer ranging from 1 to M; and the stripe server comprises an interface and a processor, the interface communicates with the processor, and the processor is configured to:
<claim-text>select the R stripes, wherein a maximum of one data strip comprises valid data in data strips D<sub>ix</sub> that are in the R stripes and that are distributed on a same data storage node;</claim-text>
<claim-text>generate parity data of a parity strip P<sub>Ky</sub> of a new stripe S<sub>K</sub> for data of the data strip comprising valid data in the R stripes, wherein the new stripe S<sub>K</sub> comprises the data strip comprising valid data in the R stripes and the parity strip P<sub>Ky</sub>, and K is an integer different from 1 to R; and</claim-text>
<claim-text>store the parity data of the parity strip P<sub>Ky</sub> on the y<sup>th</sup> storage node in the M parity storage nodes.</claim-text></claim-text></claim>
<claim id="c-en-0006" num="0006">
<claim-text>The stripe server according to claim 5, wherein the processor is further configured to indicate a data storage node on which a data strip that stores garbage data of the R stripes is distributed to perform garbage collection.</claim-text></claim>
<claim id="c-en-0007" num="0007">
<claim-text>The stripe server according to claim 6, wherein the processor is further configured to release the R stripes.</claim-text></claim>
<claim id="c-en-0008" num="0008">
<claim-text>The stripe server according to claim 5, wherein the processor is further configured to determine the stripe S<sub>i</sub>, wherein a quantity of data strips comprising garbage data in the stripe Si meets a reassembly threshold.</claim-text></claim>
<claim id="c-en-0009" num="0009">
<claim-text>A stripe server, wherein the stripe server is used in a storage system, and the storage system comprises N data storage nodes that store data strips and M parity storage nodes that store parity strips; R stripes are distributed on the N+M storage nodes, each stripe S<sub>i</sub> comprises N data strips and M parity strips, a data strip D<sub>ix</sub> is distributed on an x<sup>th</sup> storage node in the N data storage nodes,<!-- EPO <DP n="17"> --> and a parity strip P<sub>iy</sub> is distributed on a y<sup>th</sup> storage node in the M parity storage nodes; N, M, and R are positive integers, R is not less than 2, a value of i is an integer ranging from 1 to R, a value of x is an integer ranging from 1 to N, and a value of y is an integer ranging from 1 to M; and the stripe server comprises a selection unit, a generation unit, and a storage unit;
<claim-text>the selection unit is configured to select the R stripes, wherein a maximum of one data strip comprises valid data in data strips D<sub>ix</sub> that are in the R stripes and that are distributed on a same data storage node;</claim-text>
<claim-text>the generation unit is configured to generate parity data of a parity strip P<sub>Ky</sub> of a new stripe S<sub>K</sub> for data of the data strip comprising valid data in the R stripes, wherein the new stripe S<sub>K</sub> comprises the data strip comprising valid data in the R stripes and the parity strip P<sub>Ky</sub>, and K is an integer different from 1 to R; and</claim-text>
<claim-text>the storage unit is configured to store the parity data of the parity strip P<sub>Ky</sub> on the y<sup>th</sup> storage node in the M parity storage nodes.</claim-text></claim-text></claim>
<claim id="c-en-0010" num="0010">
<claim-text>The stripe server according to claim 9, wherein the stripe server further comprises an indication unit, configured to indicate a data storage node on which a data strip that stores garbage data of the R stripes is distributed to perform garbage collection.</claim-text></claim>
<claim id="c-en-0011" num="0011">
<claim-text>The stripe server according to claim 10, wherein the stripe server further comprises a releasing unit, configured to release the R stripes.</claim-text></claim>
<claim id="c-en-0012" num="0012">
<claim-text>The stripe server according to claim 9, wherein the stripe server further comprises a determining unit, configured to determine the stripe S<sub>i</sub>, wherein a quantity of data strips comprising garbage data in the stripe Si meets a reassembly threshold.</claim-text></claim>
<claim id="c-en-0013" num="0013">
<claim-text>A computer program product, wherein the computer program product comprises a computer instruction, the computer program product is used in a storage system, the storage system comprises N data storage nodes that store data strips and M parity storage nodes that store parity strips; R stripes are distributed on the N+M storage nodes, each stripe S<sub>i</sub> comprises N data strips and M parity strips, a data strip D<sub>ix</sub> is distributed on an x<sup>th</sup> storage node in the N data storage nodes, and a parity strip P<sub>iy</sub> is distributed on a y<sup>th</sup> storage node in the M parity storage nodes; N, M, and R are positive integers, R is not less than 2, a value of i is an integer ranging from 1 to R, a value of x is an integer ranging from 1 to N, and a value of y is an integer ranging from 1 to M; and a stripe server that is used in the storage system executes the computer instruction, to perform the following operations:<!-- EPO <DP n="18"> -->
<claim-text>selecting the R stripes, wherein a maximum of one data strip comprises valid data in data strips D<sub>ix</sub> that are in the R stripes and that are distributed on a same data storage node;</claim-text>
<claim-text>generating parity data of a parity strip P<sub>Ky</sub> of a new stripe S<sub>K</sub> for data of the data strip comprising valid data in the R stripes, wherein the new stripe S<sub>K</sub> comprises the data strip comprising valid data in the R stripes and the parity strip P<sub>Ky</sub>, and K is an integer different from 1 to R; and</claim-text>
<claim-text>storing the parity data of the parity strip P<sub>Ky</sub> on the y<sup>th</sup> storage node in the M parity storage nodes.</claim-text></claim-text></claim>
<claim id="c-en-0014" num="0014">
<claim-text>The computer program product according to claim 13, wherein the stripe server executes the computer instruction, to further indicate a data storage node on which a data strip that stores garbage data of the R stripes is distributed to perform garbage collection.</claim-text></claim>
<claim id="c-en-0015" num="0015">
<claim-text>The computer program product according to claim 14, wherein the stripe server executes the computer instruction, to further release the R stripes.</claim-text></claim>
<claim id="c-en-0016" num="0016">
<claim-text>The computer program product according to claim 13, wherein the stripe server executes the computer instruction, to further determine the stripe S<sub>i</sub>, wherein a quantity of data strips comprising garbage data in the stripe S<sub>i</sub> meets a reassembly threshold.</claim-text></claim>
</claims>
<drawings id="draw" lang="en"><!-- EPO <DP n="19"> -->
<figure id="f0001" num="1"><img id="if0001" file="imgf0001.tif" wi="77" he="233" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="20"> -->
<figure id="f0002" num="2,3"><img id="if0002" file="imgf0002.tif" wi="165" he="185" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="21"> -->
<figure id="f0003" num="4,5"><img id="if0003" file="imgf0003.tif" wi="165" he="188" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="22"> -->
<figure id="f0004" num="6,7"><img id="if0004" file="imgf0004.tif" wi="161" he="217" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="23"> -->
<figure id="f0005" num="8,9"><img id="if0005" file="imgf0005.tif" wi="165" he="176" img-content="drawing" img-format="tif"/></figure>
</drawings>
<search-report-data id="srep" lang="en" srep-office="EP" date-produced=""><doc-page id="srep0001" file="srep0001.tif" wi="150" he="233" type="tif"/><doc-page id="srep0002" file="srep0002.tif" wi="150" he="233" type="tif"/></search-report-data>
</ep-patent-document>
