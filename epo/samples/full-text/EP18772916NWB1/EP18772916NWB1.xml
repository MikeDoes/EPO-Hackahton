<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE ep-patent-document PUBLIC "-//EPO//EP PATENT DOCUMENT 1.5.1//EN" "ep-patent-document-v1-5-1.dtd">
<!-- This XML data has been generated under the supervision of the European Patent Office -->
<ep-patent-document id="EP18772916B1" file="EP18772916NWB1.xml" lang="en" country="EP" doc-number="3752889" kind="B1" date-publ="20211006" status="n" dtd-version="ep-patent-document-v1-5-1">
<SDOBI lang="en"><B000><eptags><B001EP>ATBECHDEDKESFRGBGRITLILUNLSEMCPTIESILTLVFIROMKCYALTRBGCZEEHUPLSK..HRIS..MTNORS..SM..................</B001EP><B003EP>*</B003EP><B005EP>J</B005EP><B007EP>BDM Ver 2.0.12 (4th of August) -  2100000/0</B007EP></eptags></B000><B100><B110>3752889</B110><B120><B121>EUROPEAN PATENT SPECIFICATION</B121></B120><B130>B1</B130><B140><date>20211006</date></B140><B190>EP</B190></B100><B200><B210>18772916.5</B210><B220><date>20180820</date></B220><B240><B241><date>20200724</date></B241></B240><B250>en</B250><B251EP>en</B251EP><B260>en</B260></B200><B300><B310>201815895393</B310><B320><date>20180213</date></B320><B330><ctry>US</ctry></B330></B300><B400><B405><date>20211006</date><bnum>202140</bnum></B405><B430><date>20201223</date><bnum>202052</bnum></B430><B450><date>20211006</date><bnum>202140</bnum></B450><B452EP><date>20210419</date></B452EP></B400><B500><B510EP><classification-ipcr sequence="1"><text>G05B  13/04        20060101AFI20210308BHEP        </text></classification-ipcr></B510EP><B520EP><classifications-cpc><classification-cpc sequence="1"><text>G05B  13/048       20130101 FI20190815BHEP        </text></classification-cpc></classifications-cpc></B520EP><B540><B541>de</B541><B542>STEUERUNGSSYSTEM UND VERFAHREN ZUR STEUERUNG DES BETRIEBS EINES SYSTEMS</B542><B541>en</B541><B542>CONTROL SYSTEM AND METHOD FOR CONTROLLING OPERATION OF SYSTEM</B542><B541>fr</B541><B542>SYSTÈME ET PROCÉDÉ DE COMMANDE PERMETTANT DE COMMANDER UNE OPÉRATION D'UN SYSTÈME</B542></B540><B560><B562><text>SABETGHADAM BAHAREH ET AL: "Fast nonlinear model predictive control for teleoperation systems using computationally efficient optimization techniques", 2014 22ND IRANIAN CONFERENCE ON ELECTRICAL ENGINEERING (ICEE), IEEE, 20 May 2014 (2014-05-20), pages 1371-1376, XP032699710, DOI: 10.1109/IRANIANCEE.2014.6999747 [retrieved on 2014-12-29]</text></B562><B562><text>SCHAFER ET AL: "Fast reduced multiple shooting methods for nonlinear model predictive control", CHEMICAL ENGINEERING AND PROCESSING, ELSEVIER SEQUOIA, LAUSANNE, CH, vol. 46, no. 11, 5 September 2007 (2007-09-05), pages 1200-1214, XP022230564, ISSN: 0255-2701, DOI: 10.1016/J.CEP.2006.06.024</text></B562></B560></B500><B700><B720><B721><snm>QUIRYNEN, Rien</snm><adr><str>c/o Mitsubishi Electric Research 
Laboratories Inc.
201 Broadway</str><city>Cambridge, Massachusetts 02139</city><ctry>US</ctry></adr></B721><B721><snm>HESPANHOL, Pedro</snm><adr><str>c/o Mitsubishi Electric Research 
Laboratories Inc.
201 Broadway</str><city>Cambridge, Massachusetts 02139</city><ctry>US</ctry></adr></B721></B720><B730><B731><snm>Mitsubishi Electric Corporation</snm><iid>101843950</iid><irf>209EP 1875 RI</irf><adr><str>7-3, Marunouchi 2-chome 
Chiyoda-ku</str><city>Tokyo 100-8310</city><ctry>JP</ctry></adr></B731></B730><B740><B741><snm>Pfenning, Meinig &amp; Partner mbB</snm><iid>100060642</iid><adr><str>Patent- und Rechtsanwälte 
Theresienhöhe 11a</str><city>80339 München</city><ctry>DE</ctry></adr></B741></B740></B700><B800><B840><ctry>AL</ctry><ctry>AT</ctry><ctry>BE</ctry><ctry>BG</ctry><ctry>CH</ctry><ctry>CY</ctry><ctry>CZ</ctry><ctry>DE</ctry><ctry>DK</ctry><ctry>EE</ctry><ctry>ES</ctry><ctry>FI</ctry><ctry>FR</ctry><ctry>GB</ctry><ctry>GR</ctry><ctry>HR</ctry><ctry>HU</ctry><ctry>IE</ctry><ctry>IS</ctry><ctry>IT</ctry><ctry>LI</ctry><ctry>LT</ctry><ctry>LU</ctry><ctry>LV</ctry><ctry>MC</ctry><ctry>MK</ctry><ctry>MT</ctry><ctry>NL</ctry><ctry>NO</ctry><ctry>PL</ctry><ctry>PT</ctry><ctry>RO</ctry><ctry>RS</ctry><ctry>SE</ctry><ctry>SI</ctry><ctry>SK</ctry><ctry>SM</ctry><ctry>TR</ctry></B840><B860><B861><dnum><anum>JP2018031462</anum></dnum><date>20180820</date></B861><B862>en</B862></B860><B870><B871><dnum><pnum>WO2019159398</pnum></dnum><date>20190822</date><bnum>201934</bnum></B871></B870></B800></SDOBI>
<description id="desc" lang="en"><!-- EPO <DP n="1"> -->
<heading id="h0001">[Technical Field]</heading>
<p id="p0001" num="0001">The invention relates generally to predictive control of nonlinear dynamical systems, and more particularly to a method and apparatus for block-structured low-rank Jacobian updates in a quasi-Newton type optimization algorithm for real-time predictive control of nonlinear systems.</p>
<heading id="h0002">[Background Art]</heading>
<p id="p0002" num="0002">A predictive controller, such as model predictive control (MPC), is used in many applications to control complex dynamical systems that are described by a set of nonlinear differential equations, i.e., a system of ordinary differential equations (ODE) or differential-algebraic equations (DAE). Examples of such systems include production lines, vehicles, satellites, engines, robots, power generators and other numerically controlled machines. An example predictive control system is disclosed in <nplcit id="ncit0001" npl-type="b"><text>SABETGHADAM BAHAREH ET AL: "Fast nonlinear model predictive control for teleoperation systems using computationally efficient optimization techniques", 2014 22ND IRANIAN CONFERENCE ON ELECTRICAL ENGINEERING (ICEE), IEEE, 20 May 2014, pages 1371-1376</text></nplcit>.</p>
<p id="p0003" num="0003">Direct optimal control methods rely on the discretization of the continuous-time differential equations, based on a discretization of the control horizon and a corresponding parameterization of the control action over the prediction horizon. The resulting nonlinear optimization problem or nonlinear program (NLP) can be solved by any nonlinear optimization solver. However, in the case of real-time applications of predictive control for nonlinear systems, this nonlinear optimization problem needs to be solved under strict timing constraints.</p>
<p id="p0004" num="0004"><!-- EPO <DP n="2"> --> Predictive control for a system described by nonlinear differential equations, requires the solution of a nonlinear optimal control problem at each control step. Instead of solving each problem exactly, one real-time iteration of a sequential quadratic programming (SQP) method can be performed in order to update a solution guess from one time point to the next. Such a Newton-type SQP method requires a linearization of the discretized nonlinear dynamics at each iteration of the method. This linearization can be costly and requires a Jacobian evaluation when using an explicit integration method and it can additionally require matrix factorizations, matrix-matrix multiplications and/or an iterative procedure to solve a nonlinear system of equations in case of an implicit integration method.</p>
<p id="p0005" num="0005">Accordingly, there is a need to reduce the computational cost of SQP solvers in real-time predictive control applications for nonlinear dynamical systems.</p>
<heading id="h0003">[Summary of Invention]</heading>
<p id="p0006" num="0006">It is an object of the invention to provide a control system and a method for controlling a system by solving an inequality constrained nonlinear dynamic optimization problem, including a discretization of the nonlinear differential equations that describe the dynamic model of the system.</p>
<p id="p0007" num="0007">Some embodiments use a real-time iteration method for solving the nonlinear optimal control problem (OCP) by performing, at each control step in a predictive controller, one iteration of a sequential quadratic programming (SQP) method. This means that, at each control step, an embodiment needs to prepare and solve a quadratic program (QP) approximation of the nonlinear optimization problem. The QP preparation includes the linearization of the nonlinear constraints that impose the discretized nonlinear system dynamics. Based on this linearization, the resulting QP is solved in order to produce the control solution that is used to<!-- EPO <DP n="3"> --> control the system at each step of the predictive controller.</p>
<p id="p0008" num="0008">When the dynamic model of the system is described by a set of continuous-time differential equations, some embodiments discretize the system dynamics using a numerical integration method and the linearization requires a corresponding Jacobian evaluation. Some embodiments are based on the realization that this linearization step, which is necessary to prepare the QP approximation of the nonlinear optimization problem, forms a computationally expensive step in case the dynamics are highly dimensional, in case they involve lengthy nonlinear expressions or if they are described by a set of stiff or implicitly defined differential equations.</p>
<p id="p0009" num="0009">Some embodiments use an implicit integration scheme to discretize the nonlinear system dynamics, e.g., in direct collocation, because of their desirable numerical stability properties and their capability to deal with implicit algebraic equations. Such an implicit integration scheme requires the solution of a nonlinear system of equations that implicitly defines intermediate variables to represent the discretized system dynamics. Some embodiments are based on the realization that, in an SQP method, these intermediate variables can be eliminated numerically from each QP approximation in order to result in a QP of smaller dimensions that can be solved more efficiently. This numerical elimination procedure can be referred to as condensing and computes the constraint Jacobian matrix in the condensed QP, based on the computation of multiple intermediate condensing matrices.</p>
<p id="p0010" num="0010">Each linearization of the discretized system dynamics can benefit from the re-computation of these condensing matrices in order to produce the exact constraint Jacobian matrix in the condensed QP approximation of the nonlinear<!-- EPO <DP n="4"> --> OCP. Instead of using the exact Jacobian matrix for the discretized system dynamics at each control step, some embodiments use a Jacobian approximation in combination with an adjoint-based inexact SQP iteration. Some embodiments are based on the realization that these Jacobian approximations can then be updated from one time point to the next, using a rank-one update based on quasi-Newton and/or Broyden type methods. Such an approach is based only on evaluations of the discretized system dynamics and/or on adjoint differentiation techniques which are computationally much cheaper than a complete Jacobian evaluation.</p>
<p id="p0011" num="0011">Some embodiments are based on the recognition that updating the Jacobian matrices may reduce the computational complexity but also may come short to achieve the computational complexity suitable for real-time control applications. Some embodiments are based on the understanding of two reasons for such a shortcoming. First, the update of the Jacobian matrices may destroy its sparsity. Some embodiments are based on the recognition that, when applying a classical quasi-Newton or Broyden type method to the discretized system dynamics, one obtains a dense Jacobian approximation and the block-structured sparsity structure is therefore destroyed. In those situations, the solution of the QP approximation with non-sparse Jacobian matrices is computationally demanding.</p>
<p id="p0012" num="0012">Because of the multi-stage structure of the OCP with a linear coupling from one time interval to the next in the control horizon, it is however realized that the exact Jacobian instead exhibits a particular block sparsity structure. Some embodiments therefore alternatively apply the quasi-Newton or Broyden type update formula in a way to preserve this block sparsity structure of the Jacobian, resulting in a block-wise rank-one update of the Jacobian. This block-wise rank-one update has the same computational cost as a standard rank-one update, which is considerably lower than a complete Jacobian evaluation, but preserves the block-structured<!-- EPO <DP n="5"> --> sparsity of the problem which is beneficial for an efficient solution of the QP approximation of the nonlinear optimization problem.</p>
<p id="p0013" num="0013">The second reason of the high computational cost of updating the Jacobian approximations lies in the computational complexity of performing the update of the Jacobian matrix in the case of using an implicit integration method to discretize the continuous-time system dynamics. Some embodiments are based on the realization that an iterative solution procedure is needed to compute the intermediate variables of the implicit integration method in each update of the constraint Jacobian matrix. Specifically, some embodiments instead use the block-wise rank-one update formula to produce a Jacobian approximation for the combined system, that includes the discretized system dynamics and the nonlinear system of equations that define the intermediate variables.</p>
<p id="p0014" num="0014">Some embodiments are based on the realization that this block-wise rank-one update for the Jacobian of the combined system of equations leads to a rank-one update formula for the intermediate condensing matrices, by using the Sherman-Morrison formula that shows how the rank-one update of a matrix leads to a rank-one update of the inverse of that matrix. The block-wise rank-one update of the intermediate condensing matrices then leads to a rank-one update of the condensed constraint Jacobian matrices in the block-structured QP approximation. These embodiments perform the numerical elimination or condensing of the implicitly defined intermediate variables, based on this block-wise rank-one update formula, without any iterative solution procedure and without any matrix-matrix multiplications or matrix factorizations. Instead, these embodiments only require matrix-vector operations and one evaluation of the nonlinear equations and one evaluation of an adjoint directional derivative.</p>
<p id="p0015" num="0015"><!-- EPO <DP n="6"> --> Some embodiments are based on the factorization of the condensed Hessian matrix in order to solve the QP approximation of the nonlinear OCP at each control step, which is a costly computational step. Some embodiments are based on the realization that this matrix factorization can be updated from one control step to the next, based on the rank-one update of the constraint Jacobian matrix. Specifically, some embodiments use a rank-two symmetric update formula to update the factorization of the condensed Hessian matrix based on the rank-one update to the constraint Jacobian matrix. Some other embodiments use a rank-three symmetric update formula to update the factorization of the condensed Hessian matrix based on the rank-one update to the constraint Jacobian matrix and a quasi-Newton type rank-one update formula for the Hessian approximation.</p>
<p id="p0016" num="0016">Accordingly, the invention discloses a control system for controlling an operation of a system with continuous-time nonlinear dynamics subject to constraints including equality and inequality constraints on state and control variables of the system. The control system includes an estimator to estimate a current state of the system using measurements of the operation of the system; a memory to store intermediate condensing matrices and an approximation of a constraint Jacobian matrix determined for each time interval in a control horizon, such that the intermediate condensing matrices and the approximation of the constraint Jacobian matrix have a block-bidiagonal structure; a processor to iteratively solve, at each control step, an approximation of a constrained nonlinear optimization problem to produce a control solution, wherein the approximation includes a linearization of the nonlinear dynamics of the system discretized by time intervals in the control horizon and represented using the approximation of the constraint Jacobian matrix for each time interval of the control horizon, wherein, at each control step, the processor is configured to retrieve, from the memory, the intermediate condensing matrices and the approximation of the constraint Jacobian<!-- EPO <DP n="7"> --> matrix determined for each time interval; block-wise update the approximation of the constraint Jacobian matrix and the intermediate condensing matrices using an evaluation of one or combination of the discretized dynamics of the system and a directional derivative of the discretized dynamics of the system, wherein each block in the constraint Jacobian matrix and the intermediate condensing matrices represents one time interval in the control horizon; solve the approximation of the nonlinear optimization problem using the updated approximation of the constraint Jacobian matrix; and update the memory with the updated approximation of the constraint Jacobian matrix and the updated intermediate condensing matrices; and a controller to control the system using the control solution.</p>
<p id="p0017" num="0017">The invention also discloses a method for controlling an operation of a system with continuous-time nonlinear dynamics subject to constraints including equality and inequality constraints on state and control variables of the system, wherein the method uses a processor coupled to a memory storing intermediate condensing matrices and an approximation of a constraint Jacobian matrix determined for each time interval in a control horizon, such that the intermediate condensing matrices and the approximation of the constraint Jacobian matrix have a block-bidiagonal structure, wherein the processor is coupled with stored instructions implementing the method, wherein the instructions, when executed by the processor carry out at least some steps of the method, includes estimating a current state of the system using measurements of the operation of the system; iteratively solving, at each control step, an approximation of a constrained nonlinear optimization problem to produce a control solution, wherein the approximation includes a linearization of the nonlinear dynamics of the system discretized by time intervals in the control horizon and represented using the approximation of the constraint Jacobian matrix for each time interval of the control horizon, wherein, an iteration of the solving comprises retrieving, from the<!-- EPO <DP n="8"> --> memory, the intermediate condensing matrices and the approximation of the constraint Jacobian matrix determined for each time interval; block-wise updating the approximation of the constraint Jacobian matrix and the intermediate condensing matrices using an evaluation of one or combination of the discretized dynamics of the system and a directional derivative of the discretized dynamics of the system, wherein each block in the constraint Jacobian matrix and the intermediate condensing matrices represents one time interval in the control horizon; solving the approximation of the nonlinear optimization problem using the updated approximation of the constraint Jacobian matrix; and updating the memory with the updated approximation of the constraint Jacobian matrix and the updated intermediate condensing matrices; and controlling the system using the control solution.</p>
<p id="p0018" num="0018">The invention also discloses a non-transitory computer readable storage medium embodied thereon a program executable by a processor for performing a method, the method includes estimating a current state of the system using measurements of the operation of the system; iteratively solving, at each control step, an approximation of a constrained nonlinear optimization problem to produce a control solution, wherein the approximation includes a linearization of the nonlinear dynamics of the system discretized by time intervals in the control horizon and represented using the approximation of the constraint Jacobian matrix for each time interval of the control horizon, wherein, an iteration of the solving comprises retrieving intermediate condensing matrices and an approximation of a constraint Jacobian matrix determined for each time interval in a control horizon, such that the intermediate condensing matrices and the approximation of the constraint Jacobian matrix have a block-bidiagonal structure; block-wise updating the approximation of the constraint Jacobian matrix and the intermediate condensing matrices using an evaluation of one or combination of the discretized<!-- EPO <DP n="9"> --> dynamics of the system and a directional derivative of the discretized dynamics of the system, wherein each block in the constraint Jacobian matrix and the intermediate condensing matrices represents one time interval in the control horizon; and solving the approximation of the nonlinear optimization problem using the updated approximation of the constraint Jacobian matrix; and controlling the system using the control solution.</p>
<heading id="h0004">[Brief Description of Drawings]</heading>
<p id="p0019" num="0019">
<ul id="ul0001" list-style="none" compact="compact">
<li>[<figref idref="f0001">Fig. 1</figref>]<br/>
<figref idref="f0001">Fig. 1</figref> is a block diagram of a controller and feedback system according to some embodiments.</li>
<li>[<figref idref="f0002">Fig. 2</figref>]<br/>
<figref idref="f0002">Fig. 2</figref> is a block diagram of a controller, implemented using CPU processors and memory, and feedback system according to some embodiments of the invention.</li>
<li>[<figref idref="f0003">Fig. 3A</figref>]<br/>
<figref idref="f0003">Fig. 3A</figref> is a block diagram of a nonlinear model predictive control (MPC) method to implement the controller according to some embodiments.</li>
<li>[<figref idref="f0004">Fig. 3B</figref>]<br/>
<figref idref="f0004">Fig. 3B</figref> is a block diagram of an MPC method that solves an optimal control structured Nonlinear Program (NLP), based on an explicit formulation of the discrete time system dynamics, according to some embodiments.</li>
<li>[<figref idref="f0005">Fig. 3C</figref>]<br/>
<figref idref="f0005">Fig. 3C</figref> is a block diagram of an MPC method that solves an optimal control structured Nonlinear Program (NLP), based on an implicit formulation of the discrete time system dynamics, according to some embodiments.</li>
<li>[<figref idref="f0006">Fig. 4A</figref>]<br/>
<figref idref="f0006">Fig. 4A</figref> is a block diagram of an iterative procedure to solve the constrained<!-- EPO <DP n="10"> --> NLP at each control time step via the use of successive local approximations.</li>
<li>[<figref idref="f0007">Fig. 4B</figref>]<br/>
<figref idref="f0007">Fig. 4B</figref> is a block diagram of an iterative procedure to solve the constrained NLP at each control time step via the use of Jacobian matrix approximations, for each interval of the time horizon, that are updated from one iteration to the next.</li>
<li>[<figref idref="f0008">Fig. 4C</figref>]<br/>
<figref idref="f0008">Fig. 4C</figref> is a block diagram of an iterative procedure to solve the constrained NLP at each time step via the use of Jacobian and Hessian matrix approximations, for each interval of the time horizon, that are updated from one iteration to the next.</li>
<li>[<figref idref="f0009">Fig. 5A</figref>]<br/>
<figref idref="f0009">Fig. 5A</figref> is a block diagram of a time discretization, control parameterization and local linearization of the system dynamics, based on an explicit integration scheme for an explicit system of nonlinear differential equations.</li>
<li>[<figref idref="f0010">Fig. 5B</figref>]<br/>
<figref idref="f0010">Fig. 5B</figref> is a block diagram of a time discretization, control parameterization and local linearization of the system dynamics, based on an implicit integration scheme for an implicit system of nonlinear differential equations.</li>
<li>[<figref idref="f0011">Fig. 6A</figref>]<br/>
<figref idref="f0011">Fig. 6A</figref> is a block diagram of a local approximation of the optimal control structured NLP via a local Quadratic Program (QP) approximation, based on an explicit formulation of the discrete time system dynamics.</li>
<li>[<figref idref="f0012">Fig. 6B</figref>]<br/>
<figref idref="f0012">Fig. 6B</figref> is a block diagram of a local approximation of the optimal control structured NLP via a local Quadratic Program (QP) approximation, based on an implicit formulation of the discrete time system dynamics.</li>
<li>[<figref idref="f0013">Fig. 6C</figref>]<br/>
<figref idref="f0013">Fig. 6C</figref> is a block diagram of the condensing procedure to numerically<!-- EPO <DP n="11"> --> eliminate the intermediate variables in a local QP approximation of the NLP, based on an implicit formulation of the discrete time system dynamics.</li>
<li>[<figref idref="f0014">Fig. 7A</figref>]<br/>
<figref idref="f0014">Fig. 7A</figref> is a block diagram of an iterative procedure to solve the constrained NLP, based on an explicit formulation of the discrete time system dynamics, via successive local QP approximations and a block-structured quasi-Newton type update scheme for the constraint Jacobian matrices.</li>
<li>[<figref idref="f0015">Fig. 7B</figref>]<br/>
<figref idref="f0015">Fig. 7B</figref> is a schematic of the block-structured quasi-Newton type rank-one update scheme for the constraint Jacobian matrices.</li>
<li>[<figref idref="f0016">Fig. 7C</figref>]<br/>
<figref idref="f0016">Fig. 7C</figref> is a pseudo code of a real-time implementation of a nonlinear MPC controller, based on an explicit formulation of the discrete time system dynamics, via successive local QP approximations and a block-structured quasi-Newton type update scheme for the constraint Jacobian matrices.</li>
<li>[<figref idref="f0017">Fig. 8A</figref>]<br/>
<figref idref="f0017">Fig. 8A</figref> is a block diagram of an iterative procedure to solve the constrained NLP, based on an implicit formulation of the discrete time system dynamics, via successive local QP approximations and a block-structured quasi-Newton type update scheme for the intermediate condensing and constraint Jacobian matrices.</li>
<li>[<figref idref="f0018">Fig. 8B</figref>]<br/>
<figref idref="f0018">Fig. 8B</figref> is a schematic of the block-structured quasi-Newton type rank-one update scheme for the intermediate condensing and constraint Jacobian matrices.</li>
<li>[<figref idref="f0019">Fig. 8C</figref>]<br/>
<figref idref="f0019">Fig. 8C</figref> is a pseudo code of a real-time implementation of a nonlinear MPC controller, based on an implicit formulation of the discrete time system dynamics, via successive local QP approximations and a block-structured quasi-Newton type update scheme for the intermediate condensing and constraint Jacobian matrices.<!-- EPO <DP n="12"> --></li>
<li>[<figref idref="f0020">Fig. 9A</figref>]<br/>
<figref idref="f0020">Fig. 9A</figref> is a block diagram of an initialization procedure for the state and control values and for the constraint Jacobian matrices in the nonlinear MPC controller, based on an explicit formulation of the discrete time system dynamics.</li>
<li>[<figref idref="f0021">Fig. 9B</figref>]<br/>
<figref idref="f0021">Fig. 9B</figref> is a block diagram of an initialization procedure for the state and control values and for the intermediate condensing and constraint Jacobian matrices in the nonlinear MPC controller, based on an implicit formulation of the discrete time system dynamics.</li>
<li>[<figref idref="f0022">Fig. 10A</figref>]<br/>
<figref idref="f0022">Fig. 10A</figref> is a block diagram of an iterative procedure to solve the constrained NLP at each control time step via the use of successive local approximations and numerical condensing for the updated constraint Jacobian approximations at each interval of the prediction time horizon.</li>
<li>[<figref idref="f0023">Fig. 10B</figref>]<br/>
<figref idref="f0023">Fig. 10B</figref> is a block diagram of an iterative procedure to solve the constrained NLP at each control time step via the use of successive local approximations and numerical condensing for the updated constraint Jacobian and Hessian approximations at each interval of the prediction time horizon.</li>
<li>[<figref idref="f0024">Fig. 11A</figref>]<br/>
<figref idref="f0024">Fig. 11A</figref> is a block diagram of a symmetric rank-two update of the condensed Hessian matrix, given a rank-one update to the constraint Jacobian matrix.</li>
<li>[<figref idref="f0025">Fig. 11B</figref>]<br/>
<figref idref="f0025">Fig. 11B</figref> is a block diagram of a symmetric rank-three update of the condensed Hessian matrix, given a rank-one update to the constraint Jacobian matrix as well as a rank-one update to the Hessian matrix.</li>
<li>[<figref idref="f0026">Fig. 12</figref>]<br/>
<!-- EPO <DP n="13"> --><figref idref="f0026">Fig. 12</figref> is a schematic of a vehicle including a controller employing principles of some embodiments.</li>
<li>[<figref idref="f0027">Fig. 13</figref>]<br/>
<figref idref="f0027">Fig. 13</figref> is a schematic of interaction between the controller employing principles of some embodiments and controllers of the vehicle 1201 according to some embodiments.</li>
</ul></p>
<heading id="h0005">[Description of Embodiments]</heading>
<p id="p0020" num="0020">The invention provides a system and a method for controlling an operation of a system or a system using a predictive controller. An example of the predictive controller is a model predictive control (MPC) determining control inputs based on a model of the controlled system. This predictive controller is based on nonlinear model predictive control (NMPC), when the control inputs are determined using a nonlinear model of the controlled system.</p>
<p id="p0021" num="0021"><figref idref="f0001">Fig. 1</figref> shows an example system 120 connected to a control system, such as a predictive controller 110, via a state estimator 130. In some implementations, the predictive controller is an MPC controller programmed according to a dynamical model 102 of the system. The model can be a set of equations representing changes of the state and output 103 of the system 120 over time as functions of current and previous inputs 111 and previous outputs 103. The model can include constraints 104 that represent physical and operational limitations of the system. During the operation, the controller receives a command 101 indicating the desired behavior of the system. The command can be, for example, a motion command. In response to receiving the command 101, the controller generates a control signal 111 that serves as an input for the system. In response to the input, the system updates the output 103 of the system. Based on measurements of the output of the system 103, the estimator updates the estimated state of the system 121. This estimated state of<!-- EPO <DP n="14"> --> the system 121 provides the state feedback to the predictive controller 110.</p>
<p id="p0022" num="0022">The system 120, as referred herein, can be any machine or device controlled by certain control signals 111 (inputs), possibly associated to physical quantities such as voltages, pressures, forces, torques, and to return some controlled output signals 103 (outputs), possibly associated to physical quantities such as currents, flows, velocities, positions indicative of a transition of a state of the system from a previous state to the current state. The output values are related in part to previous output values of the system, and in part to previous and current input values. The dependency on previous inputs and previous outputs is encoded in the state of the system. The operation of the system, e.g., a motion of components of the system, can include a sequence of output values generated by the system following the application of certain input values.</p>
<p id="p0023" num="0023">A model of the system 102 can include a set of mathematical equations that describe how the system outputs change over time as functions of current and previous inputs, and the previous outputs. The state of the system is any set of information, in general time varying, for instance an appropriate subset of current and previous inputs and outputs, that, together with the model of the system and future inputs, can uniquely define the future motion of the system.</p>
<p id="p0024" num="0024">The system can be subject to physical limitations and specification constraints 104 limiting the range where the outputs, the inputs, and also possibly the states of the system are allowed to operate.</p>
<p id="p0025" num="0025">The predictive controller 110 can be implemented in hardware or as a software program executed in a processor, e.g., a microprocessor, which at fixed or variable control period sampling intervals receives the estimated state of the<!-- EPO <DP n="15"> --> system 121 and the desired motion command 101 and determines, using this information, the inputs, e.g., the control signal 111, for operating the system.</p>
<p id="p0026" num="0026">The estimator 130 can be implemented in hardware or as a software program executed in a processor, either the same or a different processor from the controller 110, which at fixed or variable control period sampling intervals receives the outputs of the system 103 and determines, using the new and the previous output measurements, the estimated state 121 of the system 120.</p>
<p id="p0027" num="0027"><figref idref="f0002">Fig. 2</figref> shows a block diagram of the predictive controller 110, according to some embodiments, which actuates the system such that the estimated state 121 of the system and output 103 follow a command 101. The controller 110 includes a computer, e.g., in the form of a single central processing unit (CPU) or multiple CPU processors 201 connected to memory 202 for storing the model 102 and the constraints 104 on the operation of the system.</p>
<p id="p0028" num="0028">In some embodiments, the processor 201 is connected to a controller 203 configured to control the system using the control solution determined by the processor 201. For example, the processor 201 can implement a functionality of the controller 203. For example, the controller 203 determines the control signal 111 based on the control solution determined by the processor 201 and submits the control signals to the system 120. For example, the controller 203 can transformed the control solution determined by the processor into signals 111 associated with physical quantities of a specific system 120, such as voltages, pressures, forces, and torques.</p>
<p id="p0029" num="0029"><figref idref="f0003">Fig. 3A</figref> shows a block diagram of a system and a method for model predictive control (MPC) to implement the controller 110 that computes the<!-- EPO <DP n="16"> --> control signal 111, given the current state of the system 121 and the control command 101 according to some embodiments. Specifically, MPC computes a control solution, e.g., a solution vector 355, that contains a sequence of future optimal control inputs over a prediction time horizon of the system 360, by solving an inequality constrained optimization problem 350 at each control time step. The data 345 of the objective function, equality and inequality constraints in this optimization problem 350 depends on the dynamical model, the system constraints 340, the current state of the system 121 and the control command 101.</p>
<p id="p0030" num="0030">In general, the inequality constrained optimization problem 350 is an optimal control structured nonlinear program (NLP), in which either the objective function, certain equality or inequality constraints or a combination of these objective and constraint functions 345 are nonlinear and nonconvex. For example, in some embodiments, the system model 102 that is used by MPC, is a set of nonlinear dynamical equations 340 such that the predictive controller 110 is based on nonlinear model predictive control (NMPC).</p>
<p id="p0031" num="0031">In some embodiments, the solution of this inequality constrained optimization problem 350 uses the state and control values over the prediction time horizon from the previous control time step 310, which can be read from the memory. This concept is called warm- or hot-starting of the optimization algorithm and can reduce the required computational effort of the MPC controller in some embodiments. In a similar fashion, the corresponding solution vector 355 can be used to update and store a sequence of optimal state and control values for the next control time step 360.</p>
<p id="p0032" num="0032"><figref idref="f0004">Fig. 3B</figref> shows a block diagram of a nonlinear MPC controller, that computes a control signal 111 given the current state of the system 121 and the<!-- EPO <DP n="17"> --> control command 101, by solving an optimal control structured nonlinear program (NLP) 350 at each control time step, based on an explicit formulation of the discrete time system dynamics 353. The dynamical model formulation of the system is explicit, because the state value <i>x</i><sub><i>i</i>+1</sub> at a certain time point <i>t</i><sub><i>i</i>+1</sub> is defined explicitly by the state value <i>x<sub>i</sub></i> and the control input <i>u<sub>i</sub></i> at the previous time point <i>t<sub>i</sub></i> via an explicit function <i>x</i><sub><i>i</i>+1</sub> <i>= F<sub>i</sub>(x<sub>i,</sub>u<sub>i</sub></i>)<i>.</i> As discussed also further, in some embodiments, this explicit formulation of the discrete time system dynamics 353 is obtained by applying one or multiple steps of an explicit integration scheme to a set of continuous time differential equations.</p>
<p id="p0033" num="0033">In addition to the equality constraints that impose the nonlinear dynamics of the system 353, there is also the initial value constraint 352 that imposes the initial state value <i>x</i><sub>0</sub> to be equal to the current state estimate 121 of the system <i>x̂</i><sub>0</sub> and the inequality constraints 354 that impose any additional system constraints, representing physical and operational limitations of the system. The objective function 351 of the optimal control problem can include a cost term corresponding to each of the time points of the prediction time horizon. In some embodiments, the objective function includes a (nonlinear) least squares type penalization of the deviation of a certain output function of the system from a sequence of reference output values at each of the time points of the prediction time horizon.</p>
<p id="p0034" num="0034"><figref idref="f0005">Fig. 3C</figref> shows a block diagram of a nonlinear MPC controller, that computes a control signal 111 given the current state of the system 121 and the control command 101, by solving an optimal control structured nonlinear program (NLP) 350 at each control time step, based on an implicit formulation of the discrete time system dynamics 356-357. The dynamical model formulation of the system is implicit, because the state value <i>x</i><sub><i>i</i>+1</sub> at a certain time point <i>t</i><sub><i>i</i>+1</sub> is defined by the state value <i>x<sub>i</sub>,</i> the control input <i>u<sub>i</sub></i> and a set of additional<!-- EPO <DP n="18"> --> intermediate variables <i>K<sub>i</sub></i> at the previous time point <i>t<sub>i</sub></i> 357. These intermediate variables <i>K<sub>i</sub></i> are defined implicitly by the set of nonlinear equations 0 = <i>G<sub>i</sub></i>(<i>x<sub>i</sub></i>, <i>u<sub>i</sub>, K<sub>i</sub></i>) 356, i.e., the Jacobian of these equations with respect to the intermediate variables <maths id="math0001" num=""><math display="inline"><mfrac><mrow><mo>∂</mo><msub><mi>G</mi><mi>i</mi></msub></mrow><mrow><mo>∂</mo><msub><mi>K</mi><mi>i</mi></msub></mrow></mfrac></math><img id="ib0001" file="imgb0001.tif" wi="8" he="10" img-content="math" img-format="tif" inline="yes"/></maths> (·) is a square matrix that must be nonsingular in general. As discussed also further, in some embodiments, this implicit formulation of the discrete time system dynamics 356-357 is obtained by applying one or multiple steps of an implicit integration scheme to a set of continuous time differential equations.</p>
<p id="p0035" num="0035"><figref idref="f0006">Fig. 4A</figref> shows a block diagram of an iterative procedure to solve the constrained, optimal control structured, nonlinear program (NLP) 350 at each control time step via the use of successive local approximations 406. A solution guess for the NLP 401 is used to construct this local approximation and its solution is used to update the current sequence of state and control values over the prediction time horizon 415, resulting in an update to the current solution guess for the constrained NLP 401 at each iteration of the algorithmic procedure. The state and control values from the previous control time step 310 can be used to form an initial solution guess for the constrained NLP 401.</p>
<p id="p0036" num="0036">Based on the nonlinear objective and constraint functions 345 and using the current solution guess as a linearization point 401, a local approximation to the NLP 406 is constructed at each iteration of the algorithmic procedure. For this purpose, the constraint Jacobian matrix needs to be computed or approximated in order to form a linearization of the discretized system of complex nonlinear dynamics 402. In the case that the solution of the local approximation forms a sufficiently accurate solution for the NLP 407, then the optimal control solution 355 is obtained. A slightly suboptimal and/or infeasible solution 355 is obtained<!-- EPO <DP n="19"> --> when the maximum number of iterations is reached 407 instead. In the case where a solution to the NLP with sufficient accuracy is not yet found and the maximum number of iterations is not yet reached 407, then the solution to the local approximation 406 is used to update the current values for the state and control values over the prediction time horizon 415 and the current solution guess to the NLP 401.</p>
<p id="p0037" num="0037">Different types of optimization algorithms can be used to solve the inequality constrained, optimal control structured, nonlinear program (NLP) 350 at each control time step via the use of successive local approximations 406. Some embodiments are based on Sequential Quadratic Programming (SQP), in which a Quadratic Program (QP) is constructed and solved in each iteration as a local approximation to the original NLP. Instead, some embodiments are based on an interior point (IP) method where each local approximation is a linearization of the first order necessary conditions of optimality for the NLP in which the complementarity conditions, corresponding to the inequality constraints, are generally smoothened. In some embodiments, a barrier function is used to iteratively enforce the inequality constraints and each iteration constructs and solves a local approximation to the barrier reformulated problem.</p>
<p id="p0038" num="0038">Each of the above mentioned optimization methods can use different Newton-type approximation techniques for the constraint Jacobian and Hessian matrices when constructing and solving the local subproblem in each iteration 406. Some embodiments are based on the exact linearization of some or all of the constraint functions by computing the exact constraint Jacobian matrix. Some embodiments instead use a quasi-Newton type update formula to iteratively update an approximation to the constraint Jacobian matrix via low-rank update techniques. Similarly, for the Lagrangian Hessian matrix of the NLP, also different Newton-type<!-- EPO <DP n="20"> --> approximation techniques can be used. Some embodiments are based on an evaluation of the exact Hessian matrix for the Lagrangian when constructing each local approximation to the NLP. Some embodiments instead use a quasi-Newton type update formula to iteratively update an approximation to the Hessian matrix via symmetric low-rank update techniques. In case the objective function of the NLP includes a (nonlinear) least squares type cost term, some embodiments are based on a Gauss-Newton type Hessian approximation instead.</p>
<p id="p0039" num="0039"><figref idref="f0007">Fig. 4B</figref> shows a block diagram of an iterative procedure to solve the constrained, optimal control structured, nonlinear program (NLP) 350 at each control time step via the use of successive local approximations 406. In particular, an approximation to the NLP is constructed based on a local linearization of the nonlinear objective and constraint functions. A linearization point is needed that includes the state and control values over the prediction time horizon 401, which are updated based on the solution of the local approximation problem 415. In addition, an approximation of the constraint Jacobian matrix for each interval of the prediction time horizon is constructed and updated in each iteration 421, based on the solution of the local approximation problem 415.</p>
<p id="p0040" num="0040">In some embodiments of a nonlinear MPC controller, an optimal control structured NLP is solved at each control time step 350, based on an implicit formulation of the discrete time system dynamics 356-357. A system of nonlinear equations 0 = <i>G<sub>i</sub>(x<sub>i</sub>,</i> u<i><sub>i</sub>, K<sub>i</sub></i>) 356 implicitly defines a set of intermediate variables <i>K<sub>i</sub>.</i> A condensing procedure is used to numerically eliminate those additional intermediate variables from each local approximation of the NLP, resulting in intermediate condensing matrices in order to compute the corresponding constraint Jacobian matrices for each interval of the prediction time horizon in the condensed approximation problem formulation 405. Subsequently,<!-- EPO <DP n="21"> --> an expansion procedure is used to compute the values of the numerically eliminated intermediate variables from the solution of the condensed approximation 406. The iterative optimization algorithm can directly update each approximation of these intermediate condensing matrices 420, resulting in an update to the approximate constraint Jacobian matrices 421. The construction and/or update of approximations to both the intermediate condensing matrices 420 and the constraint Jacobian matrices 421 can be performed independently for each time interval of the prediction horizon.</p>
<p id="p0041" num="0041">In some embodiments of a nonlinear MPC controller, an optimal control structured NLP is solved at each control time step 350, based on an explicit formulation of the discrete time system dynamics 353. In this case, the constraint Jacobian matrices can be updated directly 421, without the construction or updates of intermediate condensing matrices since, in the case of an explicit formulation of the discrete time system dynamics 353, there are no intermediate variables that are defined implicitly by a system of nonlinear equations.</p>
<p id="p0042" num="0042"><figref idref="f0008">Fig. 4C</figref> shows a block diagram of an iterative procedure to solve the constrained, optimal control structured, nonlinear program (NLP) 350 at each control time step via the use of successive local approximations 406, using an update formula for the constraint Jacobian approximations 421 based on the construction and updates of intermediate condensing matrices for each time interval 420. In addition, some embodiments construct and update approximations of Hessian block matrices 425 from one iteration of the optimization procedure to the next iteration. The construction and/or update to these Hessian approximations can also be performed independently for each time interval of the prediction horizon 425.</p>
<p id="p0043" num="0043"><!-- EPO <DP n="22"> --> <figref idref="f0009">Fig. 5A</figref> shows a block diagram for obtaining the explicit formulation of the discrete time system dynamics 353 as part of the optimal control structured NLP that is solved at each control time step 350. The dynamical model formulation of the system is explicit, because the state value at a certain time point <i>t</i><sub><i>i</i>+1</sub> is defined explicitly by the state value 501 and the control input 502 at the previous time point <i>t<sub>i</sub></i> via an explicit function <i>x</i><sub><i>i</i>+1</sub> = <i>F<sub>i</sub></i> (<i>x<sub>i</sub></i>, <i>u<sub>i</sub></i>) 506. In some embodiments, the dynamic model of the system is given originally by a system of continuous time differential equations 503, which describe the states of the system over a certain time interval [<i>t<sub>i,</sub> t</i><sub><i>i</i>+1</sub>] via the solution of an initial value problem 500. As part of the formulation of this initial value problem, the initial state value 507 at time point <i>t<sub>i</sub></i> as well as the control inputs 508 over the complete time interval [<i>t<sub>i</sub></i>, <i>t</i><sub><i>i</i>+1</sub>] need to be provided. For this purpose, the sequence of control inputs over the prediction time horizon needs to be parameterized using a finite dimensional representation that is used directly in the optimal control structured NLP that is solved at each control time step 350. In some embodiments, a piecewise constant control parameterization is used in which the control input is a constant value over each time interval independently, i.e., <i>u</i>(<i>t</i>) = <i>u̅<sub>i</sub></i> for t ∈ [<i>t<sub>i</sub></i>, <i>t</i><sub><i>i</i>+1</sub>] 508. Some other embodiments use a higher order control parameterization, e.g., based on a piecewise polynomial or a spline representation over the prediction time horizon.</p>
<p id="p0044" num="0044">In some embodiments, the explicit formulation of the discrete time system dynamics 506 is obtained by applying one or multiple steps of an explicit integration scheme 505 to solve the initial value problem 500, defined by a set of continuous time differential equations <i>ẋ</i>(<i>t</i>) = <i>f</i>(<i>x</i>(<i>t</i>)<i>, u</i>(<i>t</i>)) 503. Examples of such explicit integration schemes are the Adams-Bashforth methods and the family of explicit Runge-Kutta methods. The iterative procedure to solve the resulting constrained NLP then constructs a local linearization of these discretized system<!-- EPO <DP n="23"> --> dynamics 510, based on an approximation of the constraint Jacobian matrix 512 for each interval of the prediction time horizon, and solves the resulting local approximation of the NLP 406. In some embodiments, based on sequential quadratic programming, the linearized discrete time system dynamics 511 for each interval of the prediction time horizon are part of the equality constraints in the Quadratic Program (QP) approximation that is solved in each iteration of the optimization algorithm 406. In other embodiments, based on interior point techniques, the linearized discrete time system dynamics 511 for each interval of the prediction time horizon are part of the linearized system of optimality conditions that is solved in each iteration 406.</p>
<p id="p0045" num="0045"><figref idref="f0010">Fig. 5B</figref> shows a block diagram for obtaining the implicit formulation of the discrete time system dynamics 356-357 as part of the optimal control structured NLP that is solved at each control time step 350. The dynamical model formulation of the system is implicit, because the state value at a certain time point <i>t</i><sub><i>i</i>+1</sub> is defined by the state value 501, the control input 502 and a set of additional intermediate variables 524 that are defined implicitly by these state and control values at the previous time point <i>t<sub>i</sub></i> 516. These intermediate variables <i>K<sub>i</sub></i> are defined implicitly by the set of nonlinear equations 0 = <i>G<sub>i</sub>(x<sub>i</sub>, u<sub>i</sub>, K<sub>i</sub></i>) 517, i.e., the Jacobian of these equations with respect to the intermediate variables <maths id="math0002" num=""><math display="inline"><mfrac><mrow><mo>∂</mo><msub><mi>G</mi><mi>i</mi></msub></mrow><mrow><mo>∂</mo><msub><mi>K</mi><mi>i</mi></msub></mrow></mfrac></math><img id="ib0002" file="imgb0002.tif" wi="8" he="9" img-content="math" img-format="tif" inline="yes"/></maths> (·) is a square matrix that must be nonsingular. In some embodiments, the dynamic model of the system is given originally by a system of continuous time differential equations 504, which describe the states of the system over a certain time interval [<i>t<sub>i</sub></i>, <i>t</i><sub><i>i</i>+1</sub>] via the solution of an initial value problem 500 given the initial state value 507 and the control inputs over this interval 508.</p>
<p id="p0046" num="0046">In some embodiments, this implicit formulation of the discrete time system<!-- EPO <DP n="24"> --> dynamics 516-517 is obtained by applying one or multiple steps of an implicit integration scheme 515 to solve the initial value problem 500, defined by a set of continuous time differential equations 0 = <i>f</i>(<i>ẋ</i>(<i>t</i>)<i>, x</i>(<i>t), u</i>(<i>t</i>)) 504. In some embodiments, this system of differential equations 504 defines the differential state derivatives implicitly and/or it defines algebraic variables based on additional implicit algebraic equations. Examples of implicit integration schemes include the Adams-Moulton methods, the backward differentiation formulas and the family of implicit Runge-Kutta methods.</p>
<p id="p0047" num="0047">The iterative procedure to solve the resulting constrained NLP then constructs a local linearization of these discretized system dynamics 520, based on a local linearization of the continuity equation 521 and of the nonlinear equations that define the intermediate variables 522 for each interval of the prediction time horizon, and solves the resulting local approximation of the NLP 406. This linearization starts from a linearization point that includes the state values 501, the control inputs 502 as well as the current values for the intermediate variables 524. Given the nonlinear equations that implicitly define the intermediate variables 517, the local linearization can be based on an approximation of the constraint Jacobian matrix for this nonlinear system of equations 523.</p>
<p id="p0048" num="0048">In some embodiments, both the linear continuity equation 521 and the linearized system of equations that implicitly defines the intermediate variables 522 for each interval of the prediction time horizon are part of the approximation that is solved in each iteration of the optimization algorithm 406. In some embodiments, the intermediate variables are eliminated numerically from the linearized system of equations based on the invertibility of the constraint Jacobian and its approximation <maths id="math0003" num=""><math display="inline"><msub><mi>C</mi><mi>i</mi></msub><mo>≈</mo><mfrac><mrow><mo>∂</mo><msub><mi>G</mi><mi>i</mi></msub></mrow><mrow><mo>∂</mo><msub><mi>K</mi><mi>i</mi></msub></mrow></mfrac><mfenced><msub><mover accent="true"><mi>x</mi><mo>‾</mo></mover><mi>i</mi></msub><msub><mover accent="true"><mi>u</mi><mo>‾</mo></mover><mi>i</mi></msub><msub><mover accent="true"><mi>K</mi><mo>‾</mo></mover><mi>i</mi></msub></mfenced></math><img id="ib0003" file="imgb0003.tif" wi="38" he="10" img-content="math" img-format="tif" inline="yes"/></maths> 523, resulting in a condensed<!-- EPO <DP n="25"> --> formulation of the linearized discrete time system dynamics of the same form as the linearization for an explicit formulation of the system dynamics 511.</p>
<p id="p0049" num="0049"><figref idref="f0011">Fig. 6A</figref> shows a block diagram of a Quadratic Program (QP) that forms a local approximation 605 of the optimal control structured NLP 600, in case of an explicit formulation of the discrete time system dynamics 353, according to some embodiments based on sequential quadratic programming. The linear equality constraint 603 in the QP subproblem corresponds to the linearized discrete time system dynamics 511 based on an approximation of the constraint Jacobian matrix 512. The initial value condition 602 in the optimal control structured QP is equivalent to the corresponding equality constraint 352 in the NLP. In addition, a local linearization 604 is needed for the inequality constraints 354 in the original NLP formulation, for which one can use either an exact linearization or an approximation of the Jacobian matrix for these inequality constraints.</p>
<p id="p0050" num="0050">The quadratic objective 601 in the optimal control structured QP 605 locally approximates the nonlinear objective 351. As mentioned earlier, the Hessian matrix <i>H<sub>i</sub></i> can be based either on an exact evaluation of the Hessian of the Lagrangian, or using a quasi-Newton type update formula or a Gauss-Newton Hessian approximation for each interval of the prediction time horizon. The vectors that correspond to the constraint evaluations <i>a<sub>i</sub></i> and the gradient evaluations <i>h<sub>i</sub></i> both need to be exact for the QP subproblem 605 to form a local approximation to the NLP 600. In some embodiments, the gradient vector <i>h<sub>i</sub></i> corresponds to an evaluation of the gradient of the Lagrangian for the NLP with respect to the state and control variables. In some other embodiments, the gradient vector <i>h<sub>i</sub></i> corresponds to an evaluation of the gradient of the NLP objective function 351 with respect to the state and control variables, including a gradient correction that depends on the quality of the approximation for the constraint<!-- EPO <DP n="26"> --> Jacobian matrices of the equality and/or inequality constraints in the local QP approximation of the NLP.</p>
<p id="p0051" num="0051"><figref idref="f0012">Fig. 6B</figref> shows a block diagram of a Quadratic Program (QP) that forms a local approximation 610 of the optimal control structured NLP 600, in case of an implicit formulation of the discrete time system dynamics 356-357, according to some embodiments based on sequential quadratic programming. The linear continuity condition 613 in the QP approximation is equivalent to the corresponding equality constraint 357 in the NLP, because of the linear relation between the state values at the next and the previous time point given the values of the intermediate variables. The linear equality constraint 612 in the QP subproblem corresponds to the linearized system of equations 522 based on an approximation of the constraint Jacobian matrix 523, and it forms a local linearization for the nonlinear system of equations 356 in the NLP. The gradient vector <maths id="math0004" num=""><math display="inline"><msubsup><mi>h</mi><mi>i</mi><mi>c</mi></msubsup></math><img id="ib0004" file="imgb0004.tif" wi="6" he="6" img-content="math" img-format="tif" inline="yes"/></maths> in the quadratic objective 611 of the optimal control structured QP 610 depends also on the values of the intermediate variables in the linearization point that is used to construct the local QP approximation. Similar to before, this gradient vector can correspond to the evaluation of the gradient of either the NLP Lagrangian or of the NLP objective, including a gradient correction that depends on the quality of the approximation for the constraint Jacobian matrices of the equality and/or inequality constraints in the local QP approximation 610 of the NLP 600.</p>
<p id="p0052" num="0052"><figref idref="f0013">Fig. 6C</figref> shows a block diagram of a condensing procedure that constructs the condensed QP formulation 615 given the local QP approximation 610 of the optimal control structured NLP based on an implicit formulation of the discrete time system dynamics. The condensing procedure numerically eliminates the intermediate variables from the linearized system of equations 612 in the QP approximation, based on the invertibility of the constraint Jacobian and its<!-- EPO <DP n="27"> --> approximation <maths id="math0005" num=""><math display="inline"><msub><mi>C</mi><mi>i</mi></msub><mo>≈</mo><mfrac><mrow><mo>∂</mo><msub><mi>G</mi><mi>i</mi></msub></mrow><mrow><mo>∂</mo><msub><mi>K</mi><mi>i</mi></msub></mrow></mfrac><mfenced><msub><mover accent="true"><mi>x</mi><mo>‾</mo></mover><mi>i</mi></msub><msub><mover accent="true"><mi>u</mi><mo>‾</mo></mover><mi>i</mi></msub><msub><mover accent="true"><mi>K</mi><mo>‾</mo></mover><mi>i</mi></msub></mfenced></math><img id="ib0005" file="imgb0005.tif" wi="39" he="10" img-content="math" img-format="tif" inline="yes"/></maths> 523. In some embodiments, this numerical condensing procedure can be performed independently and therefore in parallel for each of the time intervals of the prediction horizon. The result of this procedure includes a condensed formulation of the linearized discrete time system dynamics 617 of the same form as the linearization for an explicit formulation of the system dynamics 603, as well as a condensed objective function 616 in the new formulation of the local QP approximation 615. As discussed also further, the numerically eliminated intermediate variables, as well as the Lagrange multipliers corresponding to the linearized constraints 612 in the original QP formulation, can be obtained based on an appropriate expansion procedure and given the optimal solution to the condensed QP approximation 615 of the NLP 600.</p>
<p id="p0053" num="0053"><figref idref="f0014">Fig. 7A</figref> shows a block diagram of an iterative procedure to solve the constrained, optimal control structured, nonlinear program (NLP) 350 at each control time step via the use of successive local approximations 406, using an update formula for the approximations of the constraint Jacobian block matrices 700. Some embodiments are based on sequential quadratic programming (SQP) and they formulate and solve a Quadratic Program (QP) that forms a local approximation 605 of the optimal control structured NLP 600, in case of an explicit formulation of the discrete time system dynamics 353. The linear equality constraint 603 in the QP subproblem corresponds to the linearized discrete time system dynamics 511 based on an approximation of the constraint Jacobian matrix 512.</p>
<p id="p0054" num="0054">Some embodiments are based on the realization that the update to the constraint Jacobian block matrices 700 can be performed independently for each of the intervals in the prediction time horizon. In some embodiments of the invention,<!-- EPO <DP n="28"> --> the update corresponds to a block-wise quasi-Newton type update formula 703 in which the update to each of the block matrices individually is of rank one. One example of the block-wise quasi-Newton type update formula 703 is based on Broyden's method, using either the good or the bad Broyden's method or any other variant of this class of quasi-Newton methods with at least one evaluation of the discretized dynamics of the system. Another example is based on a block-wise variant of the two-sided rank-one (TR1) update formula, with at least one evaluation of the discretized dynamics of the system and at least one evaluation of an adjoint directional derivative of the discretized dynamics of the system, and where each of the constraint Jacobian block matrices is updated using the two-sided rank-one (TR1) update scheme. Some embodiments are based on the forward variant of the TR1 update formula that satisfies the direct secant condition exactly and approximately satisfies the adjoint secant condition. Other embodiments are based on the adjoint variant of the TR1 update formula that satisfies the adjoint secant condition exactly and approximately satisfies the direct secant condition. And some other embodiments decide between the forward or adjoint update formula for each of the block matrices individually, corresponding to a specific interval in the prediction time horizon, depending on a certain heuristic rule.</p>
<p id="p0055" num="0055"><figref idref="f0015">Fig. 7B</figref> shows a schematic of the quasi-Newton type update scheme for the block-structured constraint Jacobian matrix 700, based on the block-wise quasi-Newton type method in which each of the block matrices is updated individually using a rank-one update formula 703. Each of the block matrices in the block-structured constraint Jacobian matrix corresponds to a specific linear equality constraint 603 in the local QP approximation of the optimal control structured NLP. The block matrices on the block diagonal correspond to the matrices <i>A<sub>i</sub></i> in the linear equality constraint 603 and each of the block matrices on the upper block diagonal of the constraint Jacobian matrix, corresponding to the linear coupling<!-- EPO <DP n="29"> --> between the state variables at subsequent time intervals of the prediction horizon 701, is equal to minus the identity matrix 702.</p>
<p id="p0056" num="0056"><figref idref="f0016">Fig. 7C</figref> shows a pseudo code of a real-time implementation of a nonlinear MPC controller 110, based on an explicit formulation of the discrete time system dynamics, via successive local QP approximations 605 and a block-structured quasi-Newton type update scheme 703 for the constraint Jacobian matrix 700. The inputs to the algorithm include the current values for the primal state and control variables, the dual Lagrange multipliers and the current approximations of the constraint Jacobian block matrices for each interval of the prediction time horizon 711. Similarly, the algorithm finally outputs the updated values for each of these variables 713. After obtaining the new state estimate <i>x̂</i><sub>0</sub> from the system 121, the local QP approximation 605 can be solved 406 such that the primal and dual variables can be updated 712 and the new control input values can be applied to the system 111, followed by the block-wise quasi-Newton type update formula for the constraint Jacobian block matrices 703. In some embodiments of the invention, the update for each of the block matrices is based on the two-sided rank-one (TR1) formula, resulting in a real-time iteration implementation of nonlinear MPC using block-TRl based Jacobian updates 710.</p>
<p id="p0057" num="0057"><figref idref="f0017">Fig. 8A</figref> shows a block diagram of an iterative procedure to solve the constrained, optimal control structured, nonlinear program (NLP) 350 at each control time step via the use of successive local approximations 406, using an update formula for the approximations of the intermediate condensing matrices 805 resulting in an update for the approximations of the constraint Jacobian block matrices 800. Some embodiments are based on a condensing procedure that constructs the condensed QP formulation 615 given the local QP approximation 610 of the optimal control structured NLP based on an implicit formulation of the<!-- EPO <DP n="30"> --> discrete time system dynamics. The result of this procedure includes a condensed formulation of the linearized discrete time system dynamics 617 of the same form as the linearization for an explicit formulation of the system dynamics 603, as well as a condensed objective function 616 in the new formulation of the local QP approximation 615.</p>
<p id="p0058" num="0058">Some embodiments are based on the realization that the update to the intermediate condensing matrices 806-807, the condensing procedure to numerically eliminate the intermediate variables from the linearized equations of the implicit formulation for the discrete time system dynamics 617 and the resulting update to the constraint Jacobian block matrices 803 can be performed independently for each of the intervals in the prediction time horizon. The update for the approximations of the constraint Jacobian matrices of the equations that implicitly define the intermediate variables 523 corresponds to a block-wise quasi-Newton type update formula 806 in which the update to each of the block matrices individually can be of rank one. Examples of such a quasi-Newton type update scheme include different variants of Broyden's method and different variants of the two-sided rank-one (TR1) update formula. In some embodiments of the invention, the inverse of the Jacobian matrix approximation <maths id="math0006" num=""><math display="inline"><msub><mi>C</mi><mi>i</mi></msub><mo>≈</mo><mfrac><mrow><mo>∂</mo><msub><mi>G</mi><mi>i</mi></msub></mrow><mrow><mo>∂</mo><msub><mi>K</mi><mi>i</mi></msub></mrow></mfrac><mfenced><msub><mover accent="true"><mi>x</mi><mo>‾</mo></mover><mi>i</mi></msub><msub><mover accent="true"><mi>u</mi><mo>‾</mo></mover><mi>i</mi></msub><msub><mover accent="true"><mi>K</mi><mo>‾</mo></mover><mi>i</mi></msub></mfenced></math><img id="ib0006" file="imgb0006.tif" wi="39" he="10" img-content="math" img-format="tif" inline="yes"/></maths> can additionally be stored and updated from one iteration to the next 807 as part of the intermediate condensing matrices, depending on the quasi-Newton type update formula for the constraint Jacobian matrices and using the Sherman-Morrison formula that can be used to compute the inverse of a rank-one update to a matrix. Some embodiments are based on the realization that the condensed Jacobian block matrices can be updated directly using a block-wise rank-one update formula 803, based on the block-wise rank-one update formulas for the intermediate condensing matrices 806-807.<!-- EPO <DP n="31"> --></p>
<p id="p0059" num="0059"><figref idref="f0018">Fig. 8B</figref> shows a schematic of the quasi-Newton type update scheme for the block-structured constraint Jacobian matrix 800, based on the block-wise quasi-Newton type method in which each of the block matrices is updated individually using a rank-one update formula 803. Each of the block matrices in the block-structured constraint Jacobian matrix corresponds to a specific linear equality constraint 617 in the local QP approximation of the optimal control structured NLP 615. The block matrices on the block diagonal correspond to the condensed Jacobian matrices [<i>I</i>,<i>O</i>] ― <i>B<sub>i</sub>E<sub>i</sub>,</i> where <maths id="math0007" num=""><math display="inline"><msub><mi>E</mi><mi>i</mi></msub><mo>=</mo><msubsup><mi>C</mi><mi>i</mi><mrow><mo>−</mo><mn>1</mn></mrow></msubsup><msub><mi>D</mi><mi>i</mi></msub></math><img id="ib0007" file="imgb0007.tif" wi="24" he="7" img-content="math" img-format="tif" inline="yes"/></maths> in the condensed linear equality constraint 617. And each of the block matrices on the upper block diagonal of the constraint Jacobian matrix, corresponding to the linear coupling between the state variables at subsequent time intervals of the prediction horizon 701, is equal to minus the identity matrix 702.</p>
<p id="p0060" num="0060"><figref idref="f0019">Fig. 8C</figref> shows a pseudo code of a real-time implementation of a nonlinear MPC controller 110, based on an implicit formulation of the discrete time system dynamics, via successive local QP approximations 615 and a block-structured quasi-Newton type update scheme 805 for the constraint Jacobian matrix 800. The inputs to the algorithm include the current values for the primal state, control and intermediate variables, the dual Lagrange multipliers and the current approximations of the intermediate condensing matrices and of the constraint Jacobian block matrices for each interval of the prediction time horizon 811. Similarly, the algorithm finally outputs the updated values for each of these variables 813. After obtaining the new state estimate <i>x̂</i><sub>0</sub> from the system 121, the local QP approximation 615 can be solved 406 such that the primal and dual variables can be updated 712 and the new control input values can be applied to the system 111, followed by the block-wise quasi-Newton type update formula for the intermediate condensing and the constraint Jacobian block matrices 805. In<!-- EPO <DP n="32"> --> some embodiments of the invention, the update for each of the block matrices is based on the two-sided rank-one (TR1) formula and the implicit formulation of the discrete time system dynamics is based on direct collocation, resulting in a real-time iteration implementation of nonlinear MPC using lifted direct collocation with block-TRl based Jacobian updates 810.</p>
<p id="p0061" num="0061">The numerically eliminated intermediate variables 808, as well as the Lagrange multipliers 809 corresponding to the linearized constraints 612 in the original QP formulation, can be obtained based on an appropriate expansion procedure and given the optimal solution 406 to the condensed QP approximation 615. In some embodiments of the invention, the computational operations in this algorithm, for which the pseudo code is depicted in <figref idref="f0019">Fig. 8C</figref>, can be restricted to matrix-vector multiplications based on the intermediate condensing matrices and to adjoint derivative evaluations. In some embodiments, the directional derivative evaluation for the expansion step of the Lagrange multipliers 809 can be carried out based on the forward or backward mode of algorithmic differentiation (AD). These embodiments perform the numerical elimination or condensing of the implicitly defined intermediate variables, based on the block-wise rank-one update formula, without any iterative solution procedure and without any matrix-matrix multiplications or matrix factorizations. Instead, these embodiments only require matrix-vector operations and one evaluation of the nonlinear equations and one evaluation of an adjoint directional derivative.</p>
<p id="p0062" num="0062"><figref idref="f0020">Fig. 9A</figref> shows a block diagram of an initialization procedure for the state and control values and for the constraint Jacobian matrices in the nonlinear MPC controller, based on the iterative solution procedure with the block-wise quasi-Newton type update formula for the explicit formulation of the discrete time system dynamics as described in <figref idref="f0014 f0015 f0016">Fig. 7</figref>. The solution values from the previous<!-- EPO <DP n="33"> --> control time step can be read from memory 900 in order to provide the modified values 910 as an initial solution guess for the iterative solution procedure 711. In some embodiments of the invention, the sequence of solution values from the previous control time step 900 can be used directly as an initial solution guess for the iterative solution procedure 711. In some other embodiments, the sequence of solution values that is read from memory 900, is first to be shifted forward in the prediction horizon by one time step 905, based on a certain value for the final state 906, the control value 907 and the constraint Jacobian block matrix 908. These final state, control and constraint Jacobian values can correspond either to some fixed value that is computed offline before executing the system based on the nonlinear MPC controller, or they can be computed from the stored solution in the previous control time step 900.</p>
<p id="p0063" num="0063"><figref idref="f0021">Fig. 9B</figref> shows a block diagram of an initialization procedure for the state and control values and for the intermediate condensing and constraint Jacobian matrices in the nonlinear MPC controller, based on the iterative solution procedure with the block-wise quasi-Newton type update formula for the implicit formulation of the discrete time system dynamics as described in <figref idref="f0017 f0018 f0019">Fig. 8</figref>. The solution values from the previous control time step can be read from memory 920 in order to provide the modified values 930 as an initial solution guess for the iterative solution procedure 811. In some embodiments of the invention, the sequence of solution values from the previous control time step 920 can be used directly as an initial solution guess for the iterative solution procedure 811. In some other embodiments, the sequence of solution values that is read from memory 920, is first to be shifted forward in the prediction horizon by one time step 925, based on a value for the final state 906, the control value 907, the final condensing block matrices 926 and the final constraint Jacobian block matrix 927. These final state, control, intermediate condensing and constraint Jacobian values can correspond<!-- EPO <DP n="34"> --> either to some fixed value that is computed offline before executing the system based on the nonlinear MPC controller, or they can be computed from the stored solution in the previous control time step 920.</p>
<p id="p0064" num="0064"><figref idref="f0022">Fig. 10A</figref> shows a block diagram of an iterative procedure to solve the constrained NLP at each control time step via the use of successive local approximations and a condensing procedure to numerically eliminate some or all of the variables that are defined by linearized equality constraints in the local approximation of the NLP 1000. One example of the condensing procedure is the numerical elimination of the intermediate variables from the linearized system of equations that implicitly defines these intermediate variables 522 for each interval of the prediction time horizon, based on an implicit formulation of the discrete time system dynamics, that results in the condensed QP formulation 615 given the local QP approximation 610 of the optimal control structured NLP. In some embodiments of the invention, the objective and/or the constraint functions of the optimal control structured NLP depend on the variables that are numerically eliminated such that the condensed Hessian matrix and/or the condensed Jacobian matrices for the remaining equality and/or inequality constraints need to be computed in order to construct the local approximation problem 1005.</p>
<p id="p0065" num="0065">Some embodiments are based on the factorization or the computation of the inverse of the condensed Hessian matrix in order to efficiently solve the local approximation of the nonlinear OCP at each control time step. Some embodiments are based on the realization that this matrix factorization or matrix inverse can be computed based on a low-rank update from one iteration to the next 1005, given a low-rank update to the approximation of the constraint Jacobian matrix 421. Note that a block-wise rank-one update to the constraint Jacobian matrix is of low rank in the case that the number of block matrices that are updated is relatively small.<!-- EPO <DP n="35"> --> Some other embodiments are based on a low-rank update to the approximation of the complete constraint Jacobian matrix, which is generally a dense matrix in case of a global state and control parameterization over the complete prediction time horizon. One example of the latter includes the use of a pseudospectral method to solve the optimal control problem at each control time step, e.g., based on a global polynomial representation using a Gaussian quadrature rule. In particular, some embodiments use a rank-two symmetric update formula to update the condensed Hessian matrix 1005 and its factorization or matrix inverse, based on a rank-one update to the constraint Jacobian matrix 421.</p>
<p id="p0066" num="0066"><figref idref="f0023">Fig. 10B</figref> shows a block diagram of an iterative procedure to solve the constrained NLP at each control time step via the use of successive local approximations and a numerical condensing procedure 1000, in which a low-rank update to the approximation of the Hessian block matrices 1010 in combination with a low-rank update to the approximation of the constraint Jacobian matrices 421 is used for each time interval of the prediction horizon. In particular, some embodiments use a rank-three symmetric update formula to update the factorization or matrix inverse of the condensed Hessian matrix 1015 based on a rank-one update to the constraint Jacobian matrix 421 and a quasi-Newton type rank-one update formula for the Hessian approximation matrix 1010. Examples of the quasi-Newton type update formula for the Hessian approximation include the Broyden-Fletcher-Goldfarb-Shanno (BFGS) method or the symmetric rank-one (SRI) update formula.</p>
<p id="p0067" num="0067"><figref idref="f0024">Fig. 11A</figref> shows a block diagram of a symmetric rank-two update formula to compute the condensed Hessian matrix 1105 given a rank-one update to the constraint Jacobian matrix 1100, according to some embodiments of the invention. Based on this symmetric rank-two update of the condensed Hessian matrix 1105,<!-- EPO <DP n="36"> --> some embodiments additionally compute a rank-two update to the factorization of the condensed Hessian matrix. Examples of such a matrix factorization, for which low-rank factorization update techniques exist, include the Cholesky decomposition, LDL decomposition, QR decomposition or the LU decomposition. Based on the symmetric rank-two update of the condensed Hessian matrix 1105, some embodiments additionally compute a symmetric rank-two update to the inverse of the condensed Hessian matrix by using the Sherman-Morrison formula.</p>
<p id="p0068" num="0068"><figref idref="f0025">Fig. 11B</figref> shows a block diagram of a symmetric rank-three update formula to compute the condensed Hessian matrix 1115 given a rank-one update to the constraint Jacobian matrix 1100 and given a rank-one update to the symmetric Hessian matrix approximation 1110, according to some embodiments of the invention. Based on this symmetric rank-three update to the condensed Hessian matrix 1115, some embodiments additionally compute a rank-three update to the factorization or the inverse of the condensed Hessian matrix.</p>
<p id="p0069" num="0069"><figref idref="f0026">Figure 12</figref> shows a schematic of a vehicle 1201 including a predictive controller 1202 employing principles of some embodiments of the invention. As used herein, the vehicle 1201 can be any type of wheeled vehicle, such as a passenger car, bus, or rover. Also, the vehicle 1201 can be an autonomous or semi-autonomous vehicle. For example, some embodiments control the motion of the vehicle 1201. Examples of the motion include lateral motion of the vehicle controlled by a steering system 1203 of the vehicle 1201. In one embodiment, the steering system 1203 is controlled by the controller 1202. Additionally, or alternatively, the steering system 1203 can be controlled by a driver of the vehicle 1201.</p>
<p id="p0070" num="0070">The vehicle can also include an engine 1206, which can be controlled by the<!-- EPO <DP n="37"> --> controller 1202 or by other components of the vehicle 1201. The vehicle can also include one or more sensors 1204 to sense the surrounding environment. Examples of the sensors 1204 include distance range finders, radars, lidars, and cameras. The vehicle 1201 can also include one or more sensors 1205 to sense its current motion quantities and internal status. Examples of the sensors 1205 include global positioning system (GPS), accelerometers, inertial measurement units, gyroscopes, shaft rotational sensors, torque sensors, deflection sensors, pressure sensor, and flow sensors. The sensors provide information to the controller 1202. The vehicle can be equipped with a transceiver 1206 enabling communication capabilities of the controller 1202 through wired or wireless communication channels.</p>
<p id="p0071" num="0071"><figref idref="f0027">Fig. 13</figref> shows a schematic of interaction between the predictive controller 1202 and the controllers 1300 of the vehicle 1201 according to some embodiments. For example, in some embodiments, the controllers 1300 of the vehicle 1201 are steering 1310 and brake/throttle controllers 1320 that control rotation and acceleration of the vehicle 1300. In such a case, the predictive controller 1202 outputs control inputs to the controllers 1310 and 1320 to control the state of the vehicle. The controllers 1300 can also include high-level controllers, e.g., a lane-keeping assist controller 1330 that further process the control inputs of the predictive controller 1202. In both cases, the controllers 1300 maps use the outputs of the predictive controller 1202 to control at least one actuator of the vehicle, such as the steering wheel and/or the brakes of the vehicle, in order to control the motion of the vehicle.</p>
<p id="p0072" num="0072">The above-described embodiments of the present invention can be implemented in any of numerous ways. For example, the embodiments may be implemented using hardware, software or a combination thereof. When implemented in software, the software code can be executed on any suitable<!-- EPO <DP n="38"> --> processor or collection of processors, whether provided in a single computer or distributed among multiple computers. Such processors may be implemented as integrated circuits, with one or more processors in an integrated circuit component. Though, a processor may be implemented using circuitry in any suitable format.</p>
<p id="p0073" num="0073">Also, the various methods or processes outlined herein may be coded as software that is executable on one or more processors that employ any one of a variety of operating systems or platforms. Additionally, such software may be written using any of a number of suitable programming languages and/or programming or scripting tools, and also may be compiled as executable machine language code or intermediate code that is executed on a framework or virtual machine. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments.</p>
<p id="p0074" num="0074">Also, the embodiments of the invention may be embodied as a method, of which an example has been provided. The acts performed as part of the method may be ordered in any suitable way. Accordingly, embodiments may be constructed in which acts are performed in an order different than illustrated, which may include performing some acts concurrently, even though shown as sequential acts in illustrative embodiments.</p>
</description>
<claims id="claims01" lang="en"><!-- EPO <DP n="39"> -->
<claim id="c-en-01-0001" num="0001">
<claim-text>A control system for controlling an operation of a system (120) with continuous-time nonlinear dynamics subject to constraints including equality and inequality constraints on state and control variables of the system (120), the control system comprising:
<claim-text>an estimator (130) to estimate a current state of the system (120) using measurements of the operation of the system (120);</claim-text>
<claim-text>a memory (202) to store intermediate condensing matrices and an approximation of a constraint Jacobian matrix determined for each time interval in a control horizon, such that the intermediate condensing matrices and the approximation of the constraint Jacobian matrix have a block-bidiagonal structure;</claim-text>
<claim-text>a processor (201) to iteratively solve, at each control step, an approximation of a constrained nonlinear optimization problem to produce a control solution, wherein the approximation includes a linearization of the nonlinear dynamics of the system (120) discretized by time intervals in the control horizon and represented using the approximation of the constraint Jacobian matrix for each time interval of the control horizon, wherein, at each control step, the processor (201) is configured to
<claim-text>retrieve, from the memory (202), the intermediate condensing matrices and the approximation of the constraint Jacobian matrix determined for each time interval;</claim-text>
<claim-text>block-wise update the approximation of the constraint Jacobian matrix and the intermediate condensing matrices using an evaluation of one or combination of the discretized dynamics of the system (120) and a directional derivative of the discretized dynamics of the system (120), wherein each block in the constraint Jacobian matrix and the intermediate condensing matrices represents one time interval in the control horizon;<!-- EPO <DP n="40"> --></claim-text>
<claim-text>solve the approximation of the nonlinear optimization problem using the updated approximation of the constraint Jacobian matrix; and</claim-text>
<claim-text>update the memory (202) with the updated approximation of the constraint Jacobian matrix and the updated intermediate condensing matrices; and</claim-text></claim-text>
<claim-text>a controller (203, 1202) to control the system (120) using the control solution.</claim-text></claim-text></claim>
<claim id="c-en-01-0002" num="0002">
<claim-text>The control system of claim 1, wherein the approximation of the nonlinear optimization problem includes a gradient correction that depends on a difference between the constraint Jacobian approximation and an exact constraint Jacobian matrix of the discretized dynamics of the system (120).</claim-text></claim>
<claim id="c-en-01-0003" num="0003">
<claim-text>The control system of claim 2, wherein the approximation of the nonlinear optimization problem is a quadratic program (QP).</claim-text></claim>
<claim id="c-en-01-0004" num="0004">
<claim-text>The control system of claim 1, wherein the block-wise update of approximation of the constraint Jacobian matrix and the intermediate condensing matrices is a block-wise rank-one update and wherein the rank-one update is defined by one or combination of an evaluation of the discretized dynamics of the system (120) and at least one evaluation of a directional derivative of the discretized dynamics of the system (120).</claim-text></claim>
<claim id="c-en-01-0005" num="0005">
<claim-text>The control system of claim 1, wherein the discretized dynamics of the system (120) are based on an explicit integration to discretize a set of continuous-time nonlinear differential equations and wherein the approximation of the constraint Jacobian matrix is a Jacobian approximation of an explicit integration applied to the continuous-time dynamics in each time interval of the control horizon.<!-- EPO <DP n="41"> --></claim-text></claim>
<claim id="c-en-01-0006" num="0006">
<claim-text>The control system of claim 1, wherein the discretized dynamics of the system (120) are based on an implicit integration applied to the continuous-time system dynamics in each time interval of the control horizon, wherein the condensing matrices are function of Jacobian of equations including intermediate variables defined by an implicit system of nonlinear equations of the continuous-time nonlinear dynamics, and wherein the approximation of the constraint Jacobian matrix represents a combined system of the discretized dynamics and the implicit system of nonlinear equations for each time interval of the control horizon.</claim-text></claim>
<claim id="c-en-01-0007" num="0007">
<claim-text>The control system of claim 6, wherein the processor (201) numerically eliminates the intermediate variables from the approximation of the nonlinear optimization problem forming a condensed approximation of the nonlinear optimization problem with a block-wise rank-one update of the constraint Jacobian approximations.</claim-text></claim>
<claim id="c-en-01-0008" num="0008">
<claim-text>The control system of claim 1, wherein the block-wise update is a rank-one update with at least one evaluation of the discretized dynamics of the system (120).</claim-text></claim>
<claim id="c-en-01-0009" num="0009">
<claim-text>The control system of claim 1, wherein the block-wise update is a two-sided rank-one update with at least one evaluation of the discretized dynamics of the system (120) and at least one evaluation of an adjoint directional derivative of the discretized dynamics of the system (120).</claim-text></claim>
<claim id="c-en-01-0010" num="0010">
<claim-text>The control system of claim 1, wherein the processor (201) computes a low-rank update of a factorization of a condensed Hessian of the approximation of the nonlinear optimization problem in response to the block-wise update of the<!-- EPO <DP n="42"> --> approximation of the constraint Jacobian matrix and the intermediate condensing matrices.</claim-text></claim>
<claim id="c-en-01-0011" num="0011">
<claim-text>The control system of claim 1, wherein the processor (201) computes a symmetric rank-two update of a factorization of a condensed Hessian of the approximation of the nonlinear optimization problem in response to the block-wise update of the approximation of the constraint Jacobian matrix and the intermediate condensing matrices.</claim-text></claim>
<claim id="c-en-01-0012" num="0012">
<claim-text>The control system of claim 1, wherein the processor (201) computes a symmetric rank-three update of a factorization of a condensed Hessian of the approximation of the nonlinear optimization problem in response to the block-wise update of the approximation of the constraint Jacobian matrix and the intermediate condensing matrices, and in response to a rank-one update of an approximation of a Hessian matrix.</claim-text></claim>
<claim id="c-en-01-0013" num="0013">
<claim-text>The control system of claim 1, wherein the system (120) is a vehicle (1201), and wherein the controller (203, 1202) determines an input to the vehicle (1201) based on the control solution, wherein the input to the vehicle (1201) includes one or a combination of an acceleration of the vehicle (1201), a torque of a motor of the vehicle (1201), and a steering angle.</claim-text></claim>
<claim id="c-en-01-0014" num="0014">
<claim-text>A method for controlling an operation of a system (120) with continuous-time nonlinear dynamics subject to constraints including equality and inequality constraints on state and control variables of the system (120), wherein the method uses a processor (201) coupled to a memory (202) storing intermediate condensing matrices and an approximation of a constraint Jacobian matrix determined for each time interval in a control horizon, such that the intermediate condensing matrices<!-- EPO <DP n="43"> --> and the approximation of the constraint Jacobian matrix have a block-bidiagonal structure, wherein the processor (201) is coupled with stored instructions implementing the method, wherein the instructions, when executed by the processor (201) carry out at least some steps of the method, comprising:
<claim-text>estimating a current state of the system (120) using measurements of the operation of the system (120);</claim-text>
<claim-text>iteratively solving, at each control step, an approximation of a constrained nonlinear optimization problem to produce a control solution, wherein the approximation includes a linearization of the nonlinear dynamics of the system (120) discretized by time intervals in the control horizon and represented using the approximation of the constraint Jacobian matrix for each time interval of the control horizon, wherein, an iteration of the solving comprises
<claim-text>retrieving, from the memory (202), the intermediate condensing matrices and the approximation of the constraint Jacobian matrix determined for each time interval;</claim-text>
<claim-text>block-wise updating the approximation of the constraint Jacobian matrix and the intermediate condensing matrices using an evaluation of one or combination of the discretized dynamics of the system (120) and a directional derivative of the discretized dynamics of the system (120), wherein each block in the constraint Jacobian matrix and the intermediate condensing matrices represents one time interval in the control horizon;</claim-text>
<claim-text>solving the approximation of the nonlinear optimization problem using the updated approximation of the constraint Jacobian matrix; and</claim-text>
<claim-text>updating the memory (202) with the updated approximation of the constraint Jacobian matrix and the updated intermediate condensing matrices; and</claim-text></claim-text>
<claim-text>controlling the system (120) using the control solution.</claim-text></claim-text></claim>
<claim id="c-en-01-0015" num="0015">
<claim-text><!-- EPO <DP n="44"> --> A non-transitory computer readable storage medium with embodied thereon a program executable by a processor (201), the program comprising instructions to cause the control system of claim 1 to perform a method, the method comprising:
<claim-text>estimating a current state of the system (120) using measurements of the operation of the system (120);</claim-text>
<claim-text>iteratively solving, at each control step, an approximation of a constrained nonlinear optimization problem to produce a control solution, wherein the approximation includes a linearization of the nonlinear dynamics of the system (120) discretized by time intervals in the control horizon and represented using the approximation of the constraint Jacobian matrix for each time interval of the control horizon, wherein, an iteration of the solving comprises
<claim-text>retrieving intermediate condensing matrices and an approximation of a constraint Jacobian matrix determined for each time interval in a control horizon, such that the intermediate condensing matrices and the approximation of the constraint Jacobian matrix have a block-bidiagonal structure;</claim-text>
<claim-text>block-wise updating the approximation of the constraint Jacobian matrix and the intermediate condensing matrices using an evaluation of one or combination of the discretized dynamics of the system (120) and a directional derivative of the discretized dynamics of the system (120), wherein each block in the constraint Jacobian matrix and the intermediate condensing matrices represents one time interval in the control horizon; and</claim-text>
<claim-text>solving the approximation of the nonlinear optimization problem using the updated approximation of the constraint Jacobian matrix; and</claim-text></claim-text>
<claim-text>updating the memory (202) with the updated approximation of the constraint Jacobian matrix and the updated intermediate condensing matrices; and</claim-text>
<claim-text>controlling the system (120) using the control solution.</claim-text></claim-text></claim>
</claims>
<claims id="claims02" lang="de"><!-- EPO <DP n="45"> -->
<claim id="c-de-01-0001" num="0001">
<claim-text>Steuerungssystem zum Steuern eines Betriebs eines Systems (120) mit zeitkontinuierlichen nichtlinearen Dynamiken, das Einschränkungen unterliegt, umfassend Gleichheits- und Ungleichheits-Einschränkungen für Zustands- und Steuervariablen des Systems (120), wobei das Steuerungssystem umfasst:
<claim-text>einen Schätzer (130), um einen aktuellen Zustand des Systems (120) unter Verwendung von Messungen des Betriebs des Systems (120) zu schätzen;</claim-text>
<claim-text>einen Speicher (202), um Zwischenkondensationsmatrizen und eine Näherung einer Einschränkungs-Jacobi-Matrix, die für jedes Zeitintervall in einem Steuerungshorizont bestimmt ist, zu speichern, so dass die Zwischenkondensationsmatrizen und die Näherung der Einschränkungs-Jacobi-Matrix eine Block-Bidiagonal-Struktur haben;</claim-text>
<claim-text>einen Prozessor (201), um bei jedem Steuerungsschritt eine Näherung eines eingeschränkten nichtlinearen Optimierungsproblems zu lösen, um eine Steuerungslösung zu erzeugen, wobei die Näherung eine Linearisierung der nichtlinearen Dynamiken des Systems (120) enthält, diskretisiert durch Zeitintervalle in dem Steuerungshorizont und dargestellt unter Verwendung der Näherung der Einschränkungs-Jacobi-Matrix für jedes Zeitintervall des Steuerungshorizonts, wobei der Prozessor (201) bei jedem Steuerungsschritt eingerichtet ist:
<claim-text>aus dem Speicher (202) die für jedes Zeitintervall bestimmten Zwischenkondensationsmatrizen und die Näherung der Einschränkungs-Jacob-Matrix abzurufen;</claim-text>
<claim-text>die Näherung der Einschränkungs-Jacobi-Matrix und der Zwischenkondensationsmatrizen blockweise zu aktualisieren unter Verwendung einer Auswertung einer oder einer Kombination aus den diskretisierten Dynamiken des Systems (120) und einer Richtungsableitung der diskretisierten Dynamiken des Systems (120), wobei jeder<!-- EPO <DP n="46"> --> Block in der Einschränkungs-Jacobi-Matrix und den Zwischenkondensationsmatrizen ein Zeitintervall in dem Steuerungshorizont darstellt;</claim-text>
<claim-text>die Näherung des nichtlinearen Optimierungsproblems unter Verwendung der aktualisierten Näherung der Einschränkungs-Jacob-Matrix zu lösen; und</claim-text>
<claim-text>den Speicher (202) mit der aktualisierten Näherung der Einschränkungs-Jacob-Matrix und den aktualisierten Zwischenkondensationsmatrizen zu aktualisieren; und</claim-text></claim-text>
<claim-text>eine Steuereinheit (203, 1202), um das System (120) unter Verwendung der Steuerungslösung zu steuern.</claim-text></claim-text></claim>
<claim id="c-de-01-0002" num="0002">
<claim-text>Steuersystem nach Anspruch 1, wobei die Näherung des nichtlinearen Optimierungsproblems eine Gradientenkorrektur enthält, die von einer Differenz zwischen der Einschränkungs-Jacobi-Näherung und einer exakten Einschränkungs-Jacobi-Matrix der diskretisierten Dynamiken des Systems (120) abhängig ist.</claim-text></claim>
<claim id="c-de-01-0003" num="0003">
<claim-text>Steuerungssystem nach Anspruch 2, wobei die Näherung des nichtlinearen Optimierungsproblems ein quadratisches Programm (QP) ist.</claim-text></claim>
<claim id="c-de-01-0004" num="0004">
<claim-text>Steuerungssystem nach Anspruch 1, wobei die blockweise Aktualisierung der Näherung der Einschränkungs-Jacobi-Matrix und der Zwischenkondensationsmatrizen eine blockweise Rang-Eins-Aktualisierung ist, und wobei die Rang-Eins-Aktualisierung durch eine oder eine Kombination aus einer Auswertung der diskretisierten Dynamiken des Systems (120) und zumindest einer Auswertung einer Richtungsableitung der diskretisierten Dynamiken des Systems (120) definiert ist.</claim-text></claim>
<claim id="c-de-01-0005" num="0005">
<claim-text>Steuerungssystem nach Anspruch 1, wobei die diskretisierten Dynamiken des Systems (120) auf einer expliziten Integration basieren, um eine Menge an zeitkontinuierlichen nichtlinearen Differentialgleichungen zu diskretisieren, und wobei die Näherung der Einschränkungs-Jacobi-Matrix eine Jacobi-Näherung einer expliziten Integration ist, die auf die zeitkontinuierlichen Dynamiken in jedem Zeitintervall des Steuerungshorizonts angewendet wird.<!-- EPO <DP n="47"> --></claim-text></claim>
<claim id="c-de-01-0006" num="0006">
<claim-text>Steuerungssystem nach Anspruch 1, wobei die diskretisierten Dynamiken des Systems (120) auf einer impliziten Integration basieren, die auf die zeitkontinuierlichen Systemdynamiken in jedem Zeitintervall des Steuerungshorizonts angewandt wird, wobei die Kondensationsmatrizen eine Funktion der Jacobi von Gleichungen sind, die Zwischenvariablen enthalten, die durch ein implizites System nichtlinearer Gleichungen der zeitkontinuierlichen nichtlinearen Dynamiken definiert sind, und wobei die Näherung der Einschränkungs-Jacobi-Matrix ein kombiniertes System der diskretisierten Dynamiken und dem impliziten System nichtlinearer Gleichungen für jedes Zeitintervall des Steuerungshorizonts darstellt.</claim-text></claim>
<claim id="c-de-01-0007" num="0007">
<claim-text>Steuerungssystem nach Anspruch 6, wobei der Prozessor (201) die Zwischenvariablen aus der Näherung des nichtlinearen Optimierungsproblems numerisch eliminiert um eine kondensierte Näherung des nichtlinearen Optimierungsproblems mit einer blockweisen Rang-Eins-Aktualisierung der Einschränkungs-Jacobi-Näherungen bildet.</claim-text></claim>
<claim id="c-de-01-0008" num="0008">
<claim-text>Steuerungssystem nach Anspruch 1, wobei die blockweise Aktualisierung eine Rang-Eins-Aktualisierung mit zumindest einer Auswertung der diskretisierten Dynamiken des Systems (120) ist.</claim-text></claim>
<claim id="c-de-01-0009" num="0009">
<claim-text>Steuerungssystem nach Anspruch 1, wobei die blockweise Aktualisierung eine zweiseitige Rang-Eins-Aktualisierung ist mit zumindest einer Auswertung der diskretisierten Dynamiken des Systems (120) und zumindest einer Auswertung einer adjungierten Richtungsableitung der diskretisierten Dynamiken des Systems (120).</claim-text></claim>
<claim id="c-de-01-0010" num="0010">
<claim-text>Steuerungssystem nach Anspruch 1, wobei der Prozessor (201) eine Niedrig-Rang-Aktualisierung einer Faktorisierung einer kondensierten Hesse-Matrix der Näherung des nichtlinearen Optimierungsproblems in Antwort auf die blockweise Aktualisierung der Näherung der Einschränkungs-Jacobi-Matrix und der Zwischenkondensationsmatrizen berechnet.<!-- EPO <DP n="48"> --></claim-text></claim>
<claim id="c-de-01-0011" num="0011">
<claim-text>Steuerungssystem nach Anspruch 1, wobei der Prozessor (201) eine symmetrische Rang-Zwei-Aktualisierung einer Faktorisierung einer kondensierten Hesse-Matrix der Näherung des nichtlinearen Optimierungsproblems in Antwort auf die blockweise Aktualisierung der Näherung der Einschränkungs-Jacobi-Matrix und der Zwischenkondensationsmatrizen berechnet.</claim-text></claim>
<claim id="c-de-01-0012" num="0012">
<claim-text>Steuerungssystem nach Anspruch 1, wobei der Prozessor (201) eine symmetrische Rang-Drei-Aktualisierung einer Faktorisierung einer kondensierten Hesse-Matrix der Näherung des nichtlinearen Optimierungsproblems in Antwort auf die blockweise Aktualisierung der Näherung der Einschränkungs-Jacobi-Matrix und der Zwischenkondensationsmatrizen und in Antwort auf eine Rang-Eins-Aktualisierung einer Näherung einer Hesse-Matrix berechnet.</claim-text></claim>
<claim id="c-de-01-0013" num="0013">
<claim-text>Steuerungssystem nach Anspruch 1, wobei das System (120) ein Fahrzeug (1201) ist, und wobei die Steuerungseinheit (203, 1202) eine Eingabe an das Fahrzeug (1201) auf Grundlage der Steuerungslösung bestimmt, wobei die Eingabe an das Fahrzeug (1201) eine oder eine Kombination aus einer Beschleunigung des Fahrzeugs (1201), einem Drehmoment eines Motors des Fahrzeugs (1201) und einem Lenkwinkel umfasst.</claim-text></claim>
<claim id="c-de-01-0014" num="0014">
<claim-text>Verfahren zum Steuern eines Betriebs eines Systems (120) mit zeitkontinuierlichen nichtlinearen Dynamiken, das Einschränkungen unterliegt, umfassend Gleichheits- und Ungleichheits-Einschränkungen für Zustands- und Steuervariablen des Systems (120), wobei das Verfahren einen Prozessor (201) nutzt, der mit einem Speicher (202) gekoppelt ist, der Zwischenkondensationsmatrizen und eine Näherung einer Einschränkungs-Jacob-Matrix speichert, die für jedes Zeitintervall in einem Steuerungshorizont bestimmt ist, so dass die Zwischenkondensationsmatrizen und die Näherung der Einschränkungs-Jacob-Matrix eine Block-Bidiagonal-Struktur haben, wobei der Prozessor (201) mit gespeicherten Anweisungen gekoppelt ist, die das Verfahren implementieren, wobei die Anweisungen bei Ausführung durch den Prozessor (201) zumindest einige Schritte des Verfahrens ausführen, umfassend:<!-- EPO <DP n="49"> -->
<claim-text>Schätzen eines aktuellen Zustands des Systems (120) unter Verwendung von Messungen des Betriebs des Systems (120);</claim-text>
<claim-text>iteratives Lösen, bei jedem Steuerungsschritt, einer Näherung eines eingeschränkten nichtlinearen Optimierungsproblems, um eine Steuerungslösung zu erzeugen, wobei die Näherung eine Linearisierung der nichtlinearen Dynamiken des Systems (120) enthält, diskretisiert durch Zeitintervalle in dem Steuerungshorizont und dargestellt unter Verwendung der Näherung der Einschränkungs-Jacobi-Matrix für jedes Zeitintervall des Steuerungshorizonts, wobei eine Iteration des Lösens umfasst:
<claim-text>Abrufen, aus dem Speicher (202), der für jedes Zeitintervall bestimmten Zwischenkondensationsmatrizen und der Näherung der Einschränkungs-Jacob-Matrix;</claim-text>
<claim-text>blockweises Aktualisieren der Näherung der Einschränkungs-Jacobi-Matrix und der Zwischenkondensationsmatrizen unter Verwendung einer Auswertung einer oder einer Kombination aus den diskretisierten Dynamiken des Systems (120) und einer Richtungsableitung der diskretisierten Dynamiken des Systems (120), wobei jeder Block in der Einschränkungs-Jacobi-Matrix und den Zwischenkondensationsmatrizen ein Zeitintervall in dem Steuerungshorizont darstellt;</claim-text>
<claim-text>Lösen der Näherung des nichtlinearen Optimierungsproblems unter Verwendung der aktualisierten Näherung der Einschränkungs-Jacobi-Matrix; und</claim-text>
<claim-text>Aktualisieren des Speichers (202) mit der aktualisierten Näherung der Einschränkungs-Jacobi-Matrix und den aktualisierten Zwischenkondensationsmatrizen; und</claim-text></claim-text>
<claim-text>Steuern des Systems (120) unter Verwendung der Steuerungslösung.</claim-text></claim-text></claim>
<claim id="c-de-01-0015" num="0015">
<claim-text>Nicht-transitorisches computerlesbares Speichermedium mit einem darauf verkörperten Programm, das von einem Prozessor (201) ausführbar ist, wobei das Programm Anweisungen enthält, um das Steuerungssystem nach Anspruch 1 zu veranlassen, ein Verfahren durchzuführen, wobei das Verfahren umfasst:<!-- EPO <DP n="50"> -->
<claim-text>Schätzen eines aktuellen Zustands des Systems (120) unter Verwendung von Messungen des Betriebs des Systems (120);</claim-text>
<claim-text>iteratives Lösen, bei jedem Steuerungsschritt, einer Näherung eines eingeschränkten nichtlinearen Optimierungsproblems, um eine Steuerungslösung zu erzeugen, wobei die Näherung eine Linearisierung der nichtlinearen Dynamiken des Systems (120) enthält, diskretisiert durch Zeitintervalle in dem Steuerungshorizont und dargestellt unter Verwendung der Näherung der Einschränkungs-Jacobi-Matrix für jedes Zeitintervall des Steuerungshorizonts, wobei eine Iteration des Lösens umfasst:
<claim-text>Abrufen von Zwischenkondensationsmatrizen und einer Näherung einer Einschränkungs-Jacobi-Matrix, die für jedes Zeitintervall in einem Steuerungshorizont bestimmt sind, so dass die Zwischenkondensationsmatrizen und die Näherung der Einschränkungs-Jacobi-Matrix eine Block-Bidiagonal-Struktur haben;</claim-text>
<claim-text>blockweises Aktualisieren der Näherung der Einschränkungs-Jacobi-Matrix und der Zwischenkondensationsmatrizen unter Verwendung einer Auswertung einer oder einer Kombination aus den diskretisierten Dynamiken des Systems (120) und einer Richtungsableitung der diskretisierten Dynamiken des Systems (120), wobei jeder Block in der Einschränkungs-Jacobi-Matrix und den Zwischenkondensationsmatrizen ein Zeitintervall in dem Steuerungshorizont darstellt; und</claim-text>
<claim-text>Lösen der Näherung des nichtlinearen Optimierungsproblems unter Verwendung der aktualisierten Näherung der Einschränkungs-Jacobi-Matrix; und Aktualisieren des Speichers (202) mit der aktualisierten Näherung der Einschränkungs-Jacobi-Matrix und den aktualisierten Zwischenkondensationsmatrizen; und</claim-text></claim-text>
<claim-text>Steuern des Systems (120) unter Verwendung der Steuerungslösung.</claim-text></claim-text></claim>
</claims>
<claims id="claims03" lang="fr"><!-- EPO <DP n="51"> -->
<claim id="c-fr-01-0001" num="0001">
<claim-text>Système de commande destiné à commander le fonctionnement d'un système (120) avec une dynamique non linéaire continue dans le temps soumise à des contraintes comprenant des contraintes d'égalité et d'inégalité sur des variables d'état et de commande du système (120), le système de commande comprenant :
<claim-text>un estimateur (130) destiné à estimer l'état actuel du système (120) en utilisant des mesures du fonctionnement du système (120) ;</claim-text>
<claim-text>une mémoire (202) destinée à stocker des matrices de condensation intermédiaires et une approximation d'une matrice jacobienne de contrainte déterminées pour chaque intervalle de temps dans un horizon de commande, de telle sorte que les matrices de condensation intermédiaires et l'approximation de la matrice jacobienne de contrainte, présentent une structure bidiagonale par blocs ;</claim-text>
<claim-text>un processeur (201) destiné à résoudre de manière itérative, à chaque étape de commande, une approximation d'un problème d'optimisation non linéaire contrainte afin de produire une solution de commande, dans lequel l'approximation comprend une linéarisation de la dynamique non linéaire du système (120) discrétisée par intervalles de temps dans l'horizon de commande, et représentée en utilisant l'approximation de la matrice jacobienne de contrainte pour chaque intervalle de temps de l'horizon de commande, dans lequel, à chaque étape de commande, le processeur (201) est configuré pour :
<claim-text>rechercher, à partir de la mémoire (202), les matrices de condensation intermédiaires et l'approximation de la matrice jacobienne de contrainte déterminée pour chaque intervalle de temps ;</claim-text>
<claim-text>mettre à jour par bloc l'approximation de la matrice jacobienne de contrainte et les matrices de condensation intermédiaires en utilisant une évaluation de l'une, ou d'une combinaison, de la dynamique discrétisée du système (120) et d'une dérivée directionnelle de<!-- EPO <DP n="52"> --> la dynamique discrétisée du système (120), dans lequel chaque bloc dans la matrice jacobienne de contrainte et les matrices de condensation intermédiaires, représente un intervalle de temps dans l'horizon de commande ;</claim-text>
<claim-text>résoudre l'approximation du problème d'optimisation non linéaire en utilisant l'approximation mise à jour de la matrice jacobienne de contrainte ; et</claim-text>
<claim-text>mettre à jour la mémoire (202) avec l'approximation mise à jour de la matrice jacobienne de contrainte et des matrices de condensation intermédiaires mises à jour ; et</claim-text></claim-text>
<claim-text>un contrôleur (203, 1202) destiné à commander le système (120) en utilisant la solution de commande.</claim-text></claim-text></claim>
<claim id="c-fr-01-0002" num="0002">
<claim-text>Système de commande selon la revendication 1, dans lequel l'approximation du problème d'optimisation non linéaire comprend une correction de gradient qui dépend de la différence entre l'approximation jacobienne de contrainte et une matrice jacobienne de contrainte exacte de la dynamique discrétisée du système (120).</claim-text></claim>
<claim id="c-fr-01-0003" num="0003">
<claim-text>Système de commande selon la revendication 2, dans lequel l'approximation du problème d'optimisation non linéaire est un programme quadratique (QP).</claim-text></claim>
<claim id="c-fr-01-0004" num="0004">
<claim-text>Système de commande selon la revendication 1, dans lequel la mise à jour par bloc de l'approximation de la matrice jacobienne de contrainte et des matrices de condensation intermédiaires, est une mise à jour de rang 1 par bloc, et dans lequel la mise à jour de rang 1 est définie par l'une, ou une combinaison, d'une évaluation de la dynamique discrétisée du système (120), et d'une évaluation au moins d'une dérivée directionnelle de la dynamique discrétisée du système (120).</claim-text></claim>
<claim id="c-fr-01-0005" num="0005">
<claim-text>Système de commande selon la revendication 1, dans lequel la dynamique discrétisée du système (120) est basée sur une intégration explicite afin de discrétiser un ensemble d'équations différentielles non linéaires continues dans le temps, et dans lequel l'approximation de la matrice jacobienne de contrainte est une approximation jacobienne<!-- EPO <DP n="53"> --> d'une intégration explicite appliquée à la dynamique continue dans le temps, dans chaque l'intervalle de temps de l'horizon de commande.</claim-text></claim>
<claim id="c-fr-01-0006" num="0006">
<claim-text>Système de commande selon la revendication 1, dans lequel la dynamique discrétisée du système (120) est basée sur une intégration implicite appliquée à la dynamique du système continue dans le temps dans chaque intervalle de temps de l'horizon de commande, dans lequel les matrices de condensation sont fonctions d'équations jacobiennes comprenant des variables intermédiaires définies par un système implicite d'équations non linéaires de la dynamique non linéaire continue dans le temps, et dans lequel l'approximation de la matrice jacobienne de contrainte représente un système combiné de la dynamique discrétisée et du système implicite d'équations non linéaires pour chaque intervalle de temps de l'horizon de commande.</claim-text></claim>
<claim id="c-fr-01-0007" num="0007">
<claim-text>Système de commande selon la revendication 6, dans lequel le processeur (201) élimine de manière numérique les variables intermédiaires de l'approximation du problème d'optimisation non linéaire, en formant une approximation condensée du problème d'optimisation non linéaire avec une mise à jour de rang 1 par bloc des approximations jacobiennes de contrainte.</claim-text></claim>
<claim id="c-fr-01-0008" num="0008">
<claim-text>Système de commande selon la revendication 1, dans lequel la mise à jour par bloc est une mise à jour de rang 1 avec au moins une évaluation de la dynamique discrétisée du système (120).</claim-text></claim>
<claim id="c-fr-01-0009" num="0009">
<claim-text>Système de commande selon la revendication 1, dans lequel la mise à jour par bloc est une mise à jour de rang 1 des deux côtés avec au moins une évaluation de la dynamique discrétisée du système (120), et avec au moins une évaluation d'une dérivée directionnelle adjointe de la dynamique discrétisée du système (120).</claim-text></claim>
<claim id="c-fr-01-0010" num="0010">
<claim-text>Système de commande selon la revendication 1, dans lequel le processeur (201) calcule une mise à jour de rang faible d'une factorisation d'une hessienne condensée de l'approximation du problème d'optimisation<!-- EPO <DP n="54"> --> non linéaire en réponse à la mise à jour par bloc de l'approximation de la matrice jacobienne de contrainte et des matrices de condensation intermédiaires.</claim-text></claim>
<claim id="c-fr-01-0011" num="0011">
<claim-text>Système de commande selon la revendication 1, dans lequel le processeur (201) calcule une mise à jour de rang 2 symétrique d'une factorisation d'une hessienne condensée de l'approximation du problème d'optimisation non linéaire en réponse à la mise à jour par bloc de l'approximation de la matrice jacobienne de contrainte et des matrices de condensation intermédiaires.</claim-text></claim>
<claim id="c-fr-01-0012" num="0012">
<claim-text>Système de commande selon la revendication 1, dans lequel le processeur (201) calcule une mise à jour de rang 3 symétrique d'une factorisation d'une hessienne condensée de l'approximation du problème d'optimisation non linéaire en réponse à la mise à jour par bloc de l'approximation de la matrice jacobienne de contrainte et des matrices de condensation intermédiaires, et en réponse d'une mise à jour de rang 1 d'une approximation d'une matrice hessienne.</claim-text></claim>
<claim id="c-fr-01-0013" num="0013">
<claim-text>Système de commande selon la revendication 1, dans lequel le système (120) est un véhicule (1201), et dans lequel le contrôleur (203, 1202) détermine une entrée vers le véhicule (1201) sur la base de la solution de commande, dans lequel l'entrée vers le véhicule (1201) comprend l'un, ou une combinaison, d'une accélération du véhicule (1201), du couple d'un moteur du véhicule (1201), et d'un angle de braquage.</claim-text></claim>
<claim id="c-fr-01-0014" num="0014">
<claim-text>Procédé destiné à commander le fonctionnement d'un système (120) avec une dynamique non linéaire continue dans le temps soumise à des contraintes comprenant des contraintes d'égalité et d'inégalité sur des variables d'état et de commande du système (120), dans lequel le procédé utilise un processeur (201) couplé à une mémoire (202) qui stocke des matrices de condensation intermédiaires et une approximation d'une matrice jacobienne de contrainte déterminées pour chaque intervalle de temps dans un horizon de commande, de telle sorte que les matrices de condensation intermédiaires et l'approximation de la<!-- EPO <DP n="55"> --> matrice jacobienne de contrainte présente une structure bidiagonale par blocs, dans lequel le processeur (201) est couplé à des instructions stockées qui mettent en œuvre le procédé, dans lequel les instructions, quand elles sont exécutées par le processeur (201), exécute certaines étapes au moins du procédé, comprenant les étapes suivantes :
<claim-text>estimer l'état actuel du système (120) en utilisant des mesures du fonctionnement du système (120) ;</claim-text>
<claim-text>résoudre de manière itérative, à chaque étape de commande, une approximation d'un problème d'optimisation non linéaire contrainte afin de produire une solution de commande, dans lequel l'approximation comprend une linéarisation de la dynamique non linéaire du système (120) discrétisée par intervalles de temps dans l'horizon de commande, et représentée en utilisant l'approximation de la matrice jacobienne de contrainte pour chaque intervalle de temps de l'horizon de commande, dans lequel, à chaque étape de commande, dans lequel, une itération de résolution comprend les étapes suivantes :
<claim-text>rechercher, à partir de la mémoire (202), les matrices de condensation intermédiaires et de l'approximation de la matrice jacobienne de contrainte déterminée pour chaque intervalle de temps ;</claim-text>
<claim-text>mettre à jour par bloc l'approximation de la matrice jacobienne de contrainte et les matrices de condensation intermédiaires en utilisant une évaluation de l'une, ou d'une combinaison, de la dynamique discrétisée du système (120) et d'une dérivée directionnelle de la dynamique discrétisée du système (120), dans lequel chaque bloc dans la matrice jacobienne de contrainte et les matrices de condensation intermédiaires, représente un intervalle de temps dans l'horizon de commande ;</claim-text>
<claim-text>résoudre l'approximation du problème d'optimisation non linéaire en utilisant l'approximation mise à jour de la matrice jacobienne de contrainte ; et</claim-text>
<claim-text>mettre à jour la mémoire (202) avec l'approximation mise à jour de la matrice jacobienne de contrainte et des matrices de condensation intermédiaires mises à jour ; et</claim-text></claim-text>
<claim-text>commander le système (120) en utilisant la solution de commande.</claim-text><!-- EPO <DP n="56"> --></claim-text></claim>
<claim id="c-fr-01-0015" num="0015">
<claim-text>Support de stockage non transitoire pouvant être lu par un ordinateur, dans lequel est incorporé un programme pouvant être exécuté par un processeur (201), le programme comprenant des instructions qui font exécuter par le système de commande selon la revendication 1, un procédé, le procédé comprenant les étapes suivantes :
<claim-text>estimer l'état actuel du système (120) en utilisant des mesures du fonctionnement du système (120) ;</claim-text>
<claim-text>résoudre de manière itérative, à chaque étape de commande, une approximation d'un problème d'optimisation non linéaire contrainte afin de produire une solution de commande, dans lequel l'approximation comprend une linéarisation de la dynamique non linéaire du système (120) discrétisée par intervalles de temps dans l'horizon de commande, et représentée en utilisant l'approximation de la matrice jacobienne de contrainte pour chaque intervalle de temps de l'horizon de commande, dans lequel, à chaque étape de commande, dans lequel, une itération de résolution comprend les étapes suivantes :
<claim-text>rechercher des matrices de condensation intermédiaires et une approximation d'une matrice jacobienne de contrainte déterminées pour chaque intervalle de temps dans un horizon de commande, de telle sorte que les matrices de condensation intermédiaires et l'approximation de la matrice jacobienne de contrainte, présentent une structure bidiagonale par blocs ;</claim-text>
<claim-text>mettre à jour par bloc l'approximation de la matrice jacobienne de contrainte et les matrices de condensation intermédiaires en utilisant une évaluation de l'une, ou d'une combinaison, de la dynamique discrétisée du système (120) et d'une dérivée directionnelle de la dynamique discrétisée du système (120), dans lequel chaque bloc dans la matrice jacobienne de contrainte et les matrices de condensation intermédiaires, représente un intervalle de temps dans l'horizon de commande ; et</claim-text>
<claim-text>résoudre l'approximation du problème d'optimisation non linéaire en utilisant l'approximation mise à jour de la matrice jacobienne de contrainte ; et mettre à jour la mémoire (202) avec l'approximation mise à jour de la matrice jacobienne de contrainte et des matrices de condensation intermédiaires mises à jour ; et</claim-text><!-- EPO <DP n="57"> --></claim-text>
<claim-text>commander le système (120) en utilisant la solution de commande.</claim-text></claim-text></claim>
</claims>
<drawings id="draw" lang="en"><!-- EPO <DP n="58"> -->
<figure id="f0001" num="1"><img id="if0001" file="imgf0001.tif" wi="121" he="183" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="59"> -->
<figure id="f0002" num="2"><img id="if0002" file="imgf0002.tif" wi="147" he="198" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="60"> -->
<figure id="f0003" num="3A"><img id="if0003" file="imgf0003.tif" wi="156" he="209" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="61"> -->
<figure id="f0004" num="3B"><img id="if0004" file="imgf0004.tif" wi="163" he="211" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="62"> -->
<figure id="f0005" num="3C"><img id="if0005" file="imgf0005.tif" wi="154" he="211" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="63"> -->
<figure id="f0006" num="4A"><img id="if0006" file="imgf0006.tif" wi="156" he="192" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="64"> -->
<figure id="f0007" num="4B"><img id="if0007" file="imgf0007.tif" wi="163" he="218" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="65"> -->
<figure id="f0008" num="4C"><img id="if0008" file="imgf0008.tif" wi="165" he="216" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="66"> -->
<figure id="f0009" num="5A"><img id="if0009" file="imgf0009.tif" wi="150" he="183" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="67"> -->
<figure id="f0010" num="5B"><img id="if0010" file="imgf0010.tif" wi="165" he="207" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="68"> -->
<figure id="f0011" num="6A"><img id="if0011" file="imgf0011.tif" wi="165" he="173" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="69"> -->
<figure id="f0012" num="6B"><img id="if0012" file="imgf0012.tif" wi="155" he="174" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="70"> -->
<figure id="f0013" num="6C"><img id="if0013" file="imgf0013.tif" wi="161" he="171" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="71"> -->
<figure id="f0014" num="7A"><img id="if0014" file="imgf0014.tif" wi="165" he="216" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="72"> -->
<figure id="f0015" num="7B"><img id="if0015" file="imgf0015.tif" wi="151" he="220" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="73"> -->
<figure id="f0016" num="7C"><img id="if0016" file="imgf0016.tif" wi="153" he="213" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="74"> -->
<figure id="f0017" num="8A"><img id="if0017" file="imgf0017.tif" wi="165" he="223" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="75"> -->
<figure id="f0018" num="8B"><img id="if0018" file="imgf0018.tif" wi="157" he="226" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="76"> -->
<figure id="f0019" num="8C"><img id="if0019" file="imgf0019.tif" wi="165" he="214" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="77"> -->
<figure id="f0020" num="9A"><img id="if0020" file="imgf0020.tif" wi="151" he="220" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="78"> -->
<figure id="f0021" num="9B"><img id="if0021" file="imgf0021.tif" wi="152" he="220" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="79"> -->
<figure id="f0022" num="10A"><img id="if0022" file="imgf0022.tif" wi="165" he="215" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="80"> -->
<figure id="f0023" num="10B"><img id="if0023" file="imgf0023.tif" wi="161" he="214" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="81"> -->
<figure id="f0024" num="11A"><img id="if0024" file="imgf0024.tif" wi="105" he="157" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="82"> -->
<figure id="f0025" num="11B"><img id="if0025" file="imgf0025.tif" wi="123" he="188" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="83"> -->
<figure id="f0026" num="12"><img id="if0026" file="imgf0026.tif" wi="109" he="162" img-content="drawing" img-format="tif"/></figure><!-- EPO <DP n="84"> -->
<figure id="f0027" num="13"><img id="if0027" file="imgf0027.tif" wi="106" he="153" img-content="drawing" img-format="tif"/></figure>
</drawings>
<ep-reference-list id="ref-list">
<heading id="ref-h0001"><b>REFERENCES CITED IN THE DESCRIPTION</b></heading>
<p id="ref-p0001" num=""><i>This list of references cited by the applicant is for the reader's convenience only. It does not form part of the European patent document. Even though great care has been taken in compiling the references, errors or omissions cannot be excluded and the EPO disclaims all liability in this regard.</i></p>
<heading id="ref-h0002"><b>Non-patent literature cited in the description</b></heading>
<p id="ref-p0002" num="">
<ul id="ref-ul0001" list-style="bullet">
<li><nplcit id="ref-ncit0001" npl-type="b"><article><atl>Fast nonlinear model predictive control for teleoperation systems using computationally efficient optimization techniques</atl><book><author><name>SABETGHADAM BAHAREH et al.</name></author><book-title>2014 22ND IRANIAN CONFERENCE ON ELECTRICAL ENGINEERING (ICEE)</book-title><imprint><name>IEEE</name><pubdate>20140520</pubdate></imprint><location><pp><ppf>1371</ppf><ppl>1376</ppl></pp></location></book></article></nplcit><crossref idref="ncit0001">[0002]</crossref></li>
</ul></p>
</ep-reference-list>
</ep-patent-document>
